{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;;;UAEAA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA,qCAAiCC,4CAAjC,GAA2C;AAC3CC;AACA,aAFA,MAGA;AACA;AACA;;AACA;AAAA;AAA+BA,qBAA/B,CAA+BC,IAA/B,CAAmD;AAAG;AACtD;AACA;AACA;AACA;AAAA;AAAA,eAJmD,CAAnD;AAAA;AAKA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACAC;AACAF;AAAA;AACA;AACA;AACA;AACA;AACA;AACAG;AACA,eAFA,MAGA;AACAD;;AACA;AACAE;AACAD;AACAE,0DADA;AAEAC;AAFA;AAIA;;AACAF;AACA;AACS,aAnBT;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACAC,gDADA;AAEAE,gDAFA;AAGAC;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACAC;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,oCACA,aADA,IAEAC,YAFA,IAGA,wBAHA,IAIA,aAJA,IAKA,eALA;AAMA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA;AACA,+DAA6D;AAAM;AACnE;AACA;AACA;AACA,8BAAsC;AAAA,oBAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,oBAAvBC,IAAuB,QAAvBA,IAAuB;AAAA,oBAAvBC,KAAuB,QAAvBA,KAAuB;AACtC,uDACAF,iDADA,IAEAE,WAFA,IAGAC,4CAHA,IAIA,iBAJA;AAKa,eAVgD,CAA7D,EAUiB;AAAG;AACpB;AACA;AACA;AAAA;AAAA;AAAoDC,yCAApD;AAAA,eAHiB,CAVjB,EAaoDC,SAbpD;AAcA;;AACA,gCAA4BC,iDAA5B,CAA2CjB,OAA3C;AACA;AACA;;;;;;AAEAF;AAA6E;AAAA,OAA7E;;AACAA,oDAA8CoB,2DAAmB;AAAGC,mCAAH;AAAGP,sCAAH;AAAGQ;AAAH,OAAnB,CAA9C;;AACA;AAAe,2DAAmDF,gEAAwBpB,wBAAxB,EAAwB;AAC1Fc,gBAAcM,+CAD4E;AAE1FG;AAAiBF;AAAjB;AAF0F,UAAxB,EAG7D,IAH6D,EAG7D,IAH6D,CAAnD;AAGO,OAHtB;AAKA;AACA;AACA;AACA;;;UACAG;;;;AAEAA;AAAmE;AAAA,OAAnE;;AACAA,8CAAwCJ,+DAAuB;AAAGN;AAAH,OAAvB,CAAxC;AACAU,8CAAwCJ,+DAAuB,EAAvB,CAAxC;;AACA;AAAe,2DAAmDA,gEAAwBI,mBAAxB,EAAwB;AAC1FV,gBAAcM,mDAD4E;AAE1FG;AACAE,oDADA;AAEAC;AAFA;AAF0F,UAAxB,EAM7D,IAN6D,EAM7D,IAN6D,CAAnD;AAMO,OANtB;;AAOA;AAAe,2DAAmDN,iEAAyBI,mBAAzB,EAAyB;AAAuBC,kDAAvB;AAAuBC;AAAvB,SAAzB,CAAnD;AAAoL,OAAnM;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3NA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AAMA;;AACA;AAAuD;AACnDC,kEAAgB,CAAhB,EAAgB,cAAhB,EAAgB,CAAhB;AACJ;;AAAE;AACF;;AACIA,mEAAiB,MAAjB,EAAiBC,aAAjB,EAAiB,SAAjB,EAAiBA,gBAAjB,EAAiB,OAAjB,EAAiBA,cAAjB,EAAiB,OAAjB,EAAiBA,QAAjB;AACJ;AAAA;;AACA;AACA;;AACA;;AACA;;AACA;AAAwD;AACpDD,kEAAgB,CAAhB,EAAgB,cAAhB,EAAgB,CAAhB;AACJ;;AAAE;AACF;;AACIA,mEAAiB,OAAjB,EAAiBE,IAAjB;AACJ;AAAA;;AACA;AACA;AACA;;AACAC;AAAA;AACA;AACA;AACA,qBAAa,CAHb;;AAIAC;AACAD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,sBACA;AACA;;AACA;;AACA;AACAhB;AACA;;AACA;AACAA;AAAA;AAA+BA,cAA/B,CAA+BkB,SAA/B,CAA+BC,WAA/B,CAA+BZ,IAA/B;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AACA;AACA;AACA,sDACAN,SADA,GAEAA,sCAFA;AAGAmB;AACA,WANA,MAOA;AACAA;AACA,WAFA,MAGA;AACAA,8BAAuBnB,SAAvB;AACA;;AACAA;AAA2BoB,0BAA3B;AAA2BD;AAA3B;AACA;;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA;;AACA;AACAE;AACAC;AACA;;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,WALA,EAK0CD,UAL1C;AAMA;AACA;AACA;;AACAE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,wBAAoBC,oBAApB,EAA4CA,GAA5C,EAA4C;AAC5C;AACA;;AACA;AACAC;AACA;;AACAA;AACA;;AACAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AAFA,mDAGAC,iBAHA;AAAA;;AAAA;AAGA;AAAA;;AACA;AACA;AACA;;AACAD;AACA;AARA;AAAA;AAAA;AAAA;AAAA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAAjB;AAAA;;AACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmB;AACA,aAFA,MAGA;AACAC;AACA;AACA;AACK,SAbL;AAcA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,mDACAC,2DADA,IAEA,6CAFA;AAGA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,gCACW,oDAAYnC,KAAZ,CADX,IAEAA,iBAA6BkB,sDAF7B;AAGA;AAAAlB,mDAHA,IAIA,6EAJA,EAIA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,SAbA,CAcA;;;AACA;AACA;AACA;;AACA,6BAAyBoC,2DAAzB,EAAwC;AACxC;AACA;;AACA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,WAJA;AAKA,SA9BA,CA+BA;AACA;;AACA;;;AACA;AACA;;AACA;AACAC,4CArCA,CAsCA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAF;AACA,WAFA,MAGA;AACAG;AACA;;AACA;AACK,SAfL,EAeKD,CAfL;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAF;AAAyCI,2BAAzC;AAAyCC,wBAAzC;AAAyCC;AAAzC;AACAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACAoC;AACA;;AACA;AACAC;AACA;AACA;;;AACA;;AACA;AACAC;AACAC;AAAgBC,iCAAhB;AAAgBC;AAAhB;;AACA;AACAL,8CAAuCM,IAAvC,GAA4CL,OAA5C;AACAR;AACAM,gCADA;AAEAQ;AAAA;AACA;AACA;AACA;AAAA,uCAA+BD,IAA/B;AAAA,eALA;AAMAE;AAAA;AACA;AACA;AACA;AACA;AACA,qDAAkDF,IAAlD,IAAuD;AACvD;AACA,sDAAuDA,IAAvD;AACAL,kCAAiCK,IAAjC,KAAsCF,YAAtC;AACAF;AAAA;AACA;AACA;AACA;AACA;AAAA;AAA+CO,kDAA/C;AAA+CL,gDAA/C;AAA+CC;AAA/C;AAAA,mBAJA;AAKA;AACiB;AArBjB;AAuBA;AACA;;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAIA;AAEA;AACA;AACA;AACA;;AACA;;;AACA,+BAA0B7B,yDAA1B,CAAwC,eAAxC;AACA;AACA;AACA;;;UACAkC;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACAC,0BADA;AAEAC;AAFA;AAIA;AACAC,qDADA;AAEAC,6BAFA;AAGAC;AAAA;AACA;AACA;AACA;AACA;AACA;AACa;AATb;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AAAA;;AACA;AACAC;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AACAxD;AACAwD;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AACA,8CAA0C,WAA1C,EAA0CA,aAA1C;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACAjE;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA,aANA,MAOA;AACA;AACA;AAAA;AAA0D;AAAMmB;AAAN,iBAA1D;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,eARb;AASA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,kEAAwDA,IAAxD;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,0BAA6B;AAAA;;AAAA,gBAA7BN,KAA6B,uEAA7B,EAA6B;;AAC7B;AACA;;AACA;AACA4B;AACA;AACA;;;AACA;;AACA;AACAA;AACA;;AACA;AACA5B;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA4B;AACA;AACa,eAVb;AAWA;AACA;;;AACA;;AACA;AACAA;AACA;;AACA;AACA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,+BAAkC;AAAA,gBAAlCA,KAAkC,uEAAlC,EAAkC;;AAClC;AACA;AACA;AACA;;;AACA;;AACA;AACA;AACA;;AACA,wCAAuCA,oBAAvC;AAAA,gBAAgBqD,SAAhB,yBAAgBA,SAAhB;AAAA,gBAAgBC,SAAhB,yBAAgBA,SAAhB;AACA;;AACA,yCACAC,uBADA,CACAxD,cADA,EAEAyD,MAFA,CAEAF,SAFA;;AAGAlB;AACAqB;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA;AACAtE;AAAA;AACA;AACA;AACA;AACA;AACA;AACa,eANb;AAOA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,qEAA2DmB,IAA3D;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AAAA;AAA8C,gBAA9C;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,uEAA6DA,IAA7D;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;;;;AAEAwC;AAAuD;AAAA,OAAvD;;AACAA,yCAAmClC,iEAAyB;AAAG8C,4BAAH;AAAGC,mCAAH;AAAGC;AAAH,OAAzB,CAAnC;AACA;;AAAAd,sCAAkD,iEAAgB;AAAGa;AAA2C;AAA4B,SAA1E;AAA0ED,4BAA1E;AAA0EE;AAA1E,OAAhB,CAAlD;;AACA;AAAe,2DAAmDhD,gEAAwBkC,aAAxB,EAAwB;AAC1F/C,gBAAca,qDAD4E;AAE1FJ;AAAiBoD;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAY,SAHgC,EAGhC,IAHgC,CAAnD;AAG6B,OAH5C;AAKA;AACA;AACA;AACA;;;UACAC;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AAAA;;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;;;AACA;AAAwBC,oCAAxB;AAAwBrC,0BAAxB;AAAwBsC,sCAAxB;AAAwB5E;AAAxB;AACA6E;AAAA;AACA;AACA;AACA;AACA;;AACAhE;AACS,aANT;AAOA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;AAKA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;;AAKA;AACAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;AAKA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACAb;AACAA;;AACA;AACAA;AACA;;AACA;AACAiD,4DAA0D6B,yCAA1D;AACA;;AACA;AACA7B;AACA;;AACA;AACAA;AACA;;AACA;AACAjD;AACA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACAa;AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,6DAAmEY,4DAAnE;AACAsD;AACqB,mBATrB;AAUA;;AACA;AACAlE;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,mBAJA;AAKA;AACa,eAxBb;AAyBA;;AACA;AACAb;AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AAAgCa,6BAAhC,CAAgCmE,WAAhC,CAAgCnE,KAAhC,EAAgC,IAAhC;;AACA;AACa,eATb;AAUA;;AACA;AACA;;;;;;AAEA6D;AAAiE,6CAAoCjD,uDAAekC,aAAf,CAApC,EAAmElC,uDAAgBA,mEAAhB,CAAnE,EAAqHA,uDAAgBA,mDAAhB,CAArH;AAAoJ,OAArN;;AACAiD,8CAAwCjD,iEAAyB;AAAG8C,iCAAH;AAAGC,wCAAH;AAAGC;AAAH,OAAzB,CAAxC;AACA;;AACAC;AAAA,gBACA;AAAM9D;AAAN,SADA,EAEA;AAAMA,gBAAMa;AAAZ,SAFA,EAGA;AAAMb,gBAAMa;AAAZ,SAHA;AAAA;AAKA;;;AAAAiD,2CAAuD,iEAAgB;AAAGF;AAAgD,wCAA6B,uDAAMb,aAAN,CAA7B,EAAmD,uDAAOlC,mEAAP,CAAnD,EAAqF,uDAAOA,mDAAP,CAArF;AAAyG,SAA5J;AAA4J8C,iCAA5J;AAA4JE;AAA5J,OAAhB,CAAvD;;AACA;AAAe,2DAAmDhD,gEAAwBiD,kBAAxB,EAAwB;AAC1F9D,gBAAca,qDAD4E;AAE1FJ;AAAiBoD;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAU7D;AAAV,aAA8B;AAAIA,kBAAMa;AAAV,WAA9B,EAAyE;AAAIb,kBAAMa;AAAV,WAAzE;AAAwG,SAH5D,EAG4D,IAH5D,CAAnD;AAGyH,OAHxI;AAKA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;;AACA;AACA;AACA;;AACA;;AACA;AACAwD;AACA;AACA;;;AACA;AAAA;AAAgCA,sBAAhC;;AACA;AACA;AACA;AACA;;;AACA;AAAmBC;AAAnB;;AACA,4BAAwBvC,qDAAxB,EAAiC;AACjC;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,WAJA;;AAKA;AACAwC;AAAA;AACA;AACA;AACA;AAAA;AAAA,aAHA;AAIA;AACA,SAbA,MAcA,oBAA6BxC,qDAA7B,EAAsC;AACtC;AACA;AACA;;AACA;;AACA;AACAwC;AAAA;AACA;AACA;AACA;AAAA;AAAA,aAHA;AAIA;AACA;;AACAF;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAgCpE,gCAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACAoE;;AACA;AACAhC;AACA;;AACA;AACAgC;AACA;;AACA;AACAhC;AACAgC;AACAA;AACApE;AACAuE;AAAA;AACA;AACA;AACA;AACA,2BAAsC;AAAA,gBAA3B9B,WAA2B,SAA3BA,WAA2B;AAAA,gBAA3BD,YAA2B,SAA3BA,YAA2B;;AACtC;AACAA;AACA;AACS,WART;;AASA;AACA4B;AAAA;AACA;AACA;AACA;AACA;AACApE,4DADA,CAEA;;AACAA;AACa,aARb;AASA;AACA;AACA;;;AACA;AAAA;AAAgCA,gCAAhC;;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;;AACA,+EACAoE,uBADA,IAEAA,mBAA8BtC,uDAF9B,EAEyC;AACzCsC;AACA;;AA/CA,mCAgDA5C,CAhDA;AAiDA;AACA;;AACA;AACA8C;AAAoCD;AAApC;AAA+C;AAC/C;AACA;AACA;AAAA,iDAA8CvC,qDAA9C,CAAuD,EAAvD;AAAA,aAHA;AAIA;;AACA0C;AAAA;AAAgCA,4BAAhC;AAzDA;;AAgDA,wBAAoBhD,oBAApB,EAA4CA,GAA5C,EAA4C;AAAA,gBAA5CA,CAA4C;AAU5C;AACA;;;AACA;;AACA;AACA8C;AAAgCD;AAAhC;AAA2C;AAC3C;AACA;AACA;AAAA;AAAA,WAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;;AACA;AACA;AACA;;AACA;AACAtC;AAA+BsC,0BAA/B;AAA+BI;AAA/B;;AACA;AACA;AAAwB1C,yBAAxB,CAAwB2C,IAAxB,CAAwB3C,QAAxB;AACA;;AACA;AACA;AAAwBA,wBAAxB,CAAwB2C,IAAxB,CAAwB3C,OAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA,4BAAwBD,qDAAxB,IAAiC,4BAAjC,EAAiC;AACjCM;;AACA;AAAwBrB,cAAxB,CAAwB4D,aAAxB;AAAwB;AACxB;AACA;AACA;AACA;AACA9C,mBACA+C,IADA,CACA7D,aADA,EAEA8D,OAFA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA,aANA;AAOS,WAZT;AAaA;AACA;AACA;AACA;AACA;;;AACA;;AACA;AACA9D;AAAA;AACA;AACA;AACA;AACA;AACA+D,qDAAmDC,UAAnD,EAAgE;AAAKV;AAAL,aAAhE;AACS,WANT;AAOA;;AACAW;;AACA;AACAjE;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAA;AACAA;AACAA;;AACA,4BAAwBe,qDAAxB,IAAiCf,gBAAoBe,qDAArD,EAA8D;AAC9DD,qCACAgD,OADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,WALA;AAMA;AACA;AAEA;AACA;AACA;AACA;;;UACAI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEACA;AACAC,iBAFA,EAEAC,eAFA,EAEA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA,iCAA+BvE,uDAA/B;AACA;AACA;AACA;AACA,kCAAgCqD,yCAAhC;AACA,uDAAqD;AAAS;AAC9D;AACA;AACA;AAAA,+DAAuD,sDAAI,CAAJ,CAAvD;AAAA,WAHqD,CAArD,EAG2D9D,SAH3D;AAG2D;AAC3D;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACS,aART;AAAA,WANA;;AAeA;AACAP;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;eAbA;AAAuB;AAAA;;;;AAevB;AACA;AACA;AACA;AAAmB;AAAA;AACnB;AACA;AACA;AACA;;eARA;AAAyB;AAAA;;;;AAUzB;AACA;AACA;AACA;AAAoB;AAAA;AACpB;AACA;AACA;AACA;;eARA;AAA2B;AAAA;;;eAS3B;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA,2DACAwF,sFADA,EACA;AACAC;AACA;;AACAD;AACA;;AACA;AACAxF;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA;AACA0F;AACA;;AACA;AACA,2CAA0CxD,qDAA1C,CAAmD,EAAnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,4BAAqC;AAAA,gBAAnBV,GAAmB,SAAnBA,GAAmB;AAAA,gBAAnB1B,KAAmB,SAAnBA,KAAmB;AAAA,gBAAnBM,KAAmB,SAAnBA,KAAmB;AACrCuF;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA9D;AAAA;AAAyE,+BAAzE,CAAyE+D,aAAzE,GAAyE/D,KAAzE;;AACA;AACAI;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,mBAJA;AAKAA;AACA;;AACA;AAAgC,+BAAhC,CAAgC4D,UAAhC,GAVA,CAWA;AACA;;;AACA;AACA;AACA,iBAFA,MAGA;AACA;AACA;AACa,eAvBb;AAwBA;;AACA;AACArD;AACAmC;AAAA;AACA;AACA;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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;eACA;AACA,gGAAqF,qBAArF;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA,+FAAoF,qBAApF;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA,kGAAuF,qBAAvF;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;AAKA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA8G;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;AACA,0CAAgC,qCAAhC;AAAA,kBAAoBC,SAApB,yBAAoBA,SAApB;AACA;;;AACA;AACA;AACApD;AAAA;AACA;AACA;AACA;AACA,+BAAyD;AAAA,oBAA1C9B,WAA0C,SAA1CA,WAA0C;AAAA,oBAA1CI,aAA0C,SAA1CA,aAA0C;AAAA,oBAA1CL,YAA0C,SAA1CA,YAA0C;;AACzD;AACA;AACA;AACA;AACA;;;AACA;;AACA;AACAA;AACA,mBAFA,MAGA;AACA;AACA;;AACA;AACA;AACa,eAnBb;AAoBA,aA1BA,MA2BA;AACA,2CAAgC,iCAAhC;AAAA,kBAAoBmF,UAApB,0BAAoBA,SAApB;AACA;;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA,oBAAoB,oDAAYC,CAAZ,KAAY,oEAAhC,EAAgC;AAChC;AACA;AACA;AAAA;AACA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ACTY,kBAAkBa;AADT,YANW;AAQXZ;AACTD,kBAAkBa;AADT,YARW;AAUXmH;AACThI,kBAAkBa,oDADT;AAETJ;AAAA;AAAgD;AAAKwH,oBAAMpH,2DAAX;AAA2B;AAA3B,aAAhD;AAFS;AAVW,SAT8C,CAAnD;AAsBC,OAtBhB;AAwBA;AACA;AACA;AACA;;;UACAqH;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAC,yBADA;AAEAC,wFAFA;AAGAnH;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AARA;AAUa;AAnBb;AAqBA;AACA;AACA;AACA;AACA;;;;;eACA;AAAe;AAAA;AACf;AACA;AACA;AACA;;;;eACA;AAA8B;AAAA;AAC9B;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,mBAJA;AAKA;AACa,eAZb;;AAaA;AACAuD;AAAA;AACA;AACA;AACA;AACA,iCAAgD;AAAA,sBAA7B/B,YAA6B,SAA7BA,YAA6B;AAAA,sBAA7BK,aAA6B,SAA7BA,aAA6B;;AAChD;AACAhB;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,qBAJA;AAKA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACyB,qBARzB;AASA;AACiB,iBAvBjB;AAwBA;;AACA;AACA;;AACA;AACA;AACA0C;AAAA;AACA;AACA;AACA;AACA,kCAAiC;AAAA,sBAAd/B,YAAc,UAAdA,YAAc;;AACjC;AACiB,iBANjB;AAOA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AAAA;AAA2C,2CAA3C;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gEACA,mFADA,GACA;AACA;;AACA;AACA,+EAAuE9C,KAAvE;AACA,iBAFA,MAGA;AACA;AACA;AACA;AACS,aAjBT;AAkBA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,6DACA,uBACA0I,IADA;AACA;AACA;AACA;AACA;AACA;AAAA,kBAAeC,aAAf,UAAeA,aAAf;AAAA,qBAA8B,0GAA9B;AAAA,aALA,CADA;;AAOA;AACAC;AAAA;AACA;AACA;AACA;AAAA;AAAA,eAHA;AAIA,aALA,MAMA;AACAA;AAAA;AACA;AACA;AACA;AAAA;AAAA,eAHA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA,YACA;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACApI;AACA,aAFA,MAGA;AACAkC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;;;;AAEA6F;AAA+D,4CAAmCrH,gEAAyBA,oDAAzB,CAAnC,EAA+EA,gEAAyBA,qDAAzB,CAA/E,EAA4HA,gEAAyBsG,qDAAzB,CAA5H;AAA6J,OAA5N;;AACAe,4CAAsCrH,gEAAwB;AAAGb,+BAAH;AAAGmG,iDAA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;;;iBACA;AAAA;;AACA;AACA;AACA,aAHA,CAIA;;;AACAjI;;AACA;AAAA,2CACAhB,GADA;AAEA;AACA;;AACA;AACApB;AACAmK;AACA;AACA;AACA;AACA;AAAA;AAAA,qBAJA,GAKAG,SALA;AADA;;AAQA;AACAzI;AACAc;AAAA;AACA;AACA;AACA;AAAA;AAAA,uBAJA;AAKAC;AAAA;AACA;AACA;AACA,sCAAqC,CARrC;AASAX,sCATA;AAUAE;AAVA;AAYA;AACA,iBAvBA,MAwBA,kCAAuDoI,6CAAvD,EAAiE;AACjE;AACA;AAAA;AACA;AACA;AACA,2BAHApK,SAGA;AAAA;AAAA;AAA0CqK,wCAA1C,CACArK,SADA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAH;AACA;AACqB,uBAVrB;AAAA;AAAA,mBAHA;AAcA;;;AACA;AACA;;AACA;;AACAA;AAAA;AACA;AACA;AACA;AACA;AACAyK;AACA;;AACA;AACqB,mBARrB;AASA;;;AACA;;AACAzK;AAAA;AACA;AACA;AACA;AACA0K;AACAD;AACAA;AACqB,mBAPrB;AAQA;AAnEA;;AACA;AAAA;AAmEA;AACA;;AACA;AACA;AACA;AACAzK;AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAqB;AACA;;AACA;AACa,eAVb;AAWA,aAdA,MAeA;AACAkD;AAAA;AACA;AACA;AACA;AACA,gCAA0C;AAAA,oBAA3B/B,YAA2B,UAA3BA,YAA2B;AAAA,oBAA3BC,WAA2B,UAA3BA,WAA2B;AAC1CzC;;AACA;AACAA;AACA;AACa,eATb;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmK;AACA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AAAA;AAAA,qBAHA;AAIA;;AACA;AACA,iBAXA,CAYA;AACAQ,yEAA+DjI,IAA/D,iBAAyEiI,aAAzE;AACA;AACA;AACS;AArBT;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;;AACA;;AACA;AACArJ;AACA,aAFA,MAGA;AACAoB,mBACAkI,KADA,CACA,YADA,EACkC;AADlC,eAEAC,MAFA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA,eANA,EAOAhG,OAPA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAvD;AACA,iBAFA,MAGA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,mBAJA;AAKA;AACa,eAxBb;AAyBA;;AACA;AACAtB;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AAAA;;AACA;AACA;;AACAA,gDACA8K,IADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,aALA,EAMAjG,OANA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAVA;;AAWA7E;;AACA;AACA;;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AAAA;;AACA;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACAA;;AACA+K;AACA;;AACA;AACA;AACA;AACS,aAhBT;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;;AACA;AACA;AACA;AAAyF/K;AAAzF,iBAAgG,0DAAhG;;AACA;AACAgL;AACA;;AACA,mGACA,+DACAC,+BACA,uEAFA,IAGuB,oDAAYD,eAAZ,CAHvB,IAIAE,6FALA,GAKA;AACAC;AACAC;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;;AACA;AAA8EpL;AAA9E,eAAqF,0DAArF;AACA;;AACA;;AACA;AACAmL,kCADA,CAEA;;AACAnL;AACAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACAA,+BACA6K,MADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,eALA,EAMAhG,OANA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAVA;AAWA;;AACA;AACA7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACAA,+BACA6K,MADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,eALA,EAMAhG,OANA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAVA;AAWA;;AACA;AACAzC;AACA;;AACA;;AACA;AACAiJ;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAJA,IAIA;AACAtC;;AACA;AACA/I;AAA8CN,oCAA9C;AAA8CC;AAA9C;;AACA;AACA4F;;AACA,qDAAyDzD,qDAAzD,EAAkE;AAClE9B;AACA;AACA;AACA;AACA,eAfA,MAgBA;AACA;AACAuF;AACA;;AACAuD;;AACA;AACA;AAAoC9I,+BAApC,CAAoCyF,UAApC,CAAoC,IAApC;AACA;AACA;AACA;;AACA;AACAzF;AAAA;AAA2D;AAAMA,4BAAN;AAAMD,8BAAN;AAAML;AAAN,eAA3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AACA;;AACA,8BAA4B8B,aAA5B,EAA2CA,GAA3C,EAA2C;AAC3C8J;AACA;;AACAA;AACA,aAXA,CAYA;AACAX,qEAA2DjI,IAA3D,iBAAqEiI,aAArE;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;;AACA,6BACA,+DADA,IAEAvG,uBAFA,EAEA;AACAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACApE;AACAA,0BADA;AAEAD,uCAFA;AAGAD,gCAHA;AAIAJ;AAJA;AAMA;;;;;AAGA;AACA;AACA;AACA;;AACA;AACA;AACA;;;UACA6L;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;AACAC;AACA;;AACA;AACA;AACA;AACAxL;AACAJ,mDAA8CI,SAA9C;AACA;;AACAyL,iDACAD;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,iBAJA,GADA,GAMAA,yFANA;AAOA;AACA;;AACApJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACAsJ;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,gCAAsC;AAAA,oBAA3BlJ,YAA2B,UAA3BA,YAA2B;AAAA,oBAA3BC,WAA2B,UAA3BA,WAA2B;AACtCkJ;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,iBAJA;;AAKA;AACAA;AACA;;AACA;AACAN;AACA;AACS,eAhBT;AAAA,aAJA;AAqBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,uBAAmBvJ,+DAAkB6J;AAAA;AACrC;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA,iCAA+B7J,gEAAmBsC,OAAnB,CAA/B;;AACA;AACA,iCAA+BtC,+DAAkBpC,KAAlB,EAAkB0E,OAAlB,CAA/B;;AACA;AACA,iCAA+BtC,iEAAoBpC,KAApB,EAAoB0E,OAApB,CAA/B;;AACA;AACA,iCAA+BtC,iEAAoBpC,KAApB,EAAoB0E,OAApB,CAA/B;;AACA;AACA,iCAA+BtC,2DAAcpC,KAAd,EAAc0E,OAAd,CAA/B;;AACA;AACA,iCAA+BtC,2DAAcpC,KAAd,EAAc0E,OAAd,CAA/B;AAZA;AAca;AApBb;AAAA,iBAJqC,CAAlB,EAwBNA,OAxBM,CAAnB;AAyBS;AAjCT;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;AACAwH;AACA;;AACA;AACAA;;AACA;AACAA;AACA;AACA;;AACA;AACA,kBAAoBzB,UAApB,GAAiC0B,SAAjC,CAAoB1B,UAApB;AAAA,kBAAiChL,OAAjC,GAAwD,gDAAM0M,SAAN,EAAM,cAAN,CAAxD;AACAD;AACAtL,mCADA;AAEAwL,sCAFA;AAGA3M;AAHA;AAKA;;AACA;AACAyM;AACAtL,mCADA;AAEAwL;AAFA;AAIA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,mBAJA;AAKA;;AACA,oBAAgB,oDAAYC,MAAZ,CAAhB,EAA4B;AAC5B,qCAAmC;AAAG;AACtC;AACA;AACA;AACA;AAAA;AAAA,mBAJmC,CAAnC;AAKA;;AACA;AACS;AAtBT;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA/L;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,6CAAiD;AAAA,gBAAfM,IAAe,UAAfA,IAAe;AAAA,gBAAfnB,OAAe,UAAfA,OAAe;;AACjD;AACA4M,2DAAuCzL,IAAvC,EAAuCnB,wBAAvC;AACA;AACA;;;AACA;AACA6M;;AACA;AACAnK;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,yDACAkK,sBADA,GAEA,gBAAoCE,SAFpC;AAGA;;AACA;;AACA;AACA;AAAA,6BAAoD,gDAAMC,EAAN,EAAM,aAAN,CAApD;AACAC,wDAAwDA,sBAAxD,sBAAsF7L,IAAtF,EAAsFyE,IAAtF;AACA;;AACAiH;AAAA;AACA;AACA;AACA;AACA;AAAA,wBAAyDI,SAAzD;AAAA,wBAAyDC,iBAAzD;AAAA,wBAAyDC,cAA8C,gDAAMJ,EAAN,EAAM,uCAAN,CAAvG;;AACAC;AACqB,mBANrB;AAOA;AACa,eAvBb;AAwBA;;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;;AACA;AACA;AACA;;;UACAI;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACAnK;AACA,aAFA,MAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA;AACA;AACA;AAAqC0D;AAArC;AACA;;AACA;AACA;;AACA;;AACA;AACA;AACA;AACAlG,mDAA4C+H,cAA5C;AACAvD;AACA,eALA,MAMA;AACA;AACAA,8BAA8BtC,qDAA9B,CAAuC,EAAvC,EAA0C0K,cAA1C;AACA,eAHA,MAIA;AACApI,8BAA8BtC,uDAA9B,CAAyCpC,KAAzC,EAAyC8M,cAAzC;AACA;AACA;;AACA1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AAAA;;AACA;AACA;;AACA;AACAnJ;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA;;AAKA;AACA,kBAAoBoC,CAApB,GAAqC/B,KAArC,CAAoB+D,WAApB;AACA/D;;AACA,iDAA+C8B,uDAA/C,EAA0D;AAC1D;AACAC;AAAgCsC,oCAAhC;AAAgCI;AAAhC;AACA0G;AACA;;AACA;AACApJ;AAA+BsC,oCAA/B;AAA+BI;AAA/B;AACA0G;AACA;AACA;;AACA;AACApJ;AAAA;AACA;AACA;AACA;AACA;AACA,0BAA8BD,+DAAkB,6CAAlB,CAA9B;;AACA;AACiB,iBAPjB;AAQAC;AAAA;AACA;AACA;AACA;AACA;AACA,0BAA8BD,oEAAuB,kDAAvB,CAA9B;;AACA,oCAAsC,2CAAE,IAAF,CAAtC;AACiB,iBAPjB;AAQAqJ;AACA;;AACA;AACAE,wCADA,CAEA;;AACA;;AACA;;AACA,gCAAgC7J,4BAAhC,EAA8DA,GAA9D,EAA8D;AAC9D;AACA6J;AACA7G;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;;AACA;AACAzC,2BACA8I,MADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,eALA,EAMAhG,OANA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAVA;AAWA,aAZA,MAaA;AACA2G;AACA;;AACA;AACAxL,+BACA6K,MADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,eALA,EAMAhG,OANA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA,eAVA;AAWA;;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;;AACA;AACA;AACA;;;UACA4H;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA7M;AACA;;AACA;AAAA;AAAgGI,iCAAhG,EAAgGA,aAAhG;;AACA;AACA;AACA;AACA;AACS,aAbT;AAcA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;AACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA6B;AAAqDc;AAAA;AACrD;AACA;AACA;AAAA;AAAA,mBAHA;AAGAR;AAHA;AAIAN;AAAoDc;AAAA;AACpD;AACA;AACA;AAAA;AAAA,mBAHA;AAGAR;AAHA;AAIA;AACa,eAfb;AAgBA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AAAA;AAAoCnC,wBAApC;;AACA;AACA;AACA;;AACA6B;AAA+Cc;AAAA;AAC/C;AACA;AACA;AAAA;AAAA,eAHA;AAGAR;AAHA;AAIAN;AAAkDc;AAAA;AAClD;AACA;AACA;AAAA;AAAA,eAHA;AAGAR;AAHA;AAIAN;AACAc;AAAA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKAR;AALA;AAOAP;AACA4G,8CAAqC,WAArC,GAAiDxI,KAAjD,EAAiDA,cAAjD,CADA;AAEA0M,uBAFA;AAGAC,8BAHA;AAIAb;AAA0Bc;AAA1B,eAJA;AAKAC,gEAA4D;AAC5DrN,yBAD4D;AAE5DsN,+BAF4D;AAG5DC,4BAH4D;AAI5DpN;AAJ4D;AAL5D;;AAYA;AACAK;AACA;;AACA;AACAJ;AACA;;AACA,qDACAI,kBACAA,iEAFA,GAEA;AACA;AACAJ;AACA;;AACAI;AACA;;AACA;AACAA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,+DACA,gCADA,IAEAgN,iCAFA,KAGA,2DAHA;;AAIA;AACA;AACA;;AACA;AACAxI;AACA;;AACAyI;AACA;;AACA;AACA1H;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACAvF;AACA;;AACA;AAA0D+C,4BAA1D;AAA0DC;AAA1D,eAA2FhD,gDAA3F;AACAA,0DACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA,CADA,sBAMAkN;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA,CANA,sBAWAlN,cAXA,sBAYA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA,CAZA,sBAiBAkN;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA,aAJA,CAjBA,GAsBArC,MAtBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,aA5BA;AA6BA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AAAA;AAAuDpH,iCAAvD,GAAuD,EAAvD;AACA;AACA0J;AAAA;AACA;AACA;AACA;AAAA;AAAA,eAJA;AAKAC;AAAA;AACA;AACA;AACA;AAAA;AAAA,eARA;AASAC;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAZA;AAcA;;;;;AAGA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACAC,kBACA;AAAchN,gCAAd;AAAcqH;AAAd,WADA,EAEA;AAAcrH,mCAAd;AAAcqH;AAAd,WAFA,CADA;AAKA4F,uBACA;AAAcjN,wBAAd;AAAckN;AAAd,WADA,EAEA;AAAclN,oCAAd;AAAckN;AAAd,WAFA,EAGA;AAAclN,8BAAd;AAAckN;AAAd,WAHA,EAIA;AAAclN,oCAAd;AAAckN;AAAd,WAJA;AALA;AAYA;;UACAC;AACA;AACA;AACA;AACA;AACA;AAAA;;AAAA;;AAC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","names":["FormlySelectOptionsPipe","rxjs__WEBPACK_IMPORTED_MODULE_0__","options","pipe","to","gOptions","groups","label","group","value","disabled","console","item","property","type","field","Array","f","subscribe","rxjs__WEBPACK_IMPORTED_MODULE_4__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","name","pure","args","FormlySelectModule","declarations","exports","_angular_core__WEBPACK_IMPORTED_MODULE_0__","field_r2","f_r1","form","callback","prototype","constructor","path","key","root","paths","assignModelValue","i","model","getKeyPath","dest","reverseDeepMerge","Object","_angular_forms__WEBPACK_IMPORTED_MODULE_2__","c","newVal","enumerable","writable","configurable","defineHiddenProp","o","fns","setFn","currentValue","firstChange","prop","get","set","previousValue","FormlyConfig","preWrapper","postWrapper","checkExpressionOn","lazyRender","showError","config","_resolver","_injector","resolveComponentFactory","create","componentRef","token","factory","providedIn","FormlyFormBuilder","fieldGroup","formControl","disableTreeValidityCall","rxjs__WEBPACK_IMPORTED_MODULE_3__","changeDetectorRef","_checkField","control","emitEvent","updateControl","wrapProperty","parent","onlySelf","emit","_forEachChild","keys","forEach","updateValueAndValidity","opts","action","FormlyForm","immutable","parentFormGroup","node","hasContent","clearControl","assignFieldValue","_initialModel","_buildForm","_markForCheck","clone","_trackModelChanges","fields","updateOn","debounce","valueChanges","observers","selectors","viewQuery","_c0","_t","ctx","inputs","outputs","modelChange","features","ngContentSelectors","decls","vars","consts","template","FormlyForm_formly_field_0_Template","directives","_angular_common__WEBPACK_IMPORTED_MODULE_8__","FormlyField","encapsulation","decorators","content","selector","providers","hideDeprecation","wrappers","component","r","_c2","FormlyField_ng_template_0_Template","containerRef","read","FormlyAttributes","listeners","events","some","nativeElement","Promise","hostBindings","id","host","FieldType","Field","FieldArrayType","defaultValue","registerControl","unregisterControl","markAsDirty","_buildField","FORMLY_CONFIG","FieldWrapper","t","_c3","fieldComponent","FormlyGroup","hostVars","FormlyGroup_formly_field_0_Template","FormlyValidationMessage","v","EXPR_VALIDATORS","message","pipes","changeDetection","FormlyTemplateType","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_13__","Function","expression","FieldExpressionExtension","checkLocked","undefined","rxjs__WEBPACK_IMPORTED_MODULE_14__","expressionProperty","subscription","onDestroy","error","split","filter","sort","fieldChanged","expressionValue","isFunction","JSON","markForCheck","expressionProperties","updateValidity","target","FieldValidationExtension","validators","validatorName","FORMLY_VALIDATORS","VALIDATORS","validatorOption","validator","validation","errors","ctrl","errorPath","_a","childCtrl","_b","toDelete","childErrors","FieldFormExtension","controlOptions","CoreExtension","hooks","modelOptions","messages","templateOptions","placeholder","focus","isUndefined","setDefaultValue","fieldTemplateManipulators","prePopulate","onPopulate","postPopulate","types","extensions","extension","FormlyModule","configs","ngModule","provide","multi","useFactory","deps","useValue","imports","entryComponents","ctx_r0","ctx_r2","option_r2","ctx_r1","option_r3","FormlyFieldSelect_ng_container_0_ion_select_option_2_Template","selectOptions_r1","ctx_r3","FormlyFieldInput","_ngx_formly_core__WEBPACK_IMPORTED_MODULE_1__","FormlyFieldInput_ion_input_0_Template","FormlyFieldInput_ng_template_1_Template","_r1","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_ionic_angular__WEBPACK_IMPORTED_MODULE_3__","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","IonFormlyAttributes","styles","FormlyFieldCheckbox","FormlyFieldDatetime","FormlyFieldRadio","FormlyFieldRadio_ion_item_4_Template","FormlyFieldRadio_ion_item_7_Template","_ngx_formly_core_select__WEBPACK_IMPORTED_MODULE_5__","FormlyFieldToggle","FormlyFieldSelect","compareWith","o1","o2","FormlyFieldSelect_ng_container_0_Template","FormlyFieldRange","FormlyFieldTextArea","FormlyWrapperFormField","FormlyWrapperFormField_span_3_Template","FormlyWrapperFormField_ng_template_4_Template","FormlyWrapperFormField_ion_item_6_Template","setTimeout","element","FormlyIonicModule","IONIC_FORMLY_CONFIG","routes","_test_page__WEBPACK_IMPORTED_MODULE_0__","TestPageRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_3__","TestPageModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_5__","_ionic_angular__WEBPACK_IMPORTED_MODULE_6__","_test_routing_module__WEBPACK_IMPORTED_MODULE_0__","_ngx_formly_core__WEBPACK_IMPORTED_MODULE_7__","_ngx_formly_ionic__WEBPACK_IMPORTED_MODULE_8__","_ng_dynamic_forms_ui_material__WEBPACK_IMPORTED_MODULE_9__","_ng_dynamic_forms_ui_ionic__WEBPACK_IMPORTED_MODULE_10__","_test_page__WEBPACK_IMPORTED_MODULE_1__","TestPage","auth","database","executeSql","then","parseInt","stringify","res","rows","length","push","showToast","e","_api_service__WEBPACK_IMPORTED_MODULE_2__","extendStatics","__proto__","d","__assign","s","decorator","resolve","step","reject","result","sent","trys","ops","y","g","next","_","done","op","ar","j","verb","q","settle","resume","cooked","privateMap","__webpack_exports__"],"sources":["webpack:///node_modules/@ngx-formly/core/__ivy_ngcc__/fesm2015/ngx-formly-core-select.js","webpack:///node_modules/@ngx-formly/core/__ivy_ngcc__/fesm2015/ngx-formly-core.js","webpack:///node_modules/@ngx-formly/ionic/__ivy_ngcc__/fesm2015/ngx-formly-ionic.js","webpack:///src/app/test/test-routing.module.ts","webpack:///src/app/test/test.module.ts","webpack:///src/app/test/test.page.ts","webpack:///tslib?112c","webpack:///src/app/test/test.page.html"],"sourcesContent":["import { Pipe, NgModule } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass FormlySelectOptionsPipe {\n    /**\n     * @param {?} options\n     * @param {?=} field\n     * @return {?}\n     */\n    transform(options, field) {\n        if (!(options instanceof Observable)) {\n            options = this.observableOf(options, field);\n        }\n        else {\n            this.dispose();\n        }\n        return ((/** @type {?} */ (options))).pipe(map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this.toOptions(value, field || {}))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.dispose();\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @param {?} field\n     * @return {?}\n     */\n    toOptions(options, field) {\n        /** @type {?} */\n        const gOptions = [];\n        /** @type {?} */\n        const groups = {};\n        /** @type {?} */\n        const to = field.templateOptions || {};\n        to._flatOptions = true;\n        options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            if (!this.getGroupProp(option, to)) {\n                gOptions.push(this.toOption(option, to));\n            }\n            else {\n                to._flatOptions = false;\n                if (!groups[this.getGroupProp(option, to)]) {\n                    groups[this.getGroupProp(option, to)] = [];\n                    gOptions.push({\n                        label: this.getGroupProp(option, to),\n                        group: groups[this.getGroupProp(option, to)],\n                    });\n                }\n                groups[this.getGroupProp(option, to)].push(this.toOption(option, to));\n            }\n        }));\n        return gOptions;\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    toOption(item, to) {\n        return {\n            label: this.getLabelProp(item, to),\n            value: this.getValueProp(item, to),\n            disabled: this.getDisabledProp(item, to) || false,\n        };\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getLabelProp(item, to) {\n        if (typeof to.labelProp === 'function') {\n            return to.labelProp(item);\n        }\n        if (this.shouldUseLegacyOption(item, to)) {\n            console.warn(`NgxFormly: legacy select option '{key, value}' is deprecated since v5.5, use '{value, label}' instead.`);\n            return item.value;\n        }\n        return item[to.labelProp || 'label'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getValueProp(item, to) {\n        if (typeof to.valueProp === 'function') {\n            return to.valueProp(item);\n        }\n        if (this.shouldUseLegacyOption(item, to)) {\n            return item.key;\n        }\n        return item[to.valueProp || 'value'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getDisabledProp(item, to) {\n        if (typeof to.disabledProp === 'function') {\n            return to.disabledProp(item);\n        }\n        return item[to.disabledProp || 'disabled'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getGroupProp(item, to) {\n        if (typeof to.groupProp === 'function') {\n            return to.groupProp(item);\n        }\n        return item[to.groupProp || 'group'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    shouldUseLegacyOption(item, to) {\n        return !to.valueProp\n            && !to.labelProp\n            && item != null\n            && typeof item === 'object'\n            && 'key' in item\n            && 'value' in item;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    dispose() {\n        if (this._options) {\n            this._options.complete();\n            this._options = null;\n        }\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n            this._subscription = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @param {?=} f\n     * @return {?}\n     */\n    observableOf(options, f) {\n        this.dispose();\n        if (f && f.options && f.options.fieldChanges) {\n            this._subscription = f.options.fieldChanges.pipe(filter((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ property, type, field }) => {\n                return type === 'expressionChanges'\n                    && property.indexOf('templateOptions.options') === 0\n                    && field === f\n                    && Array.isArray(field.templateOptions.options)\n                    && !!this._options;\n            })), tap((/**\n             * @return {?}\n             */\n            () => this._options.next((/** @type {?} */ (f.templateOptions.options)))))).subscribe();\n        }\n        this._options = new BehaviorSubject(options);\n        return this._options.asObservable();\n    }\n}\nFormlySelectOptionsPipe.ɵfac = function FormlySelectOptionsPipe_Factory(t) { return new (t || FormlySelectOptionsPipe)(); };\nFormlySelectOptionsPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"formlySelectOptions\", type: FormlySelectOptionsPipe, pure: true });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlySelectOptionsPipe, [{\n        type: Pipe,\n        args: [{ name: 'formlySelectOptions' }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlySelectModule {\n}\nFormlySelectModule.ɵfac = function FormlySelectModule_Factory(t) { return new (t || FormlySelectModule)(); };\nFormlySelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FormlySelectModule });\nFormlySelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlySelectModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlySelectOptionsPipe],\n                exports: [FormlySelectOptionsPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlySelectModule, { declarations: [FormlySelectOptionsPipe], exports: [FormlySelectOptionsPipe] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlySelectModule, FormlySelectOptionsPipe };\n\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplateRef, Injectable, InjectionToken, NgModule, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional, Component, Input, ChangeDetectionStrategy, EventEmitter, Output, Attribute, ViewChild, ElementRef, NgZone, Directive, Renderer2, ViewContainerRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { __rest } from 'tslib';\nimport { debounceTime, switchMap, distinctUntilChanged, take, startWith, filter, map } from 'rxjs/operators';\nimport { AbstractControl, FormArray, FormGroup, FormControl, FormGroupDirective, Validators } from '@angular/forms';\nimport { isObservable, Subject, of, merge, Observable } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} form\n * @param {?} callback\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/platform-browser';\n\nconst _c0 = [\"content\"];\nfunction FormlyForm_formly_field_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"formly-field\", 2);\n} if (rf & 2) {\n    const field_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"form\", field_r2.form)(\"options\", field_r2.options)(\"model\", field_r2.model)(\"field\", field_r2);\n} }\nconst _c1 = [\"*\"];\nconst _c2 = [\"container\"];\nfunction FormlyField_ng_template_0_Template(rf, ctx) { }\nconst _c3 = [\"fieldComponent\"];\nfunction FormlyGroup_formly_field_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"formly-field\", 1);\n} if (rf & 2) {\n    const f_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"field\", f_r1);\n} }\nfunction disableTreeValidityCall(form, callback) {\n    /** @type {?} */\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = (/**\n     * @return {?}\n     */\n    () => { });\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\n/**\n * @param {?} formId\n * @param {?} field\n * @param {?} index\n * @return {?}\n */\nfunction getFieldId(formId, field, index) {\n    if (field.id)\n        return field.id;\n    /** @type {?} */\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (isFunction(type)) {\n        type = ((/** @type {?} */ (type))).prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction getKeyPath(field) {\n    if (!field.key) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (!field._keyPath || field._keyPath.key !== field.key) {\n        /** @type {?} */\n        let path = [];\n        if (typeof field.key === 'string') {\n            /** @type {?} */\n            const key = field.key.indexOf('[') === -1\n                ? field.key\n                : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        field._keyPath = { key: field.key, path };\n    }\n    return field._keyPath.path.slice(0);\n}\n/** @type {?} */\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n/**\n * @param {?} field\n * @param {?} value\n * @return {?}\n */\nfunction assignFieldValue(field, value) {\n    /** @type {?} */\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    /** @type {?} */\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        /** @type {?} */\n        const k = paths.pop();\n        /** @type {?} */\n        const m = paths.reduce((/**\n         * @param {?} model\n         * @param {?} path\n         * @return {?}\n         */\n        (model, path) => model[path] || {}), root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\n/**\n * @param {?} model\n * @param {?} paths\n * @param {?} value\n * @return {?}\n */\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < (paths.length - 1); i++) {\n        /** @type {?} */\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction getFieldValue(field) {\n    /** @type {?} */\n    let model = field.parent.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\n/**\n * @param {?} dest\n * @param {...?} args\n * @return {?}\n */\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((/**\n     * @param {?} src\n     * @return {?}\n     */\n    src => {\n        for (let srcArg in src) {\n            if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    }));\n    return dest;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNullOrUndefined(value) {\n    return value === undefined || value === null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isUndefined(value) {\n    return value === undefined;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isBlankString(value) {\n    return value === '';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value) {\n    return typeof (value) === 'function';\n}\n/**\n * @param {?} obj1\n * @param {?} obj2\n * @return {?}\n */\nfunction objAndSameType(obj1, obj2) {\n    return isObject(obj1) && isObject(obj2)\n        && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n        && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n/**\n * @param {?} x\n * @return {?}\n */\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction clone(value) {\n    if (!isObject(value)\n        || isObservable(value)\n        || (value instanceof TemplateRef)\n        || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n        || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => clone(v)));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    /** @type {?} */\n    const proto = Object.getPrototypeOf(value);\n    /** @type {?} */\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((/**\n     * @param {?} newVal\n     * @param {?} prop\n     * @return {?}\n     */\n    (newVal, prop) => {\n        /** @type {?} */\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }), c);\n}\n/**\n * @param {?} field\n * @param {?} prop\n * @param {?} defaultValue\n * @return {?}\n */\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\n/**\n * @template T\n * @param {?} o\n * @param {?} prop\n * @param {?} setFn\n * @return {?}\n */\nfunction wrapProperty(o, prop, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    if (!o._observers[prop]) {\n        o._observers[prop] = [];\n    }\n    /** @type {?} */\n    let fns = o._observers[prop];\n    if (fns.indexOf(setFn) === -1) {\n        fns.push(setFn);\n        setFn({ currentValue: o[prop], firstChange: true });\n        if (fns.length === 1) {\n            defineHiddenProp(o, `___$${prop}`, o[prop]);\n            Object.defineProperty(o, prop, {\n                configurable: true,\n                get: (/**\n                 * @return {?}\n                 */\n                () => o[`___$${prop}`]),\n                set: (/**\n                 * @param {?} currentValue\n                 * @return {?}\n                 */\n                currentValue => {\n                    if (currentValue !== o[`___$${prop}`]) {\n                        /** @type {?} */\n                        const previousValue = o[`___$${prop}`];\n                        o[`___$${prop}`] = currentValue;\n                        fns.forEach((/**\n                         * @param {?} changeFn\n                         * @return {?}\n                         */\n                        changeFn => changeFn({ previousValue, currentValue, firstChange: false })));\n                    }\n                }),\n            });\n        }\n    }\n    return (/**\n     * @return {?}\n     */\n    () => fns.splice(fns.indexOf(setFn), 1));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.templateManipulators = {\n            preWrapper: [],\n            postWrapper: [],\n        };\n        this.extras = {\n            checkExpressionOn: 'changeDetectionCheck',\n            lazyRender: false,\n            showError: (/**\n             * @param {?} field\n             * @return {?}\n             */\n            function (field) {\n                return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || !!(field.field.validation && field.field.validation.show));\n            }),\n        };\n        this.extensions = {};\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((/**\n             * @param {?} type\n             * @return {?}\n             */\n            type => this.setType(type)));\n        }\n        if (config.validators) {\n            config.validators.forEach((/**\n             * @param {?} validator\n             * @return {?}\n             */\n            validator => this.setValidator(validator)));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((/**\n             * @param {?} wrapper\n             * @return {?}\n             */\n            wrapper => this.setWrapper(wrapper)));\n        }\n        if (config.manipulators) {\n            console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n            config.manipulators.forEach((/**\n             * @param {?} manipulator\n             * @return {?}\n             */\n            manipulator => this.setManipulator(manipulator)));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((/**\n             * @param {?} validation\n             * @return {?}\n             */\n            validation => this.addValidatorMessage(validation.name, validation.message)));\n        }\n        if (config.extensions) {\n            config.extensions.forEach((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => this.extensions[c.name] = c.extension));\n        }\n        if (config.extras) {\n            this.extras = Object.assign({}, this.extras, config.extras);\n        }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            (option) => this.setType(option)));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = (/** @type {?} */ ({ name: options.name }));\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            }));\n        }\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getType(name) {\n        if (!this.types[name]) {\n            throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /**\n     * @param {?=} field\n     * @return {?}\n     */\n    getMergedField(field = {}) {\n        /** @type {?} */\n        const type = this.getType(field.type);\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        /** @type {?} */\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field && field.optionsTypes) {\n            field.optionsTypes.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                /** @type {?} */\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            }));\n        }\n        /** @type {?} */\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} field\n     * @return {?}\n     */\n    resolveFieldTypeRef(field = {}) {\n        if (!field.type) {\n            return null;\n        }\n        /** @type {?} */\n        const type = this.getType(field.type);\n        if (!type.component || type['_componentRef']) {\n            return type['_componentRef'];\n        }\n        const { _resolver, _injector } = field.parent.options;\n        /** @type {?} */\n        const componentRef = _resolver\n            .resolveComponentFactory(type.component)\n            .create(_injector);\n        defineHiddenProp(type, '_componentRef', componentRef);\n        componentRef.destroy();\n        return type['_componentRef'];\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((/**\n             * @param {?} type\n             * @return {?}\n             */\n            (type) => {\n                this.setTypeWrapper(type, options.name);\n            }));\n        }\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getWrapper(name) {\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /**\n     * @param {?} type\n     * @param {?} name\n     * @return {?}\n     */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = (/** @type {?} */ ({}));\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    /**\n     * @param {?} name\n     * @param {?} message\n     * @return {?}\n     */\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    /**\n     * @param {?} manipulator\n     * @return {?}\n     */\n    setManipulator(manipulator) {\n        new manipulator.class()[manipulator.method](this);\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        /** @type {?} */\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = function FormlyConfig_Factory(t) { return new (t || FormlyConfig)(); };\nFormlyConfig.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FormlyConfig, factory: FormlyConfig.ɵfac, providedIn: 'root' });\n/** @nocollapse */ FormlyConfig.ngInjectableDef = defineInjectable({ factory: function FormlyConfig_Factory() { return new FormlyConfig(); }, token: FormlyConfig, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyConfig, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFormBuilder {\n    /**\n     * @param {?} formlyConfig\n     * @param {?} componentFactoryResolver\n     * @param {?} injector\n     */\n    constructor(formlyConfig, componentFactoryResolver, injector) {\n        this.formlyConfig = formlyConfig;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * @param {?} formControl\n     * @param {?=} fieldGroup\n     * @param {?=} model\n     * @param {?=} options\n     * @return {?}\n     */\n    buildForm(formControl, fieldGroup = [], model, options) {\n        if (!this.formlyConfig.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        /** @type {?} */\n        const field = { fieldGroup, model, formControl, options: this._setOptions(options) };\n        disableTreeValidityCall(formControl, (/**\n         * @return {?}\n         */\n        () => {\n            this._buildForm(field);\n            field.options._checkField(field, true);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    _buildForm(field) {\n        this.getExtensions().forEach((/**\n         * @param {?} extension\n         * @return {?}\n         */\n        extension => extension.prePopulate && extension.prePopulate(field)));\n        this.getExtensions().forEach((/**\n         * @param {?} extension\n         * @return {?}\n         */\n        extension => extension.onPopulate && extension.onPopulate(field)));\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            (f) => this._buildForm(f)));\n        }\n        this.getExtensions().forEach((/**\n         * @param {?} extension\n         * @return {?}\n         */\n        extension => extension.postPopulate && extension.postPopulate(field)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getExtensions() {\n        return Object.keys(this.formlyConfig.extensions).map((/**\n         * @param {?} name\n         * @return {?}\n         */\n        name => this.formlyConfig.extensions[name]));\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _setOptions(options) {\n        options = options || {};\n        options.formState = options.formState || {};\n        if (!options.showError) {\n            options.showError = this.formlyConfig.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._resolver) {\n            defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        if (!options._markForCheck) {\n            options._markForCheck = (/**\n             * @param {?} field\n             * @return {?}\n             */\n            (field) => {\n                if (field._componentRefs) {\n                    field._componentRefs.forEach((/**\n                     * @param {?} ref\n                     * @return {?}\n                     */\n                    ref => {\n                        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n                        /** @type {?} */\n                        const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n                        changeDetectorRef.markForCheck();\n                    }));\n                }\n                if (field.fieldGroup) {\n                    field.fieldGroup.forEach((/**\n                     * @param {?} f\n                     * @return {?}\n                     */\n                    f => options._markForCheck(f)));\n                }\n            });\n        }\n        if (!options._buildField) {\n            options._buildField = (/**\n             * @param {?} field\n             * @return {?}\n             */\n            (field) => {\n                this._setOptions(field.options);\n                this._buildForm(field);\n                ((/** @type {?} */ (field.options)))._checkField(field, true);\n                return field;\n            });\n        }\n        return options;\n    }\n}\nFormlyFormBuilder.ɵfac = function FormlyFormBuilder_Factory(t) { return new (t || FormlyFormBuilder)(ɵngcc0.ɵɵinject(FormlyConfig), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nFormlyFormBuilder.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FormlyFormBuilder, factory: FormlyFormBuilder.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFormlyFormBuilder.ctorParameters = () => [\n    { type: FormlyConfig },\n    { type: ComponentFactoryResolver },\n    { type: Injector }\n];\n/** @nocollapse */ FormlyFormBuilder.ngInjectableDef = defineInjectable({ factory: function FormlyFormBuilder_Factory() { return new FormlyFormBuilder(inject(FormlyConfig), inject(ComponentFactoryResolver), inject(INJECTOR)); }, token: FormlyFormBuilder, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFormBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: FormlyConfig }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} field\n * @param {?=} emitEvent\n * @return {?}\n */\nfunction unregisterControl(field, emitEvent = false) {\n    /** @type {?} */\n    const control = field.formControl;\n    /** @type {?} */\n    const fieldIndex = control['_fields'] ? control['_fields'].indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control['_fields'].splice(fieldIndex, 1);\n    }\n    /** @type {?} */\n    const form = (/** @type {?} */ (control.parent));\n    if (!form) {\n        return;\n    }\n    /** @type {?} */\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        /** @type {?} */\n        const key = form.controls.findIndex((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => c === control));\n        if (key !== -1) {\n            updateControl(form, opts, (/**\n             * @return {?}\n             */\n            () => form.removeAt(key)));\n        }\n    }\n    else if (form instanceof FormGroup) {\n        /** @type {?} */\n        const paths = getKeyPath(field);\n        /** @type {?} */\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            updateControl(form, opts, (/**\n             * @return {?}\n             */\n            () => form.removeControl(key)));\n        }\n    }\n    control.setParent(null);\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field['shareFormControl'] === false) {\n        return null;\n    }\n    /** @type {?} */\n    const form = (/** @type {?} */ (field.parent.formControl));\n    return form ? form.get(getKeyPath(field)) : null;\n}\n/**\n * @param {?} field\n * @param {?=} control\n * @param {?=} emitEvent\n * @return {?}\n */\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control['_fields']) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control['_fields'].indexOf(field) === -1) {\n        control['_fields'].push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.templateOptions.disabled = !!field.templateOptions.disabled;\n        wrapProperty(field.templateOptions, 'disabled', (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        }));\n        if (control.registerOnDisabledChange) {\n            control.registerOnDisabledChange((/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => {\n                field.templateOptions['___$disabled'] = value;\n                // TODO remove in V6\n                field.options && field.options._markForCheck(field);\n            }));\n        }\n    }\n    /** @type {?} */\n    let parent = (/** @type {?} */ (field.parent.formControl));\n    if (!parent || !field.key) {\n        return;\n    }\n    /** @type {?} */\n    const paths = getKeyPath(field);\n    /** @type {?} */\n    const value = getFieldValue(field);\n    if (!(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n        && control.value !== value\n        && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < (paths.length - 1); i++) {\n        /** @type {?} */\n        const path = paths[i];\n        if (!parent.get([path])) {\n            updateControl(parent, { emitEvent }, (/**\n             * @return {?}\n             */\n            () => parent.setControl(path, new FormGroup({}))));\n        }\n        parent = (/** @type {?} */ (parent.get([path])));\n    }\n    /** @type {?} */\n    const key = paths[paths.length - 1];\n    if (!field._hide && parent.get([key]) !== control) {\n        updateControl(parent, { emitEvent }, (/**\n         * @return {?}\n         */\n        () => parent.setControl(key, control)));\n    }\n}\n/**\n * @param {?} c\n * @param {?=} onlySelf\n * @return {?}\n */\nfunction updateValidity(c, onlySelf = false) {\n    /** @type {?} */\n    const status = c.status;\n    /** @type {?} */\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        ((/** @type {?} */ (c.statusChanges))).emit(c.status);\n    }\n    if (value !== c.value) {\n        ((/** @type {?} */ (c.valueChanges))).emit(c.value);\n    }\n}\n/**\n * @param {?} form\n * @param {?} opts\n * @param {?} action\n * @return {?}\n */\nfunction updateControl(form, opts, action) {\n    /**\n     *  workaround for https://github.com/angular/angular/issues/27679\n     */\n    if (form instanceof FormGroup && !form['__patchForEachChild']) {\n        defineHiddenProp(form, '__patchForEachChild', true);\n        ((/** @type {?} */ (form)))._forEachChild = (/**\n         * @param {?} cb\n         * @return {?}\n         */\n        (cb) => {\n            Object\n                .keys(form.controls)\n                .forEach((/**\n             * @param {?} k\n             * @return {?}\n             */\n            k => form.controls[k] && cb(form.controls[k], k)));\n        });\n    }\n    /**\n     * workaround for https://github.com/angular/angular/issues/20439\n     * @type {?}\n     */\n    const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n    if (opts.emitEvent === false) {\n        form.updateValueAndValidity = (/**\n         * @param {?} opts\n         * @return {?}\n         */\n        (opts) => {\n            updateValueAndValidity(Object.assign({}, (opts || {}), { emitEvent: false }));\n        });\n    }\n    action();\n    if (opts.emitEvent === false) {\n        form.updateValueAndValidity = updateValueAndValidity;\n    }\n}\n/**\n * @param {?} form\n * @return {?}\n */\nfunction clearControl(form) {\n    form['_fields'] && delete form['_fields'];\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.keys(form.controls)\n            .forEach((/**\n         * @param {?} k\n         * @return {?}\n         */\n        (k) => clearControl(form.controls[k])));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyForm {\n    /**\n     * @param {?} formlyBuilder\n     * @param {?} formlyConfig\n     * @param {?} ngZone\n     * @param {?} immutable\n     * @param {?} parentFormGroup\n     */\n    constructor(formlyBuilder, formlyConfig, ngZone, \n    // tslint:disable-next-line\n    immutable, parentFormGroup) {\n        this.formlyBuilder = formlyBuilder;\n        this.formlyConfig = formlyConfig;\n        this.ngZone = ngZone;\n        this.parentFormGroup = parentFormGroup;\n        this.modelChange = new EventEmitter();\n        this.immutable = false;\n        this._modelChangeValue = {};\n        this.modelChangeSubs = [];\n        this.modelChange$ = new Subject();\n        this.modelChangeSub = this.modelChange$.pipe(switchMap((/**\n         * @return {?}\n         */\n        () => this.ngZone.onStable.asObservable().pipe(take(1))))).subscribe((/**\n         * @return {?}\n         */\n        () => this.ngZone.runGuarded((/**\n         * @return {?}\n         */\n        () => {\n            // runGuarded is used to keep the expression changes in-sync\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }))));\n        if (immutable !== null) {\n            console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n        }\n        this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n    }\n    /**\n     * @param {?} model\n     * @return {?}\n     */\n    set model(model) { this._model = this.immutable ? clone(model) : model; }\n    /**\n     * @return {?}\n     */\n    get model() {\n        if (!this._model) {\n            this._model = {};\n        }\n        return this._model;\n    }\n    /**\n     * @param {?} fields\n     * @return {?}\n     */\n    set fields(fields) { this._fields = this.immutable ? clone(fields) : fields; }\n    /**\n     * @return {?}\n     */\n    get fields() { return this._fields || []; }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set options(options) { this._options = this.immutable ? clone(options) : options; }\n    /**\n     * @return {?}\n     */\n    get options() { return this._options; }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    set content(content) {\n        if (content) {\n            /** @type {?} */\n            let hasContent = false;\n            /** @type {?} */\n            let node = content.nativeElement.nextSibling;\n            while (node && !hasContent) {\n                if (node.nodeType === Node.ELEMENT_NODE\n                    || node.nodeType === Node.TEXT_NODE && node.textContent && node.textContent.trim() !== '') {\n                    hasContent = true;\n                }\n                node = node.nextSibling;\n            }\n            if (hasContent) {\n                console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // https://github.com/ngx-formly/ngx-formly/issues/2294\n        if (changes.model && this.field) {\n            this.field.model = this.model;\n        }\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.form = this.form || (new FormGroup({}));\n            this.setOptions();\n            this.options.updateInitialValue();\n            this.clearModelSubscriptions();\n            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n            this.trackModelChanges(this.fields);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.modelChangeSub.unsubscribe();\n        this.clearModelSubscriptions();\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    changeModel({ key, value, field }) {\n        assignFieldValue(field, value);\n        this.modelChange$.next();\n    }\n    /**\n     * @return {?}\n     */\n    setOptions() {\n        if (!this.options) {\n            this.options = {};\n        }\n        if (!this.options.resetModel) {\n            this.options.resetModel = (/**\n             * @param {?=} model\n             * @return {?}\n             */\n            (model) => {\n                model = clone(isNullOrUndefined(model) ? ((/** @type {?} */ (this.options)))._initialModel : model);\n                if (this.model) {\n                    Object.keys(this.model).forEach((/**\n                     * @param {?} k\n                     * @return {?}\n                     */\n                    k => delete this.model[k]));\n                    Object.assign(this.model, model || {});\n                }\n                ((/** @type {?} */ (this.options)))._buildForm();\n                // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n                // but only when the current component is a root one.\n                if (this.options.parentForm && this.options.parentForm.control === this.form) {\n                    this.options.parentForm.resetForm(this.model);\n                }\n                else {\n                    this.form.reset(this.model);\n                }\n            });\n        }\n        if (!this.options.parentForm && this.parentFormGroup) {\n            defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n            wrapProperty(this.options.parentForm, 'submitted', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange }) => {\n                if (!firstChange) {\n                    this.checkExpressionChange();\n                    ((/** @type {?} */ (this.options)))._markForCheck({\n                        fieldGroup: this.fields,\n                        model: this.model,\n                        formControl: this.form,\n                        options: this.options,\n                    });\n                }\n            }));\n        }\n        if (!this.options.updateInitialValue) {\n            this.options.updateInitialValue = (/**\n             * @return {?}\n             */\n            () => ((/** @type {?} */ (this.options)))._initialModel = clone(this.model));\n        }\n        if (!((/** @type {?} */ (this.options)))._buildForm) {\n            ((/** @type {?} */ (this.options)))._buildForm = (/**\n             * @param {?=} emitModelChange\n             * @return {?}\n             */\n            (emitModelChange = false) => {\n                this.clearModelSubscriptions();\n                this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n                this.trackModelChanges(this.fields);\n                if (emitModelChange) {\n                    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n                }\n            });\n        }\n        if (!((/** @type {?} */ (this.options)))._trackModelChanges) {\n            ((/** @type {?} */ (this.options)))._trackModelChanges = (/**\n             * @param {?=} emitModelChange\n             * @return {?}\n             */\n            (emitModelChange = false) => {\n                this.clearModelSubscriptions();\n                this.trackModelChanges(this.fields);\n                if (emitModelChange) {\n                    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n                }\n            });\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    checkExpressionChange() {\n        if (this.options && ((/** @type {?} */ (this.options)))._checkField) {\n            ((/** @type {?} */ (this.options)))._checkField({\n                fieldGroup: this.fields,\n                model: this.model,\n                formControl: this.form,\n                options: this.options,\n            });\n        }\n    }\n    /**\n     * @private\n     * @param {?} fields\n     * @param {?=} rootKey\n     * @return {?}\n     */\n    trackModelChanges(fields, rootKey = []) {\n        fields.forEach((/**\n         * @param {?} field\n         * @return {?}\n         */\n        field => {\n            if (field.key && !field.fieldGroup && field.formControl) {\n                /** @type {?} */\n                const control = field.formControl;\n                /** @type {?} */\n                let valueChanges = control.valueChanges.pipe(distinctUntilChanged((/**\n                 * @param {?} x\n                 * @param {?} y\n                 * @return {?}\n                 */\n                (x, y) => {\n                    if (x !== y || Array.isArray(x) || isObject(x)) {\n                        return false;\n                    }\n                    return true;\n                })));\n                const { updateOn, debounce } = field.modelOptions;\n                if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n                    valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n                }\n                this.modelChangeSubs.push(valueChanges.subscribe((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                (value) => {\n                    // workaround for https://github.com/angular/angular/issues/13792\n                    if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n                        control.patchValue(value, { emitEvent: false, onlySelf: true });\n                    }\n                    if (field.parsers && field.parsers.length > 0) {\n                        field.parsers.forEach((/**\n                         * @param {?} parserFn\n                         * @return {?}\n                         */\n                        parserFn => value = parserFn(value)));\n                    }\n                    this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n                })));\n                // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n                /** @type {?} */\n                const observers = control.valueChanges['observers'];\n                if (observers && observers.length > 1) {\n                    observers.unshift(observers.pop());\n                }\n            }\n            if (field.fieldGroup && field.fieldGroup.length > 0) {\n                this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    clearModelSubscriptions() {\n        this.modelChangeSubs.forEach((/**\n         * @param {?} sub\n         * @return {?}\n         */\n        sub => sub.unsubscribe()));\n        this.modelChangeSubs = [];\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get field() {\n        return this.fields && this.fields[0] && this.fields[0].parent;\n    }\n}\nFormlyForm.ɵfac = function FormlyForm_Factory(t) { return new (t || FormlyForm)(ɵngcc0.ɵɵdirectiveInject(FormlyFormBuilder), ɵngcc0.ɵɵdirectiveInject(FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('immutable'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormGroupDirective, 8)); };\nFormlyForm.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyForm, selectors: [[\"formly-form\"]], viewQuery: function FormlyForm_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    } }, inputs: { model: \"model\", fields: \"fields\", options: \"options\", form: \"form\" }, outputs: { modelChange: \"modelChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([FormlyFormBuilder]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 4, vars: 1, consts: [[\"hide-deprecation\", \"\", 3, \"form\", \"options\", \"model\", \"field\", 4, \"ngFor\", \"ngForOf\"], [\"content\", \"\"], [\"hide-deprecation\", \"\", 3, \"form\", \"options\", \"model\", \"field\"]], template: function FormlyForm_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, FormlyForm_formly_field_0_Template, 1, 4, \"formly-field\", 0);\n        ɵngcc0.ɵɵelementContainerStart(1, null, 1);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.fields);\n    } }, directives: function () { return [ɵngcc2.NgForOf, FormlyField]; }, encapsulation: 2 });\n/** @nocollapse */\nFormlyForm.ctorParameters = () => [\n    { type: FormlyFormBuilder },\n    { type: FormlyConfig },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Attribute, args: ['immutable',] }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] }\n];\nFormlyForm.propDecorators = {\n    form: [{ type: Input }],\n    model: [{ type: Input }],\n    fields: [{ type: Input }],\n    options: [{ type: Input }],\n    modelChange: [{ type: Output }],\n    content: [{ type: ViewChild, args: ['content',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyForm, [{\n        type: Component,\n        args: [{\n                selector: 'formly-form',\n                template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n                providers: [FormlyFormBuilder]\n            }]\n    }], function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['immutable']\n            }] }, { type: ɵngcc1.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }]; }, { modelChange: [{\n            type: Output\n        }], model: [{\n            type: Input\n        }], fields: [{\n            type: Input\n        }], options: [{\n            type: Input\n        }], content: [{\n            type: ViewChild,\n            args: ['content']\n        }], form: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyField {\n    /**\n     * @param {?} formlyConfig\n     * @param {?} renderer\n     * @param {?} resolver\n     * @param {?} elementRef\n     * @param {?} hideDeprecation\n     */\n    constructor(formlyConfig, renderer, resolver, elementRef, \n    // tslint:disable-next-line\n    hideDeprecation) {\n        this.formlyConfig = formlyConfig;\n        this.renderer = renderer;\n        this.resolver = resolver;\n        this.elementRef = elementRef;\n        this.warnDeprecation = false;\n        this.modelChange = new EventEmitter();\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.warnDeprecation = hideDeprecation === null;\n    }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    set model(m) {\n        this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n    }\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    set form(form) {\n        this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set options(options) {\n        this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.triggerHook('afterContentChecked');\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this.triggerHook('afterViewChecked');\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        this.triggerHook('doCheck');\n        if (this.detectFieldBuild && (this.field && this.field.options)) {\n            this.render();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((/**\n         * @param {?} unsubscribe\n         * @return {?}\n         */\n        unsubscribe => unsubscribe()));\n        this.hooksObservers.forEach((/**\n         * @param {?} unsubscribe\n         * @return {?}\n         */\n        unsubscribe => unsubscribe()));\n        this.triggerHook('onDestroy');\n    }\n    /**\n     * @private\n     * @param {?} containerRef\n     * @param {?} f\n     * @param {?=} wrappers\n     * @return {?}\n     */\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field ? this.field.wrappers : [];\n        }\n        if (wrappers && wrappers.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.formlyConfig.getWrapper(wrapper);\n            /** @type {?} */\n            const ref = containerRef.createComponent(this.resolver.resolveComponentFactory(component));\n            this.attachComponentRef(ref, f);\n            wrapProperty(ref.instance, 'fieldComponent', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange, previousValue, currentValue }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue['_lContainer'] === currentValue['_lContainer']) {\n                        return;\n                    }\n                    /** @type {?} */\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            }));\n        }\n        else if (f && f.type) {\n            const { component } = this.formlyConfig.getType(f.type);\n            /** @type {?} */\n            const ref = containerRef.createComponent(this.resolver.resolveComponentFactory(component));\n            this.attachComponentRef(ref, f);\n        }\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?=} changes\n     * @return {?}\n     */\n    triggerHook(name, changes) {\n        if (this.field && this.field.hooks && this.field.hooks[name]) {\n            if (!changes || changes.field) {\n                /** @type {?} */\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    /** @type {?} */\n                    const sub = r.subscribe();\n                    this.hooksObservers.push((/**\n                     * @return {?}\n                     */\n                    () => sub.unsubscribe()));\n                }\n            }\n        }\n        if (this.field && this.field.lifecycle && this.field.lifecycle[name]) {\n            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} ref\n     * @param {?} field\n     * @return {?}\n     */\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        Object.assign(ref.instance, { field });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((/**\n         * @param {?} unsubscribe\n         * @return {?}\n         */\n        unsubscribe => unsubscribe()));\n        this.hostObservers = [\n            wrapProperty(this.field, 'hide', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange, currentValue }) => {\n                if (!firstChange || (firstChange && currentValue)) {\n                    this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                }\n                if (!this.formlyConfig.extras.lazyRender) {\n                    firstChange && this.renderField(this.containerRef, this.field);\n                }\n                else {\n                    if (currentValue) {\n                        this.containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(this.containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n            })),\n            wrapProperty(this.field, 'className', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue))\n                    && (!this.formlyConfig.extras.lazyRender || (this.field.hide !== true))) {\n                    this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            })),\n        ];\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    resetRefs(field) {\n        if (field) {\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((/**\n                 * @param {?} ref\n                 * @return {?}\n                 */\n                ref => this.componentRefs.indexOf(ref) === -1));\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n}\nFormlyField.ɵfac = function FormlyField_Factory(t) { return new (t || FormlyField)(ɵngcc0.ɵɵdirectiveInject(FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('hide-deprecation')); };\nFormlyField.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyField, selectors: [[\"formly-field\"]], viewQuery: function FormlyField_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 7, ViewContainerRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    } }, inputs: { model: \"model\", form: \"form\", options: \"options\", field: \"field\" }, outputs: { modelChange: \"modelChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"container\", \"\"]], template: function FormlyField_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyField_ng_template_0_Template, 0, 0, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n    } }, encapsulation: 2 });\n/** @nocollapse */\nFormlyField.ctorParameters = () => [\n    { type: FormlyConfig },\n    { type: Renderer2 },\n    { type: ComponentFactoryResolver },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }\n];\nFormlyField.propDecorators = {\n    field: [{ type: Input }],\n    model: [{ type: Input }],\n    form: [{ type: Input }],\n    options: [{ type: Input }],\n    modelChange: [{ type: Output }],\n    containerRef: [{ type: ViewChild, args: ['container', (/** @type {?} */ ({ read: ViewContainerRef, static: true })),] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyField, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field',\n                template: `<ng-template #container></ng-template>`\n            }]\n    }], function () { return [{ type: FormlyConfig }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['hide-deprecation']\n            }] }]; }, { modelChange: [{\n            type: Output\n        }], model: [{\n            type: Input\n        }], form: [{\n            type: Input\n        }], options: [{\n            type: Input\n        }], field: [{\n            type: Input\n        }], containerRef: [{\n            type: ViewChild,\n            args: ['container', ( /** @type {?} */({ read: ViewContainerRef, static: true }))]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyAttributes {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _document\n     */\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        this.uiAttributes = null;\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (/**\n             * @param {?} eventName\n             * @param {?} $event\n             * @return {?}\n             */\n            (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.to[eventName](this.field, $event);\n                }\n            }),\n        };\n        this.document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    get to() { return this.field.templateOptions || {}; }\n    /**\n     * @private\n     * @return {?}\n     */\n    get fieldAttrElements() { return (this.field && this.field['_elementRefs']) || []; }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((/**\n             * @param {?} listener\n             * @return {?}\n             */\n            (listener) => listener()));\n            this.uiEvents.events.forEach((/**\n             * @param {?} eventName\n             * @return {?}\n             */\n            (eventName) => {\n                if ((this.to && this.to[eventName]) || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (/**\n                     * @param {?} e\n                     * @return {?}\n                     */\n                    (e) => this.uiEvents.callback(eventName, e))));\n                }\n            }));\n            if (this.to && this.to.attributes) {\n                wrapProperty(this.to, 'attributes', (/**\n                 * @param {?} __0\n                 * @return {?}\n                 */\n                ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((/**\n                         * @param {?} attr\n                         * @return {?}\n                         */\n                        attr => this.removeAttribute(attr)));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((/**\n                         * @param {?} attr\n                         * @return {?}\n                         */\n                        attr => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        }));\n                    }\n                }));\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                wrapProperty(this.field, 'focus', (/**\n                 * @param {?} __0\n                 * @return {?}\n                 */\n                ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                }));\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            /** @type {?} */\n            const element = (/** @type {?} */ (this.elementRef.nativeElement));\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            (attr) => !element.hasAttribute || !element.hasAttribute(attr)));\n        }\n        this.uiAttributes.forEach((/**\n         * @param {?} attr\n         * @return {?}\n         */\n        attr => {\n            /** @type {?} */\n            const value = this.to[attr];\n            if (this.uiAttributesCache[attr] !== value\n                && (!this.to.attributes || !this.to.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        listener => listener()));\n        this.detachElementRef(this.field);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    toggleFocus(value) {\n        /** @type {?} */\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        /** @type {?} */\n        const isFocused = !!this.document.activeElement\n            && this.fieldAttrElements\n                .some((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement)));\n        if (value && !isFocused) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => element.nativeElement.focus()));\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => element.nativeElement.blur()));\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onFocus($event) {\n        this.field['___$focus'] = true;\n        if (this.to.focus) {\n            this.to.focus(this.field, $event);\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onBlur($event) {\n        this.field['___$focus'] = false;\n        if (this.to.blur) {\n            this.to.blur(this.field, $event);\n        }\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onChange($event) {\n        if (this.to.change) {\n            this.to.change(this.field, $event);\n        }\n        if (this.field.formControl) {\n            this.field.formControl.markAsDirty();\n        }\n    }\n    /**\n     * @private\n     * @param {?} f\n     * @return {?}\n     */\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    /**\n     * @private\n     * @param {?} f\n     * @return {?}\n     */\n    detachElementRef(f) {\n        /** @type {?} */\n        const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            this.field['_elementRefs'].splice(index, 1);\n        }\n    }\n    /**\n     * @private\n     * @param {?} attr\n     * @param {?} value\n     * @return {?}\n     */\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    /**\n     * @private\n     * @param {?} attr\n     * @return {?}\n     */\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = function FormlyAttributes_Factory(t) { return new (t || FormlyAttributes)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nFormlyAttributes.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FormlyAttributes, selectors: [[\"\", \"formlyAttributes\", \"\"]], hostBindings: function FormlyAttributes_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function FormlyAttributes_change_HostBindingHandler($event) { return ctx.onHostChange($event); });\n    } }, inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nFormlyAttributes.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nFormlyAttributes.propDecorators = {\n    field: [{ type: Input, args: ['formlyAttributes',] }],\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyAttributes, [{\n        type: Directive,\n        args: [{\n                selector: '[formlyAttributes]',\n                host: {\n                    '(change)': 'onHostChange($event)'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { field: [{\n            type: Input,\n            args: ['formlyAttributes']\n        }], id: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nclass FieldType {\n    /**\n     * @return {?}\n     */\n    get model() { return this.field.model; }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    set model(m) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n    /**\n     * @return {?}\n     */\n    get form() { return (/** @type {?} */ (this.field.parent.formControl)); }\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n    /**\n     * @return {?}\n     */\n    get options() { return this.field.options; }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set options(options) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n    /**\n     * @return {?}\n     */\n    get key() { return this.field.key; }\n    /**\n     * @return {?}\n     */\n    get formControl() { return (/** @type {?} */ (this.field.formControl)); }\n    /**\n     * @return {?}\n     */\n    get to() { return this.field.templateOptions || {}; }\n    /**\n     * @return {?}\n     */\n    get showError() { return this.options.showError(this); }\n    /**\n     * @return {?}\n     */\n    get id() { return this.field.id; }\n    /**\n     * @return {?}\n     */\n    get formState() { return this.options.formState || {}; }\n}\nFieldType.ɵfac = function FieldType_Factory(t) { return new (t || FieldType)(); };\nFieldType.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldType, inputs: { model: \"model\", form: \"form\", options: \"options\", field: \"field\" } });\nFieldType.propDecorators = {\n    field: [{ type: Input }],\n    model: [{ type: Input }],\n    form: [{ type: Input }],\n    options: [{ type: Input }]\n};\n\n/**\n * @deprecated use `FieldType` instead\n * @abstract\n */\nclass Field extends FieldType {\n    constructor() {\n        super();\n        console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO remove `selector` in V6\n// tslint:disable-next-line\n/**\n * @abstract\n * @template F\n */\nclass FieldArrayType extends FieldType {\n    /**\n     * @param {?=} builder\n     */\n    constructor(builder) {\n        super();\n        this.defaultOptions = {\n            defaultValue: [],\n        };\n        if (builder instanceof FormlyFormBuilder) {\n            console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get formControl() {\n        return (/** @type {?} */ (this.field.formControl));\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        if (!field.formControl && field.key) {\n            /** @type {?} */\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        /** @type {?} */\n        const length = field.model ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            /** @type {?} */\n            const f = Object.assign({}, clone(field.fieldArray), { key: `${i}` });\n            field.fieldGroup.push(f);\n        }\n    }\n    /**\n     * @param {?=} i\n     * @param {?=} initialModel\n     * @param {?=} __2\n     * @return {?}\n     */\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    /**\n     * @param {?} i\n     * @param {?=} __1\n     * @return {?}\n     */\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        unregisterControl(this.field.fieldGroup[i], true);\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((/**\n         * @param {?} f\n         * @param {?} key\n         * @return {?}\n         */\n        (f, key) => f.key = `${key}`));\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _build() {\n        ((/** @type {?} */ (this.options)))._buildField(this.field);\n        ((/** @type {?} */ (this.options)))._trackModelChanges(true);\n    }\n}\nFieldArrayType.ɵfac = function FieldArrayType_Factory(t) { return new (t || FieldArrayType)(ɵngcc0.ɵɵdirectiveInject(FORMLY_CONFIG, 8)); };\nFieldArrayType.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldArrayType, selectors: [[\"fieldArray\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nFieldArrayType.ctorParameters = () => [\n    { type: FormlyFormBuilder, decorators: [{ type: Inject, args: [FORMLY_CONFIG,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldArrayType, [{\n        type: Directive,\n        args: [{ selector: '[ɵfieldArray]' }]\n    }], function () { return [{ type: FormlyFormBuilder, decorators: [{\n                type: Inject,\n                args: [FORMLY_CONFIG]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nclass FieldWrapper extends FieldType {\n}\nFieldWrapper.ɵfac = /*@__PURE__*/ function () { let ɵFieldWrapper_BaseFactory; return function FieldWrapper_Factory(t) { return (ɵFieldWrapper_BaseFactory || (ɵFieldWrapper_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldWrapper)))(t || FieldWrapper); }; }();\nFieldWrapper.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldWrapper, viewQuery: function FieldWrapper_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, 5, ViewContainerRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fieldComponent = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nFieldWrapper.propDecorators = {\n    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', (/** @type {?} */ ({ read: ViewContainerRef, static: false })),] }]\n};\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyGroup extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            defaultValue: {},\n        };\n    }\n}\nFormlyGroup.ɵfac = /*@__PURE__*/ function () { let ɵFormlyGroup_BaseFactory; return function FormlyGroup_Factory(t) { return (ɵFormlyGroup_BaseFactory || (ɵFormlyGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyGroup)))(t || FormlyGroup); }; }();\nFormlyGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyGroup, selectors: [[\"formly-group\"]], hostVars: 2, hostBindings: function FormlyGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.field.fieldGroupClassName || \"\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[3, \"field\", 4, \"ngFor\", \"ngForOf\"], [3, \"field\"]], template: function FormlyGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, FormlyGroup_formly_field_0_Template, 1, 1, \"formly-field\", 0);\n        ɵngcc0.ɵɵprojection(1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.field.fieldGroup);\n    } }, directives: [ɵngcc2.NgForOf, FormlyField], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyGroup, [{\n        type: Component,\n        args: [{\n                selector: 'formly-group',\n                template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                host: {\n                    '[class]': 'field.fieldGroupClassName || \"\"'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyValidationMessage {\n    /**\n     * @param {?} formlyConfig\n     */\n    constructor(formlyConfig) {\n        this.formlyConfig = formlyConfig;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        /** @type {?} */\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => `templateOptions.${v}`));\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, (!this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ field, type, property }) => {\n                return (field === this.field)\n                    && (type === 'expressionChanges')\n                    && ((property.indexOf('validation') !== -1)\n                        || (EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))))).pipe(startWith(null), switchMap((/**\n         * @return {?}\n         */\n        () => isObservable(this.errorMessage)\n            ? this.errorMessage\n            : of(this.errorMessage))));\n    }\n    /**\n     * @return {?}\n     */\n    get errorMessage() {\n        /** @type {?} */\n        const fieldForm = this.field.formControl;\n        for (let error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                /** @type {?} */\n                let message = this.formlyConfig.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n    }\n}\nFormlyValidationMessage.ɵfac = function FormlyValidationMessage_Factory(t) { return new (t || FormlyValidationMessage)(ɵngcc0.ɵɵdirectiveInject(FormlyConfig)); };\nFormlyValidationMessage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyValidationMessage, selectors: [[\"formly-validation-message\"]], inputs: { field: \"field\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 3, template: function FormlyValidationMessage_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtext(0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(1, 1, ctx.errorMessage$));\n    } }, pipes: [ɵngcc2.AsyncPipe], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nFormlyValidationMessage.ctorParameters = () => [\n    { type: FormlyConfig }\n];\nFormlyValidationMessage.propDecorators = {\n    field: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyValidationMessage, [{\n        type: Component,\n        args: [{\n                selector: 'formly-validation-message',\n                template: `{{ errorMessage$ | async }}`,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: FormlyConfig }]; }, { field: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyTemplateType extends FieldType {\n    /**\n     * @param {?} sanitizer\n     */\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = { content: null, template: null };\n    }\n    /**\n     * @return {?}\n     */\n    get template() {\n        if (this.field && (this.field.template !== this.innerHtml.template)) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.to.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = function FormlyTemplateType_Factory(t) { return new (t || FormlyTemplateType)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DomSanitizer)); };\nFormlyTemplateType.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyTemplateType, selectors: [[\"formly-template\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, \"innerHtml\"]], template: function FormlyTemplateType_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"innerHtml\", ctx.template, ɵngcc0.ɵɵsanitizeHtml);\n    } }, encapsulation: 2 });\n/** @nocollapse */\nFormlyTemplateType.ctorParameters = () => [\n    { type: DomSanitizer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyTemplateType, [{\n        type: Component,\n        args: [{\n                selector: 'formly-template',\n                template: `<div [innerHtml]=\"template\"></div>`\n            }]\n    }], function () { return [{ type: ɵngcc3.DomSanitizer }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} expression\n * @param {?} argNames\n * @return {?}\n */\nfunction evalStringExpression(expression, argNames) {\n    try {\n        if (expression.indexOf('this.field') !== -1) {\n            console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n        }\n        return (/** @type {?} */ (Function(...argNames, `return ${expression};`)));\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\n/**\n * @param {?} expression\n * @param {?} thisArg\n * @param {?} argVal\n * @return {?}\n */\nfunction evalExpression(expression, thisArg, argVal) {\n    if (expression instanceof Function) {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldExpressionExtension {\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    prePopulate(field) {\n        if (field.parent || field.options._checkField) {\n            return;\n        }\n        /** @type {?} */\n        let checkLocked = false;\n        field.options._checkField = (/**\n         * @param {?} f\n         * @param {?} ignoreCache\n         * @return {?}\n         */\n        (f, ignoreCache) => {\n            if (!checkLocked) {\n                checkLocked = true;\n                this.checkField(f, ignoreCache);\n                checkLocked = false;\n            }\n        });\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    postPopulate(field) {\n        if (!field.parent || field._expressionProperties) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressionProperties', {});\n        if (field.expressionProperties) {\n            for (const key in field.expressionProperties) {\n                /** @type {?} */\n                const expressionProperty = field.expressionProperties[key];\n                if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n                    field._expressionProperties[key] = {\n                        expression: this._evalExpression(key, expressionProperty, key === 'templateOptions.disabled' && field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                            ? (/**\n                             * @return {?}\n                             */\n                            () => field.parent.templateOptions.disabled)\n                            : undefined),\n                    };\n                    if (key === 'templateOptions.disabled') {\n                        Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n                            get: (/**\n                             * @return {?}\n                             */\n                            () => field.templateOptions.disabled),\n                            set: (/**\n                             * @return {?}\n                             */\n                            () => { }),\n                            enumerable: true,\n                            configurable: true,\n                        });\n                    }\n                }\n                else if (expressionProperty instanceof Observable) {\n                    /** @type {?} */\n                    const subscribe = (/**\n                     * @return {?}\n                     */\n                    () => ((/** @type {?} */ (expressionProperty)))\n                        .subscribe((/**\n                     * @param {?} v\n                     * @return {?}\n                     */\n                    v => {\n                        this.setExprValue(field, key, v);\n                        if (field.options && field.options._markForCheck) {\n                            field.options._markForCheck(field);\n                        }\n                    })));\n                    /** @type {?} */\n                    let subscription = subscribe();\n                    /** @type {?} */\n                    const onInit = field.hooks.onInit;\n                    field.hooks.onInit = (/**\n                     * @return {?}\n                     */\n                    () => {\n                        if (subscription === null) {\n                            subscription = subscribe();\n                        }\n                        return onInit && onInit(field);\n                    });\n                    /** @type {?} */\n                    const onDestroy = field.hooks.onDestroy;\n                    field.hooks.onDestroy = (/**\n                     * @return {?}\n                     */\n                    () => {\n                        onDestroy && onDestroy(field);\n                        subscription.unsubscribe();\n                        subscription = null;\n                    });\n                }\n            }\n        }\n        if (field.hideExpression) {\n            // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n            delete field.hide;\n            field.hideExpression = this._evalExpression('hide', field.hideExpression, (/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                let root = field.parent;\n                while (root.parent && !root.hide) {\n                    root = root.parent;\n                }\n                return root.hide;\n            }));\n        }\n        else {\n            wrapProperty(field, 'hide', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ currentValue, firstChange }) => {\n                field._hide = currentValue;\n                if (!firstChange || (firstChange && currentValue === true)) {\n                    field.options._hiddenFieldsForCheck.push(field);\n                }\n            }));\n        }\n    }\n    /**\n     * @private\n     * @param {?} prop\n     * @param {?} expression\n     * @param {?=} parentExpression\n     * @return {?}\n     */\n    _evalExpression(prop, expression, parentExpression) {\n        return (/**\n         * @param {...?} args\n         * @return {?}\n         */\n        (...args) => {\n            try {\n                if (typeof expression === 'string') {\n                    expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n                }\n                if (typeof expression !== 'function') {\n                    expression = (/**\n                     * @return {?}\n                     */\n                    () => !!expression);\n                }\n                return (parentExpression && parentExpression()) || expression(...args);\n            }\n            catch (error) {\n                error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n                throw error;\n            }\n        });\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} prop\n     * @return {?}\n     */\n    _evalExpressionPath(field, prop) {\n        if (field._expressionProperties[prop] && field._expressionProperties[prop].expressionPaths) {\n            return field._expressionProperties[prop].expressionPaths;\n        }\n        /** @type {?} */\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((/**\n             * @param {?} p\n             * @return {?}\n             */\n            p => p))\n                .forEach(((/**\n             * @param {?} path\n             * @return {?}\n             */\n            path => {\n                /** @type {?} */\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((/**\n                     * @param {?} p\n                     * @return {?}\n                     */\n                    p => p)));\n                }\n            })));\n        }\n        if (field._expressionProperties[prop]) {\n            field._expressionProperties[prop].expressionPaths = paths;\n        }\n        return paths;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?=} ignoreCache\n     * @return {?}\n     */\n    checkField(field, ignoreCache = false) {\n        /** @type {?} */\n        const fieldChanged = this._checkField(field, ignoreCache);\n        field.options._hiddenFieldsForCheck\n            .sort((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => f.hide ? -1 : 1))\n            .forEach((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => this.toggleFormControl(f, !!f.hide, !ignoreCache)));\n        field.options._hiddenFieldsForCheck = [];\n        if (fieldChanged) {\n            this.checkField(field);\n            if (field.options && field.options._markForCheck) {\n                field.options._markForCheck(field);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?=} ignoreCache\n     * @return {?}\n     */\n    _checkField(field, ignoreCache = false) {\n        /** @type {?} */\n        let fieldChanged = false;\n        field.fieldGroup.forEach((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => {\n            if (!f.options) {\n                return;\n            }\n            this.checkFieldExpressionChange(f, ignoreCache) && (fieldChanged = true);\n            if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n                field.options._hiddenFieldsForCheck.push(f);\n                fieldChanged = true;\n            }\n            if (f.fieldGroup && f.fieldGroup.length > 0) {\n                this._checkField(f, ignoreCache) && (fieldChanged = true);\n            }\n        }));\n        return fieldChanged;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} ignoreCache\n     * @return {?}\n     */\n    checkFieldExpressionChange(field, ignoreCache) {\n        if (!field || !field._expressionProperties) {\n            return false;\n        }\n        /** @type {?} */\n        let markForCheck = false;\n        /** @type {?} */\n        const expressionProperties = field._expressionProperties;\n        for (const key in expressionProperties) {\n            /** @type {?} */\n            let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field, ignoreCache]);\n            if (key === 'templateOptions.disabled') {\n                expressionValue = !!expressionValue;\n            }\n            if (ignoreCache || (expressionProperties[key].expressionValue !== expressionValue\n                && (!(isObject(expressionValue) || isFunction(expressionValue))\n                    || (isFunction(expressionValue)\n                        && ('' + expressionProperties[key].expressionValue !== '' + expressionValue))\n                    || isObservable(expressionValue)\n                    || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue)))) {\n                markForCheck = true;\n                expressionProperties[key].expressionValue = expressionValue;\n                this.setExprValue(field, key, expressionValue);\n            }\n        }\n        return markForCheck;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} ignoreCache\n     * @return {?}\n     */\n    checkFieldVisibilityChange(field, ignoreCache) {\n        if (!field || isNullOrUndefined(field.hideExpression)) {\n            return false;\n        }\n        /** @type {?} */\n        const hideExpressionResult = !!evalExpression(field.hideExpression, { field }, [field.model, field.options.formState, field, ignoreCache]);\n        /** @type {?} */\n        let markForCheck = false;\n        if (hideExpressionResult !== field.hide || ignoreCache) {\n            markForCheck = true;\n            // toggle hide\n            field.hide = hideExpressionResult;\n            field.templateOptions.hidden = hideExpressionResult;\n        }\n        return markForCheck;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} value\n     * @return {?}\n     */\n    setDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled')))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => this.setDisabledState(f, value)));\n        }\n        if (field.key && field.templateOptions.disabled !== value) {\n            field.templateOptions.disabled = value;\n        }\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} hide\n     * @param {?} resetOnHide\n     * @return {?}\n     */\n    toggleFormControl(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !f.hideExpression))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => this.toggleFormControl(f, hide, resetOnHide)));\n        }\n        if (field.formControl && field.key) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            /** @type {?} */\n            const c = field.formControl;\n            if (c['_fields'] && c['_fields'].length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c['_fields'] || c['_fields'].every((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !!f._hide)))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    if (field.fieldGroup) {\n                        assignFieldValue(field, undefined);\n                        if (field.formControl instanceof FormArray) {\n                            field.fieldGroup.length = 0;\n                        }\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && field.parent && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && (field.fieldGroup || []).length !== (field.model || []).length) {\n                    ((/** @type {?} */ (field.options)))._buildForm(true);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next((/** @type {?} */ ({ field, type: 'hidden', value: hide })));\n        }\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    setExprValue(field, prop, value) {\n        try {\n            /** @type {?} */\n            let target = field;\n            /** @type {?} */\n            const paths = this._evalExpressionPath(field, prop);\n            /** @type {?} */\n            const lastIndex = paths.length - 1;\n            for (let i = 0; i < lastIndex; i++) {\n                target = target[paths[i]];\n            }\n            target[paths[lastIndex]] = value;\n        }\n        catch (error) {\n            error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n            throw error;\n        }\n        if (prop === 'templateOptions.disabled' && field.key) {\n            this.setDisabledState(field, value);\n        }\n        if (prop.indexOf('model.') === 0) {\n            /** @type {?} */\n            const path = prop.replace(/^model\\./, '');\n            /** @type {?} */\n            const control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n            if (control\n                && !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n                && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field: field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldValidationExtension {\n    /**\n     * @param {?} formlyConfig\n     */\n    constructor(formlyConfig) {\n        this.formlyConfig = formlyConfig;\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} type\n     * @return {?}\n     */\n    initFieldValidation(field, type) {\n        /** @type {?} */\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName in field[type]) {\n                if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n                    field[type].validation = [field[type].validation];\n                    console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n                }\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((/**\n                     * @param {?} v\n                     * @return {?}\n                     */\n                    v => this.wrapNgValidatorFn(field, v))))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    getPredefinedFieldValidation(field) {\n        /** @type {?} */\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((/**\n         * @param {?} opt\n         * @return {?}\n         */\n        opt => wrapProperty(field.templateOptions, opt, (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((/**\n             * @param {?} o\n             * @return {?}\n             */\n            o => o !== opt));\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }))));\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((/**\n             * @param {?} opt\n             * @return {?}\n             */\n            opt => (/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const value = field.templateOptions[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        return Validators.minLength(value)(control);\n                    case 'maxLength':\n                        return Validators.maxLength(value)(control);\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                }\n            }))))(control);\n        });\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} validator\n     * @param {?=} validatorName\n     * @return {?}\n     */\n    wrapNgValidatorFn(field, validator, validatorName) {\n        /** @type {?} */\n        let validatorOption = null;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.formlyConfig.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.formlyConfig.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression } = validator, options = __rest(validator, [\"expression\"]);\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((/**\n                 * @param {?} v\n                 * @return {?}\n                 */\n                v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((/**\n                 * @param {?} v\n                 * @return {?}\n                 */\n                v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption))));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        });\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} errors\n     * @param {?} options\n     * @return {?}\n     */\n    handleAsyncResult(field, errors, options) {\n        // workaround for https://github.com/angular/angular/issues/13200\n        if (field.options && field.options._markForCheck) {\n            field.options._markForCheck(field);\n        }\n        return this.handleResult(field, errors, options);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} errors\n     * @param {?} __2\n     * @return {?}\n     */\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        /** @type {?} */\n        const ctrl = field.formControl;\n        ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((/**\n             * @param {?} name\n             * @return {?}\n             */\n            name => {\n                /** @type {?} */\n                const errorPath = errors[name].errorPath\n                    ? errors[name].errorPath\n                    : (options || {}).errorPath;\n                /** @type {?} */\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const _a = errors[name], opts = __rest(_a, [\"errorPath\"]);\n                    childCtrl.setErrors(Object.assign({}, (childCtrl.errors || {}), { [name]: opts }));\n                    !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl['_childrenErrors'][name] = (/**\n                     * @return {?}\n                     */\n                    () => {\n                        const _a = childCtrl.errors || {}, _b = name, toDelete = _a[_b], childErrors = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    });\n                }\n            }));\n        }\n        return errors;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldFormExtension {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        if (!field.parent) {\n            return;\n        }\n        if (field.fieldGroup && !field.key) {\n            defineHiddenProp(field, 'formControl', field.parent.formControl);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        this.setValidators(field);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    addFormControl(field) {\n        /** @type {?} */\n        let control = findControl(field);\n        if (!control) {\n            /** @type {?} */\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            /** @type {?} */\n            const value = field.key ? getFieldValue(field) : field.defaultValue;\n            /** @type {?} */\n            const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n            if (ref && ref.componentType && ref.componentType['createControl']) {\n                /** @type {?} */\n                const component = ref.componentType;\n                console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n                control = component['createControl'](value, field);\n            }\n            else if (field.fieldGroup) {\n                // TODO: move to postPopulate\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                control = new FormControl(value, controlOptions);\n            }\n        }\n        registerControl(field, control);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?=} disabled\n     * @return {?}\n     */\n    setValidators(field, disabled = false) {\n        /** @type {?} */\n        let markForCheck = false;\n        if (disabled === false && field.key && field.templateOptions && field.templateOptions.disabled) {\n            disabled = true;\n        }\n        (field.fieldGroup || []).forEach((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => this.setValidators(f, disabled) && (markForCheck = true)));\n        if (field.key || !field.parent || (!field.key && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            field.templateOptions = field.templateOptions || {};\n            if (field.key && c && c instanceof FormControl) {\n                if (disabled && c.enabled) {\n                    c.disable({ emitEvent: false, onlySelf: true });\n                    markForCheck = true;\n                }\n                if (!disabled && c.disabled) {\n                    c.enable({ emitEvent: false, onlySelf: true });\n                    markForCheck = true;\n                }\n            }\n            if (c && (null === c.validator || null === c.asyncValidator)) {\n                c.setValidators((/**\n                 * @return {?}\n                 */\n                () => {\n                    /** @type {?} */\n                    const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                    return v ? v(c) : null;\n                }));\n                c.setAsyncValidators((/**\n                 * @return {?}\n                 */\n                () => {\n                    /** @type {?} */\n                    const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                    return v ? v(c) : of(null);\n                }));\n                markForCheck = true;\n            }\n            if (markForCheck) {\n                updateValidity(c, true);\n                // update validity of `FormGroup` instance created by field with nested key.\n                /** @type {?} */\n                let parent = c.parent;\n                for (let i = 1; i < getKeyPath(field).length; i++) {\n                    if (parent) {\n                        updateValidity(parent, true);\n                        parent = parent.parent;\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} field\n     * @param {?} type\n     * @return {?}\n     */\n    mergeValidators(field, type) {\n        /** @type {?} */\n        const validators = [];\n        /** @type {?} */\n        const c = field.formControl;\n        if (c && c['_fields'] && c['_fields'].length > 1) {\n            c['_fields']\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            (f) => !f._hide))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            (f) => validators.push(...f[type])));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !f.key && f.fieldGroup))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => validators.push(...this.mergeValidators(f, type))));\n        }\n        return validators;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass CoreExtension {\n    /**\n     * @param {?} formlyConfig\n     */\n    constructor(formlyConfig) {\n        this.formlyConfig = formlyConfig;\n        this.formId = 0;\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    prePopulate(field) {\n        this.getFieldComponentInstance(field).prePopulate();\n        if (field.parent) {\n            return;\n        }\n        /** @type {?} */\n        const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n        (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach((/**\n         * @param {?} fieldTransform\n         * @return {?}\n         */\n        fieldTransform => {\n            if (fieldTransform) {\n                console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n                /** @type {?} */\n                const fieldGroup = fieldTransform(field.fieldGroup, field.model, (/** @type {?} */ (field.formControl)), field.options);\n                if (!fieldGroup) {\n                    throw new Error('fieldTransform must return an array of fields');\n                }\n            }\n        }));\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate();\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((/**\n             * @param {?} f\n             * @param {?} index\n             * @return {?}\n             */\n            (f, index) => {\n                Object.defineProperty(f, 'parent', { get: (/**\n                     * @return {?}\n                     */\n                    () => field), configurable: true });\n                Object.defineProperty(f, 'index', { get: (/**\n                     * @return {?}\n                     */\n                    () => index), configurable: true });\n                this.formId++;\n            }));\n        }\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate();\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    initFieldOptions(field) {\n        /** @type {?} */\n        const root = (/** @type {?} */ (field.parent));\n        if (!root) {\n            return;\n        }\n        Object.defineProperty(field, 'form', { get: (/**\n             * @return {?}\n             */\n            () => root.formControl), configurable: true });\n        Object.defineProperty(field, 'options', { get: (/**\n             * @return {?}\n             */\n            () => root.options), configurable: true });\n        Object.defineProperty(field, 'model', {\n            get: (/**\n             * @return {?}\n             */\n            () => field.key && field.fieldGroup ? getFieldValue(field) : root.model),\n            configurable: true,\n        });\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field['index']),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            templateOptions: !field.type || !field.key ? {} : {\n                label: '',\n                placeholder: '',\n                focus: false,\n                disabled: false,\n            },\n        });\n        if (this.formlyConfig.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.lifecycle) {\n            console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n        }\n        if (field.type !== 'formly-template'\n            && (field.template\n                || (field.expressionProperties && field.expressionProperties.template))) {\n            if (field.type) {\n                console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n            }\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.formlyConfig.getMergedField(field);\n        }\n        if (field.parent) {\n            /** @type {?} */\n            let setDefaultValue = !isUndefined(field.key)\n                && !isUndefined(field.defaultValue)\n                && isUndefined(getFieldValue(field))\n                && (!field.resetOnHide || !(field.hide || field.hideExpression));\n            if (setDefaultValue && field.resetOnHide) {\n                /** @type {?} */\n                let parent = field.parent;\n                while (parent && !parent.hideExpression && !parent.hide) {\n                    parent = parent.parent;\n                }\n                setDefaultValue = !parent || !(parent.hideExpression || parent.hide);\n            }\n            if (setDefaultValue) {\n                assignFieldValue(field, field.defaultValue);\n            }\n        }\n        this.initFieldWrappers(field);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    initFieldWrappers(field) {\n        field.wrappers = field.wrappers || [];\n        /** @type {?} */\n        const fieldTemplateManipulators = Object.assign({ preWrapper: [], postWrapper: [] }, (field.templateOptions.templateManipulators || {}));\n        field.wrappers = [\n            ...this.formlyConfig.templateManipulators.preWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n            ...fieldTemplateManipulators.preWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n            ...field.wrappers,\n            ...this.formlyConfig.templateManipulators.postWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n            ...fieldTemplateManipulators.postWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n        ].filter((/**\n         * @param {?} el\n         * @param {?} i\n         * @param {?} a\n         * @return {?}\n         */\n        (el, i, a) => el && i === a.indexOf(el)));\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    getFieldComponentInstance(field) {\n        /** @type {?} */\n        const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n        /** @type {?} */\n        const instance = componentRef ? (/** @type {?} */ (componentRef.instance)) : {};\n        return {\n            prePopulate: (/**\n             * @return {?}\n             */\n            () => instance.prePopulate && instance.prePopulate(field)),\n            onPopulate: (/**\n             * @return {?}\n             */\n            () => instance.onPopulate && instance.onPopulate(field)),\n            postPopulate: (/**\n             * @return {?}\n             */\n            () => instance.postPopulate && instance.postPopulate(field)),\n        };\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} formlyConfig\n * @return {?}\n */\nfunction defaultFormlyConfig(formlyConfig) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(formlyConfig) },\n            { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n            { name: 'field-form', extension: new FieldFormExtension(formlyConfig) },\n            { name: 'field-expression', extension: new FieldExpressionExtension() },\n        ],\n    };\n}\nclass FormlyModule {\n    /**\n     * @param {?} configService\n     * @param {?=} configs\n     */\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((/**\n         * @param {?} config\n         * @return {?}\n         */\n        config => configService.addConfig(config)));\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = function FormlyModule_Factory(t) { return new (t || FormlyModule)(ɵngcc0.ɵɵinject(FormlyConfig), ɵngcc0.ɵɵinject(FORMLY_CONFIG, 8)); };\nFormlyModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FormlyModule });\nFormlyModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });\n/** @nocollapse */\nFormlyModule.ctorParameters = () => [\n    { type: FormlyConfig },\n    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [FORMLY_CONFIG,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    FormlyForm,\n                    FormlyField,\n                    FormlyAttributes,\n                    FormlyGroup,\n                    FormlyValidationMessage,\n                    FormlyTemplateType,\n                    ( /** @type {?} */(FieldArrayType)),\n                ],\n                entryComponents: [FormlyGroup, FormlyTemplateType],\n                exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                imports: [CommonModule]\n            }]\n    }], function () { return [{ type: FormlyConfig }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FORMLY_CONFIG]\n            }] }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyModule, { declarations: function () { return [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage, FormlyTemplateType, FieldArrayType]; }, imports: function () { return [CommonModule]; }, exports: function () { return [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyForm, FormlyField, FormlyAttributes, FORMLY_CONFIG, FormlyConfig, FormlyFormBuilder, FieldType, Field, FieldArrayType, FieldWrapper, FormlyModule, defineHiddenProp as ɵdefineHiddenProp, reverseDeepMerge as ɵreverseDeepMerge, getFieldValue as ɵgetFieldValue, clone as ɵclone, wrapProperty as ɵwrapProperty, defaultFormlyConfig as ɵa, CoreExtension as ɵe, FieldExpressionExtension as ɵh, FieldFormExtension as ɵg, FieldValidationExtension as ɵf, FormlyTemplateType as ɵd, FormlyGroup as ɵb, FormlyValidationMessage as ɵc };\n\n","import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { Component, Directive, Input, NgModule } from '@angular/core';\nimport { FieldType, FieldWrapper, FormlyAttributes, FormlyModule } from '@ngx-formly/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@ionic/angular';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@ngx-formly/core';\nimport * as ɵngcc5 from '@ngx-formly/core/select';\n\nfunction FormlyFieldInput_ion_input_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ion-input\", 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r0.to.type || \"text\")(\"formControl\", ctx_r0.formControl)(\"ionFormlyAttributes\", ctx_r0.field);\n} }\nfunction FormlyFieldInput_ng_template_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ion-input\", 3);\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"formControl\", ctx_r2.formControl)(\"ionFormlyAttributes\", ctx_r2.field);\n} }\nfunction FormlyFieldRadio_ion_item_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ion-item\", 3);\n    ɵngcc0.ɵɵelementStart(1, \"ion-label\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(3, \"ion-radio\", 4);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", option_r2.disabled || ctx_r0.formControl.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(option_r2.label);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", option_r2.value);\n} }\nfunction FormlyFieldRadio_ion_item_7_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ion-item\", 5);\n    ɵngcc0.ɵɵelementStart(1, \"ion-label\");\n    ɵngcc0.ɵɵelementStart(2, \"ion-text\", 6);\n    ɵngcc0.ɵɵelementStart(3, \"p\");\n    ɵngcc0.ɵɵelement(4, \"formly-validation-message\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"field\", ctx_r1.field);\n} }\nfunction FormlyFieldSelect_ng_container_0_ion_select_option_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ion-select-option\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", option_r3.value)(\"disabled\", option_r3.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", option_r3.label, \" \");\n} }\nfunction FormlyFieldSelect_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"ion-select\", 1);\n    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_0_ion_select_option_2_Template, 2, 3, \"ion-select-option\", 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const selectOptions_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"align-self\", ctx_r0.to.labelPosition === \"floating\" ? \"stretch\" : \"\")(\"max-width\", ctx_r0.to.labelPosition === \"floating\" ? 100 : \"\", \"%\");\n    ɵngcc0.ɵɵproperty(\"formControl\", ctx_r0.formControl)(\"compareWith\", ctx_r0.to.compareWith)(\"ionFormlyAttributes\", ctx_r0.field)(\"multiple\", ctx_r0.to.multiple)(\"interface\", ctx_r0.to.interface)(\"okText\", ctx_r0.to.okText)(\"cancelText\", ctx_r0.to.cancelText);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", selectOptions_r1);\n} }\nfunction FormlyWrapperFormField_span_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5);\n    ɵngcc0.ɵɵtext(1, \"*\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction FormlyWrapperFormField_ng_template_4_Template(rf, ctx) { }\nfunction FormlyWrapperFormField_ion_item_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ion-item\", 6);\n    ɵngcc0.ɵɵelementStart(1, \"ion-label\");\n    ɵngcc0.ɵɵelementStart(2, \"ion-text\", 7);\n    ɵngcc0.ɵɵelementStart(3, \"p\");\n    ɵngcc0.ɵɵelement(4, \"formly-validation-message\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"field\", ctx_r3.field);\n} }\nclass FormlyFieldInput extends FieldType {\n}\nFormlyFieldInput.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldInput_BaseFactory; return function FormlyFieldInput_Factory(t) { return (ɵFormlyFieldInput_BaseFactory || (ɵFormlyFieldInput_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldInput)))(t || FormlyFieldInput); }; }();\nFormlyFieldInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldInput, selectors: [[\"formly-field-ion-input\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[3, \"type\", \"formControl\", \"ionFormlyAttributes\", 4, \"ngIf\", \"ngIfElse\"], [\"numberTmp\", \"\"], [3, \"type\", \"formControl\", \"ionFormlyAttributes\"], [\"type\", \"number\", 3, \"formControl\", \"ionFormlyAttributes\"]], template: function FormlyFieldInput_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyFieldInput_ion_input_0_Template, 1, 3, \"ion-input\", 0);\n        ɵngcc0.ɵɵtemplate(1, FormlyFieldInput_ng_template_1_Template, 1, 2, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.type !== \"number\")(\"ngIfElse\", _r1);\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc2.IonInput, ɵngcc2.TextValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc2.NumericValueAccessor]; }, styles: [\"[_nghost-%COMP%] { display: inherit; }\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldInput, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-input',\n                template: `\n    <ion-input *ngIf=\"to.type !== 'number' else numberTmp\" [type]=\"to.type || 'text'\" [formControl]=\"formControl\" [ionFormlyAttributes]=\"field\"></ion-input>\n    <ng-template #numberTmp>\n      <ion-input type=\"number\" [formControl]=\"formControl\" [ionFormlyAttributes]=\"field\"></ion-input>\n    </ng-template>\n  `,\n                styles: [':host { display: inherit; }']\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldCheckbox extends FieldType {\n}\nFormlyFieldCheckbox.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldCheckbox_BaseFactory; return function FormlyFieldCheckbox_Factory(t) { return (ɵFormlyFieldCheckbox_BaseFactory || (ɵFormlyFieldCheckbox_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldCheckbox)))(t || FormlyFieldCheckbox); }; }();\nFormlyFieldCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldCheckbox, selectors: [[\"formly-field-ion-checkbox\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [[3, \"formControl\", \"ionFormlyAttributes\"]], template: function FormlyFieldCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"ion-checkbox\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formControl\", ctx.formControl)(\"ionFormlyAttributes\", ctx.field);\n    } }, directives: function () { return [ɵngcc2.IonCheckbox, ɵngcc2.BooleanValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-checkbox',\n                template: `\n    <ion-checkbox\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n    </ion-checkbox>\n  `\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldDatetime extends FieldType {\n}\nFormlyFieldDatetime.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldDatetime_BaseFactory; return function FormlyFieldDatetime_Factory(t) { return (ɵFormlyFieldDatetime_BaseFactory || (ɵFormlyFieldDatetime_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldDatetime)))(t || FormlyFieldDatetime); }; }();\nFormlyFieldDatetime.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldDatetime, selectors: [[\"formly-field-ion-datetime\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 18, consts: [[3, \"cancelText\", \"dayNames\", \"dayShortNames\", \"dayValues\", \"displayFormat\", \"doneText\", \"hourValues\", \"minuteValues\", \"monthNames\", \"monthShortNames\", \"monthValues\", \"pickerFormat\", \"pickerOptions\", \"yearValues\", \"min\", \"max\", \"formControl\", \"ionFormlyAttributes\"]], template: function FormlyFieldDatetime_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"ion-datetime\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"cancelText\", ctx.to.cancelText)(\"dayNames\", ctx.to.dayNames)(\"dayShortNames\", ctx.to.dayShortNames)(\"dayValues\", ctx.to.dayValues)(\"displayFormat\", ctx.to.displayFormat)(\"doneText\", ctx.to.doneText)(\"hourValues\", ctx.to.hourValues)(\"minuteValues\", ctx.to.minuteValues)(\"monthNames\", ctx.to.monthNames)(\"monthShortNames\", ctx.to.monthShortNames)(\"monthValues\", ctx.to.monthValues)(\"pickerFormat\", ctx.to.pickerFormat)(\"pickerOptions\", ctx.to.pickerOptions)(\"yearValues\", ctx.to.yearValues)(\"min\", ctx.to.minDate ? ctx.to.minDate : ctx.to.min)(\"max\", ctx.to.maxDate ? ctx.to.maxDate : ctx.to.max)(\"formControl\", ctx.formControl)(\"ionFormlyAttributes\", ctx.field);\n    } }, directives: function () { return [ɵngcc2.IonDatetime, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldDatetime, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-datetime',\n                template: `\n    <ion-datetime\n      [cancelText]=\"to.cancelText\"\n      [dayNames]=\"to.dayNames\"\n      [dayShortNames]=\"to.dayShortNames\"\n      [dayValues]=\"to.dayValues\"\n      [displayFormat]=\"to.displayFormat\"\n      [doneText]=\"to.doneText\"\n      [hourValues]=\"to.hourValues\"\n      [minuteValues]=\"to.minuteValues\"\n      [monthNames]=\"to.monthNames\"\n      [monthShortNames]=\"to.monthShortNames\"\n      [monthValues]=\"to.monthValues\"\n      [pickerFormat]=\"to.pickerFormat\"\n      [pickerOptions]=\"to.pickerOptions\"\n      [yearValues]=\"to.yearValues\"\n      [min]=\"to.minDate ? to.minDate : to.min\"\n      [max]=\"to.maxDate ? to.maxDate : to.max\"\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n    </ion-datetime>\n  `\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldRadio extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: { options: [] },\n        };\n    }\n}\nFormlyFieldRadio.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldRadio_BaseFactory; return function FormlyFieldRadio_Factory(t) { return (ɵFormlyFieldRadio_BaseFactory || (ɵFormlyFieldRadio_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRadio)))(t || FormlyFieldRadio); }; }();\nFormlyFieldRadio.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRadio, selectors: [[\"formly-field-ion-radio\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 10, consts: [[3, \"formControl\", \"ionFormlyAttributes\"], [3, \"disabled\", 4, \"ngFor\", \"ngForOf\"], [\"lines\", \"none\", 4, \"ngIf\"], [3, \"disabled\"], [3, \"value\"], [\"lines\", \"none\"], [\"color\", \"danger\"], [3, \"field\"]], template: function FormlyFieldRadio_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ion-list\");\n        ɵngcc0.ɵɵelementStart(1, \"ion-radio-group\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"ion-list-header\");\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, FormlyFieldRadio_ion_item_4_Template, 4, 3, \"ion-item\", 1);\n        ɵngcc0.ɵɵpipe(5, \"async\");\n        ɵngcc0.ɵɵpipe(6, \"formlySelectOptions\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, FormlyFieldRadio_ion_item_7_Template, 5, 1, \"ion-item\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"formControl\", ctx.formControl)(\"ionFormlyAttributes\", ctx.field);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.to.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(5, 5, ɵngcc0.ɵɵpipeBind2(6, 7, ctx.to.options, ctx.field)));\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showError);\n    } }, directives: function () { return [ɵngcc2.IonList, ɵngcc2.IonRadioGroup, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc2.IonListHeader, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc2.IonItem, ɵngcc2.IonLabel, ɵngcc2.IonRadio, ɵngcc2.RadioValueAccessor, ɵngcc2.IonText, ɵngcc4.ɵc]; }, pipes: function () { return [ɵngcc1.AsyncPipe, ɵngcc5.FormlySelectOptionsPipe]; }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldRadio, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-radio',\n                template: `\n    <ion-list>\n      <ion-radio-group\n        [formControl]=\"formControl\"\n        [ionFormlyAttributes]=\"field\">\n        <ion-list-header>{{ to.label }}</ion-list-header>\n        <ion-item *ngFor=\"let option of to.options | formlySelectOptions:field | async\" [disabled]=\"option.disabled || formControl.disabled\">\n          <ion-label>{{ option.label }}</ion-label>\n          <ion-radio [value]=\"option.value\"></ion-radio>\n        </ion-item>\n      </ion-radio-group>\n    </ion-list>\n    <ion-item lines=\"none\" *ngIf=\"showError\">\n      <ion-label>\n        <ion-text color=\"danger\">\n          <p>\n            <formly-validation-message [field]=\"field\"></formly-validation-message>\n          </p>\n        </ion-text>\n      </ion-label>\n    </ion-item>\n  `\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldToggle extends FieldType {\n}\nFormlyFieldToggle.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldToggle_BaseFactory; return function FormlyFieldToggle_Factory(t) { return (ɵFormlyFieldToggle_BaseFactory || (ɵFormlyFieldToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldToggle)))(t || FormlyFieldToggle); }; }();\nFormlyFieldToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldToggle, selectors: [[\"formly-field-ion-toggle\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [[3, \"formControl\", \"ionFormlyAttributes\"]], template: function FormlyFieldToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"ion-toggle\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formControl\", ctx.formControl)(\"ionFormlyAttributes\", ctx.field);\n    } }, directives: function () { return [ɵngcc2.IonToggle, ɵngcc2.BooleanValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldToggle, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-toggle',\n                template: `\n    <ion-toggle\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n    </ion-toggle>\n  `\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldSelect extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                options: [],\n                /**\n                 * @param {?} o1\n                 * @param {?} o2\n                 * @return {?}\n                 */\n                compareWith(o1, o2) {\n                    return o1 === o2;\n                },\n            },\n        };\n    }\n}\nFormlyFieldSelect.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldSelect_BaseFactory; return function FormlyFieldSelect_Factory(t) { return (ɵFormlyFieldSelect_BaseFactory || (ɵFormlyFieldSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldSelect)))(t || FormlyFieldSelect); }; }();\nFormlyFieldSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldSelect, selectors: [[\"formly-field-ion-select\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[4, \"ngIf\"], [3, \"formControl\", \"compareWith\", \"ionFormlyAttributes\", \"multiple\", \"interface\", \"okText\", \"cancelText\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"disabled\"]], template: function FormlyFieldSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_ng_container_0_Template, 3, 12, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵpipe(2, \"formlySelectOptions\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc2.IonSelect, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc1.NgForOf, ɵngcc2.IonSelectOption]; }, pipes: function () { return [ɵngcc1.AsyncPipe, ɵngcc5.FormlySelectOptionsPipe]; }, styles: [\"[_nghost-%COMP%] { display: inherit; }\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldSelect, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-select',\n                template: `\n    <!-- ng-container used as a workaround for https://github.com/ionic-team/ionic/issues/19324 -->\n    <ng-container *ngIf=\"to.options | formlySelectOptions:field | async; let selectOptions\">\n      <ion-select\n        [style.align-self]=\"to.labelPosition === 'floating' ? 'stretch':''\"\n        [style.max-width.%]=\"to.labelPosition === 'floating' ? 100 : ''\"\n\n        [formControl]=\"formControl\"\n        [compareWith]=\"to.compareWith\"\n        [ionFormlyAttributes]=\"field\"\n        [multiple]=\"to.multiple\"\n        [interface]=\"to.interface\"\n        [okText]=\"to.okText\"\n        [cancelText]=\"to.cancelText\">\n        <ion-select-option *ngFor=\"let option of selectOptions\" [value]=\"option.value\" [disabled]=\"option.disabled\">\n            {{ option.label }}\n        </ion-select-option>\n      </ion-select>\n    </ng-container>\n  `,\n                styles: [':host { display: inherit; }']\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldRange extends FieldType {\n}\nFormlyFieldRange.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldRange_BaseFactory; return function FormlyFieldRange_Factory(t) { return (ɵFormlyFieldRange_BaseFactory || (ɵFormlyFieldRange_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRange)))(t || FormlyFieldRange); }; }();\nFormlyFieldRange.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRange, selectors: [[\"formly-field-ion-range\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 6, consts: [[3, \"min\", \"max\", \"formControl\", \"ionFormlyAttributes\"], [\"slot\", \"start\"], [\"slot\", \"end\"]], template: function FormlyFieldRange_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ion-range\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"ion-label\", 1);\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"ion-label\", 2);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"min\", ctx.to.min)(\"max\", ctx.to.max)(\"formControl\", ctx.formControl)(\"ionFormlyAttributes\", ctx.field);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.to.min);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.to.max);\n    } }, directives: function () { return [ɵngcc2.IonRange, ɵngcc2.SelectValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes, ɵngcc2.IonLabel]; }, styles: [\"[_nghost-%COMP%] { display: inherit; }\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldRange, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-range',\n                template: `\n    <ion-range\n      [min]=\"to.min\"\n      [max]=\"to.max\"\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n      <ion-label slot=\"start\">{{ to.min }}</ion-label>\n      <ion-label slot=\"end\">{{ to.max }}</ion-label>\n    </ion-range>\n  `,\n                styles: [':host { display: inherit; }']\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldTextArea extends FieldType {\n}\nFormlyFieldTextArea.ɵfac = /*@__PURE__*/ function () { let ɵFormlyFieldTextArea_BaseFactory; return function FormlyFieldTextArea_Factory(t) { return (ɵFormlyFieldTextArea_BaseFactory || (ɵFormlyFieldTextArea_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldTextArea)))(t || FormlyFieldTextArea); }; }();\nFormlyFieldTextArea.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldTextArea, selectors: [[\"formly-field-ion-textarea\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 4, consts: [[3, \"formControl\", \"ionFormlyAttributes\", \"cols\", \"rows\"]], template: function FormlyFieldTextArea_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"ion-textarea\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formControl\", ctx.formControl)(\"ionFormlyAttributes\", ctx.field)(\"cols\", ctx.to.cols)(\"rows\", ctx.to.rows);\n    } }, directives: function () { return [ɵngcc2.IonTextarea, ɵngcc2.TextValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, IonFormlyAttributes]; }, styles: [\"[_nghost-%COMP%] { display: inherit; }\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFieldTextArea, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-ion-textarea',\n                template: `\n    <ion-textarea\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\"\n      [cols]=\"to.cols\"\n      [rows]=\"to.rows\">\n    </ion-textarea>\n  `,\n                styles: [':host { display: inherit; }']\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyWrapperFormField extends FieldWrapper {\n}\nFormlyWrapperFormField.ɵfac = /*@__PURE__*/ function () { let ɵFormlyWrapperFormField_BaseFactory; return function FormlyWrapperFormField_Factory(t) { return (ɵFormlyWrapperFormField_BaseFactory || (ɵFormlyWrapperFormField_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyWrapperFormField)))(t || FormlyWrapperFormField); }; }();\nFormlyWrapperFormField.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyWrapperFormField, selectors: [[\"formly-wrapper-ion-form-field\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 5, consts: [[3, \"lines\"], [3, \"position\"], [\"aria-hidden\", \"true\", 4, \"ngIf\"], [\"fieldComponent\", \"\"], [\"lines\", \"none\", 4, \"ngIf\"], [\"aria-hidden\", \"true\"], [\"lines\", \"none\"], [\"color\", \"danger\"], [3, \"field\"]], template: function FormlyWrapperFormField_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ion-item\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"ion-label\", 1);\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵtemplate(3, FormlyWrapperFormField_span_3_Template, 2, 0, \"span\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, FormlyWrapperFormField_ng_template_4_Template, 0, 0, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, FormlyWrapperFormField_ion_item_6_Template, 5, 1, \"ion-item\", 4);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"lines\", ctx.to.itemLines);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"position\", ctx.to.labelPosition);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.to.label, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.required && ctx.to.hideRequiredMarker !== true);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showError);\n    } }, directives: [ɵngcc2.IonItem, ɵngcc2.IonLabel, ɵngcc1.NgIf, ɵngcc2.IonText, ɵngcc4.ɵc], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyWrapperFormField, [{\n        type: Component,\n        args: [{\n                selector: 'formly-wrapper-ion-form-field',\n                template: `\n    <ion-item [lines]=\"to.itemLines\">\n      <ion-label [position]=\"to.labelPosition\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" aria-hidden=\"true\">*</span>\n      </ion-label>\n      <ng-template #fieldComponent></ng-template>\n    </ion-item>\n    <ion-item lines=\"none\" *ngIf=\"showError\">\n      <ion-label>\n        <ion-text color=\"danger\">\n          <p>\n            <formly-validation-message [field]=\"field\"></formly-validation-message>\n          </p>\n        </ion-text>\n      </ion-label>\n    </ion-item>\n  `\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst FIELD_TYPE_COMPONENTS = [\n    // types\n    FormlyFieldInput,\n    FormlyFieldCheckbox,\n    FormlyFieldDatetime,\n    FormlyFieldRadio,\n    FormlyFieldToggle,\n    FormlyFieldSelect,\n    FormlyFieldRange,\n    FormlyFieldTextArea,\n    // wrappers\n    FormlyWrapperFormField,\n];\n/** @type {?} */\nconst IONIC_FORMLY_CONFIG = {\n    types: [\n        {\n            name: 'input',\n            component: FormlyFieldInput,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'checkbox',\n            component: FormlyFieldCheckbox,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'datetime',\n            component: FormlyFieldDatetime,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'radio',\n            component: FormlyFieldRadio,\n            wrappers: [],\n        },\n        {\n            name: 'toggle',\n            component: FormlyFieldToggle,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'select',\n            component: FormlyFieldSelect,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'range',\n            component: FormlyFieldRange,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'textarea',\n            component: FormlyFieldTextArea,\n            wrappers: ['form-field'],\n        },\n    ],\n    wrappers: [\n        { name: 'form-field', component: FormlyWrapperFormField },\n    ],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass IonFormlyAttributes extends FormlyAttributes {\n    /**\n     * @param {?} element\n     * @param {?} value\n     * @return {?}\n     */\n    focusElement(element, value) {\n        if (!element.setFocus || !value) {\n            return;\n        }\n        if (!element.getInputElement()) {\n            setTimeout((/**\n             * @return {?}\n             */\n            () => element.setFocus()), 300);\n        }\n        else {\n            element.setFocus();\n        }\n    }\n}\nIonFormlyAttributes.ɵfac = /*@__PURE__*/ function () { let ɵIonFormlyAttributes_BaseFactory; return function IonFormlyAttributes_Factory(t) { return (ɵIonFormlyAttributes_BaseFactory || (ɵIonFormlyAttributes_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(IonFormlyAttributes)))(t || IonFormlyAttributes); }; }();\nIonFormlyAttributes.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: IonFormlyAttributes, selectors: [[\"\", \"ionFormlyAttributes\", \"\"]], hostBindings: function IonFormlyAttributes_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionFocus\", function IonFormlyAttributes_ionFocus_HostBindingHandler($event) { return ctx.onFocus($event); })(\"ionBlur\", function IonFormlyAttributes_ionBlur_HostBindingHandler($event) { return ctx.onBlur($event); })(\"ionChange\", function IonFormlyAttributes_ionChange_HostBindingHandler($event) { return ctx.onChange($event); });\n    } }, inputs: { field: [\"ionFormlyAttributes\", \"field\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nIonFormlyAttributes.propDecorators = {\n    field: [{ type: Input, args: ['ionFormlyAttributes',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonFormlyAttributes, [{\n        type: Directive,\n        args: [{\n                // tslint:disable-next-line\n                selector: '[ionFormlyAttributes]',\n                host: {\n                    '(ionFocus)': 'onFocus($event)',\n                    '(ionBlur)': 'onBlur($event)',\n                    '(ionChange)': 'onChange($event)'\n                }\n            }]\n    }], null, { field: [{\n            type: Input,\n            args: ['ionFormlyAttributes']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyIonicModule {\n}\nFormlyIonicModule.ɵfac = function FormlyIonicModule_Factory(t) { return new (t || FormlyIonicModule)(); };\nFormlyIonicModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FormlyIonicModule });\nFormlyIonicModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            IonicModule,\n            ReactiveFormsModule,\n            FormlySelectModule,\n            FormlyModule.forChild(IONIC_FORMLY_CONFIG),\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyIonicModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FIELD_TYPE_COMPONENTS, IonFormlyAttributes],\n                imports: [\n                    CommonModule,\n                    IonicModule,\n                    ReactiveFormsModule,\n                    FormlySelectModule,\n                    FormlyModule.forChild(IONIC_FORMLY_CONFIG),\n                ],\n                exports: [IonFormlyAttributes]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyIonicModule, { declarations: function () { return [FormlyFieldInput, FormlyFieldCheckbox, FormlyFieldDatetime, FormlyFieldRadio, FormlyFieldToggle, FormlyFieldSelect, FormlyFieldRange, FormlyFieldTextArea, FormlyWrapperFormField, IonFormlyAttributes]; }, imports: function () { return [CommonModule,\n        IonicModule,\n        ReactiveFormsModule,\n        FormlySelectModule, ɵngcc4.FormlyModule]; }, exports: function () { return [IonFormlyAttributes]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyIonicModule, FormlyFieldInput, FormlyFieldCheckbox, FormlyFieldDatetime, FormlyFieldRadio, FormlyFieldToggle, FormlyFieldSelect, FormlyFieldRange, FormlyFieldTextArea, FormlyWrapperFormField, IonFormlyAttributes as ɵc, FIELD_TYPE_COMPONENTS as ɵa, IONIC_FORMLY_CONFIG as ɵb };\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TestPage } from './test.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TestPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TestPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, NG_VALIDATORS } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TestPageRoutingModule } from './test-routing.module';\nimport {  ReactiveFormsModule} from '@angular/forms';\nimport { TestPage } from './test.page';\nimport {FormlyModule} from '@ngx-formly/core';\nimport {FormlyIonicModule} from '@ngx-formly/ionic';\nimport { DynamicFormsMaterialUIModule } from \"@ng-dynamic-forms/ui-material\";\nimport { DynamicFormsIonicUIModule } from '@ng-dynamic-forms/ui-ionic';\n//import { myCustomValidator } from './model';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TestPageRoutingModule,\n    ReactiveFormsModule, FormlyModule.forRoot(),\n    FormlyIonicModule ,\n    DynamicFormsMaterialUIModule,\n    DynamicFormsIonicUIModule\n  ],\n  declarations: [TestPage],\n  \n})\nexport class TestPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from '../api.service';\n\n\n@Component({\n  selector: 'app-test',\n  templateUrl: './test.page.html',\n  styleUrls: ['./test.page.scss'],\n})\nexport class TestPage implements OnInit {\n\n  public model = [];\n  content: string;\n\n  selectedFileBLOB = \"./assets/files/cert1.pdf\";\n  pdfData: string | ArrayBuffer;\n  constructor(\n    public auth : ApiService,\n  ) {\n\n  }\n\n  ngOnInit() {\n    this.auth.database.executeSql(\"select * from SyncLog\",[]).then(res=>{\n      for (let i = 0; i < parseInt(JSON.stringify(res.rows.length)); i++) {\n        this.model.push(res.rows.item(i));\n      }\n    }).catch(e=>{\n      this.auth.showToast(\"err\"+JSON.stringify(e));\n    })\n      \n  }\n\n  Clear(){\n    this.auth.database.executeSql(\"delete from SyncLog\",[]).then(res=>{\n      this.model= [];\n    })\n  }\n\n\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export default \"\\n\\n\\n\\n<ion-header>\\n    <ion-toolbar color=\\\"secondary\\\">\\n      <ion-buttons slot=\\\"start\\\">\\n        <ion-back-button></ion-back-button>\\n      </ion-buttons>\\n        <ion-title style=\\\"font-size: 16px;\\\">Sync Log</ion-title>\\n    </ion-toolbar>\\n  </ion-header>\\n  \\n  <ion-content>\\n    <ion-item>\\n        <ion-grid>\\n            <ion-row>\\n                <ion-col> JOBGUID </ion-col>\\n                <ion-col> Action Name </ion-col>\\n                <ion-col> Success/Error Message </ion-col>\\n            </ion-row>\\n        </ion-grid>\\n    </ion-item>\\n    <ion-item *ngFor='let list of model;'>\\n        <ion-grid>\\n            <ion-row>\\n                <ion-col>  {{list.JOBGUID}}  </ion-col>\\n                <ion-col>  {{list.ActionName}}   </ion-col>\\n                <ion-col>  {{list.Msg}}  </ion-col>\\n            </ion-row>\\n        </ion-grid>\\n    </ion-item>\\n  </ion-content>\\n  \\n  <ion-footer>\\n    <ion-button color=\\\"secondary\\\" expand=\\\"full\\\" (click)=\\\" Clear()\\\">Clear</ion-button>\\n  </ion-footer>\";"]}