{"version":3,"mappings":"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","names":["routes","path","component","_authorizationrequired_page__WEBPACK_IMPORTED_MODULE_0__","AuthorizationrequiredPageRoutingModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_3__","exports","AuthorizationrequiredPageModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_5__","_ionic_angular__WEBPACK_IMPORTED_MODULE_6__","_authorizationrequired_routing_module__WEBPACK_IMPORTED_MODULE_0__","declarations","_authorizationrequired_page__WEBPACK_IMPORTED_MODULE_1__","AuthorizationrequiredPage","auth","router","route","queryParams","subscribe","getCurrentNavigation","extras","state","data","getLocation","event","jobOutcome","detail","value","option","cameraOptions","quality","source","_capacitor_camera__WEBPACK_IMPORTED_MODULE_2__","height","width","resultType","allowEditing","galleryOptions","then","imageData","base64Image","base64String","updatePicture","base64","replace","err","form","date","getdateformatV2","split","showToast","String","parts","trim","labour","additionalNotes","console","log","haveData","database","executeSql","lat","res","JSON","stringify","navigate","e","_api_service__WEBPACK_IMPORTED_MODULE_3__","_angular_router__WEBPACK_IMPORTED_MODULE_4__","selector","template","__webpack_exports__"],"sources":["webpack:///src/app/authorizationrequired/authorizationrequired-routing.module.ts","webpack:///src/app/authorizationrequired/authorizationrequired.module.ts","webpack:///src/app/authorizationrequired/authorizationrequired.page.ts","webpack:///src/app/authorizationrequired/authorizationrequired.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthorizationrequiredPage } from './authorizationrequired.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthorizationrequiredPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthorizationrequiredPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AuthorizationrequiredPageRoutingModule } from './authorizationrequired-routing.module';\n\nimport { AuthorizationrequiredPage } from './authorizationrequired.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    AuthorizationrequiredPageRoutingModule\n  ],\n  declarations: [AuthorizationrequiredPage]\n})\nexport class AuthorizationrequiredPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Camera, CameraResultType, CameraSource, ImageOptions } from '@capacitor/camera';\nimport { Form, NgForm } from '@angular/forms';\nimport { ApiService } from '../api.service';\n\n\n//////authorization\n\n@Component({\n  selector: 'app-authorizationrequired',\n  templateUrl: './authorizationrequired.page.html',\n  styleUrls: ['./authorizationrequired.page.scss'],\n})\nexport class AuthorizationrequiredPage implements OnInit {\n\n  cameraOptions: ImageOptions;\n  galleryOptions: ImageOptions;\n  base64:string='';\n  updatePicture :any='';\n  jobOutcome:string='';\n  parts:string='';\n  labour:string='';\n  additional:string = \"Did you work on the appliance: Yes/No \\nVisual Inspection of appliance: Pass/Fail \\nBurner Pressure/Gas Rate: \\nSafety Device: Pass/Fail \\nInitial FGA: \\nFinal FGA: \\nFlue: Pass Fail \\nVentilation: Pass/Fail \\nDefects: \\nClassification: \\nAction Taken:\";\n  data:any[];\n  constructor(private auth:ApiService, private router:Router, private route:ActivatedRoute) { }\n\n  ngOnInit() {\n    this.route.queryParams.subscribe(params=>{\n      if(this.router.getCurrentNavigation().extras.state){\n        this.data   = this.router.getCurrentNavigation().extras.state.data;  \n        this.auth.getLocation();     \n      }\n    });\n  }\n\n  radiogroupChange(event){\n    this.jobOutcome = event.detail.value;\n  }\n  \n  \n  openCamera(option : string){\n    this.cameraOptions = {\n      quality: 20,\n      source :CameraSource.Camera,\n      height:360,\n      width:360,\n      resultType : CameraResultType.Base64,\n      allowEditing : false ,\n    }\n    this.galleryOptions = {\n      quality: 20,\n      source :CameraSource.Photos,\n      height:360,\n      width:360,\n      resultType : CameraResultType.Base64,\n      allowEditing : false ,\n    }\n    \n    Camera.getPhoto(option == 'cam' ? this.cameraOptions : this.galleryOptions).then((imageData) => {\n      // imageData is either a base64 encoded string or a file URI\n      // If it's base64 (DATA_URL):\n      let base64Image = 'data:image/jpeg;base64,' + imageData.base64String;\n      this.updatePicture = 'data:image/jpeg;base64,' + imageData.base64String;\n      this.base64 = imageData.base64String.replace(/\\s+/g, \"+\");\n     }, (err) => {\n      // Handle error\n     }); \n  }\n\n  authoizationSubmit(form:NgForm){\n\n    let date = this.auth.getdateformatV2().split(' ')[0];\n    if(this.jobOutcome==''){\n      this.auth.showToast('Job outcome cannot be empty.','danger');\n\n    }else{\n\n      if(String(form.value.parts).trim()==''){\n        this.auth.showToast('Parts cannot be empty.','danger');\n      }else{\n        \n        if(String(form.value.labour).trim()==''){\n          this.auth.showToast('Labour field cannot be empty.','danger');\n        }else{\n          \n          if(String(form.value.additionalNotes).trim()==''){\n            this.auth.showToast('Additional Notes cannot be empty.','danger');\n          }else{\n            \n           // if(this.updatePicture==''){\n           //   this.auth.showToast('Picture cannot be empty.');\n           // }else{\n              console.log('Else code..........' + this.data['JOBGUID']);\n              let haveData = \"yes\";\n              this.auth.database.executeSql('update authorization set OUTCOME=?,JOBNOTE=?,parts=?,labour=?,FILEBASE=?,OnDt=?,Latitude=?,Longitude=?,HaveData=? where JOBGUID=?', [this.jobOutcome, form.value.additionalNotes,this.parts,this.labour, this.base64, date, this.auth.lat, this.auth.long,haveData, this.data['JOBGUID']])\n                .then((res) => {\n                  console.log('#### authorization success ' + JSON.stringify(res));\n                  this.auth.database.executeSql(\"update  jobsstatus set  status=? where JOBGUID=? \",[ 'completed', this.data['JOBGUID']]).then((res)=>{\n                    this.router.navigate(['details']);\n                    this.auth.showToast(\"Success! Job Authorization has been completed.\",'success');\n                  }).catch((e)=>{  });\n                }).catch((e) => {\n                  console.log('### authorization Failure ' + JSON.stringify(e));\n                });\n           // }\n          }\n          }\n        }\n\n      }\n\n    }\n\n\n\n  }\n","export default \"<ion-header>\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n      <ion-title>Job Report</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <form #f='ngForm'  >\\n    <ion-card>\\n    <ion-radio-group allow-empty-selection='false' (ionChange)='radiogroupChange($event)'>\\n      \\n        <div class=\\\"ion-text-center ion-padding\\\">\\n          <b>Job Outcome</b>\\n        </div>\\n      \\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Banding</ion-label>\\n        <ion-radio slot=\\\"end\\\" color=\\\"primary\\\" value=\\\"Banding\\\"></ion-radio>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Part Not Available</ion-label>\\n        <ion-radio slot=\\\"end\\\" color=\\\"primary\\\" value=\\\"PartNotAvailable\\\"></ion-radio>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Ber</ion-label>\\n        <ion-radio slot=\\\"end\\\" color=\\\"primary\\\" value=\\\"Ber\\\"></ion-radio>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Review Case</ion-label>\\n        <ion-radio slot=\\\"end\\\" color=\\\"primary\\\" value=\\\"ReviewCase\\\"></ion-radio>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Insufficent Time To Complete</ion-label>\\n        <ion-radio slot=\\\"end\\\" color=\\\"primary\\\" value=\\\"InsufficentTimeToComplete\\\"></ion-radio>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Not Covered</ion-label>\\n        <ion-radio slot=\\\"end\\\" color=\\\"primary\\\" value=\\\"NotCovered\\\"></ion-radio>\\n      </ion-item>\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label>Out Of Skill Set</ion-label>\\n        <ion-radio slot=\\\"end\\\" color=\\\"primary\\\" value=\\\"OutOfSkillSet\\\"></ion-radio>\\n      </ion-item>\\n\\n    </ion-radio-group>\\n  </ion-card>\\n\\n    <ion-card>\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label position=\\\"floating\\\">Parts</ion-label>\\n        <ion-input type=\\\"text\\\"  \\n        [(ngModel)]=\\\"parts\\\" \\n        name='parts'\\n        required\\n        #partsCtrl='ngModel'></ion-input>\\n      </ion-item>\\n      <p *ngIf='!partsCtrl.valid && partsCtrl.touched'>    * Parts cannot be empty</p>\\n\\n\\n      <ion-item lines=\\\"full\\\">\\n        <ion-label position=\\\"floating\\\">Labour</ion-label>\\n        <ion-input type=\\\"text\\\"  \\n        [(ngModel)]=\\\"labour\\\" \\n        name='labour'\\n        required\\n        #labourCtrl='ngModel'></ion-input>\\n      </ion-item>\\n\\n      <p *ngIf='!labourCtrl.valid && labourCtrl.touched'>    * Labours field cannot be empty</p>\\n\\n    </ion-card>\\n\\n    <ion-card>\\n      <ion-item>\\n        <ion-textarea rows=\\\"12\\\" cols=\\\"20\\\" \\n        placeholder=\\\"Enter Additional Notes here...\\\"\\n        [(ngModel)]=\\\"additional\\\" \\n        name='additionalNotes'\\n        required\\n        #additionalNotesCtrl='ngModel'\\n        ></ion-textarea>\\n      </ion-item>\\n      <p *ngIf='!additionalNotesCtrl.valid && additionalNotesCtrl.touched'>    * Additional cannot be empty</p>\\n\\n      </ion-card>\\n      <ion-card>\\n        <ion-item lines=\\\"full\\\">\\n          <b>Upload Image</b>\\n          <ion-icon slot=\\\"end\\\" name=\\\"camera\\\"  (click)=\\\"openCamera('cam')\\\"></ion-icon>\\n          <ion-icon slot=\\\"end\\\" name=\\\"image\\\"  (click)=\\\"openCamera('gall')\\\"></ion-icon>\\n        </ion-item>\\n        <span *ngIf=\\\"updatePicture!= null\\\">\\n          <img [src]=\\\"updatePicture\\\" />\\n        </span>\\n      </ion-card>\\n    \\n    </form>\\n</ion-content>\\n\\n<ion-footer>\\n  <ion-button expand=\\\"full\\\" color=\\\"secondary\\\" [disabled]='!f.valid' (click)=\\\"authoizationSubmit(f)\\\">Submit</ion-button>\\n</ion-footer>\";"]}