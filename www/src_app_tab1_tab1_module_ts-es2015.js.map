{"version":3,"file":"src_app_tab1_tab1_module_ts-es2015.js","mappings":"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","sources":["./src/app/tab1/tab1-routing.module.ts","./src/app/tab1/tab1.module.ts","./src/app/tab1/tab1.page.ts","./src/app/tab1/tab1.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { Tab1Page } from './tab1.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: Tab1Page,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class Tab1PageRoutingModule {}\n","import { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Tab1Page } from './tab1.page';\nimport { ExploreContainerComponentModule } from '../explore-container/explore-container.module';\n\nimport { Tab1PageRoutingModule } from './tab1-routing.module';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    ExploreContainerComponentModule,\n    Tab1PageRoutingModule\n  ],\n  declarations: [Tab1Page]\n})\nexport class Tab1PageModule {}\n","import { Component } from \"@angular/core\";\nimport { ApiService } from \"../api.service\";\nimport { HttpParams, JsonpClientBackend } from \"@angular/common/http\";\nimport { Geolocation } from \"@ionic-native/geolocation/ngx\";\nimport { Router, NavigationExtras } from \"@angular/router\";\nimport {\n  NativeGeocoder,\n  NativeGeocoderResult,\n  NativeGeocoderOptions,\n} from \"@ionic-native/native-geocoder/ngx\";\nimport { AndroidPermissions } from '@awesome-cordova-plugins/android-permissions/ngx';\nimport { LocationAccuracy } from \"@ionic-native/location-accuracy/ngx\";\nimport { AlertController, LoadingController } from \"@ionic/angular\";\nimport { Storage } from \"@ionic/storage\";\nimport { ThemesService } from \"../themes.service\";\n\n@Component({\n  selector: \"app-tab1\",\n  templateUrl: \"tab1.page.html\",\n  styleUrls: [\"tab1.page.scss\"],\n})\n\nexport class Tab1Page {\n  public model = [];\n  //public modell: String[];\n  address = \"\";\n  index: any;\n  locationCoords: any;\n  timetest: any;\n  jobsListInsertId: any;\n  onRoutePromise: any;\n  // syncFlag :boolean = true;\n  jobfetchmsg: string = \"Please wait whilst the jobs are loading up. It may Take some time.\";\n  retryCount: number = 0;\n  isJobsfetched: boolean = false;\n\n  constructor(\n    private storage: Storage,\n    private nativeGeocoder: NativeGeocoder,\n    private router: Router,\n    private auth: ApiService,\n    private geolocation: Geolocation,\n    private androidPermission: AndroidPermissions,\n    private locationAccuracy: LocationAccuracy,\n    public alertCtrl: AlertController,\n    public themeService :ThemesService,\n    public loadingController: LoadingController\n  ) {\n    this.locationCoords = {\n      latitude: \"\",\n      longitude: \"\",\n      accuracy: \"\",\n      timestamp: \"\",\n    };\n    this.timetest = Date.now();\n  }\n\n  ngOnInit() {\n    this.auth.checkGPSPermission();\n    this.getLocation();\n    this.getJobs();\n    // START FOR SYNC LOG ONLY\n        this.auth.database.executeSql('create table if not exists SyncLog (JOBGUID  VARCHAR(32),  ActionName VARCHAR(32),  Msg varchar(32))', [])\n          .then((res) => {      \n            console.log('SyncLog created success ');\n          }).catch((e) => {            \n            console.log('SyncLog created failed ' + JSON.stringify(e));\n          })\n    // END FOR SYNC LOG ONLY\n\n  }\n\n  async showSyncAlert() {\n    const alert = await this.alertCtrl.create({\n      header: \"Are you sure?\",\n      message: \"You D\",\n      backdropDismiss: false,\n      buttons: [\n        {\n          text: \"Sync Now\",\n          handler: () => {\n            this.syncAllJobs();\n          },\n        },\n        {\n          text: \"Sync Later\",\n          handler: () => {},\n        },\n      ],\n    });\n    await alert.present();\n  }\n\n  syncClick(){\n    this.syncDataToServer();\n  }\n\n  async getJobs() {\n    let networkStatus = await this.auth.checkNetwork();\n        this.storage.get(\"datasyncstatus\").then((datasyncstatus) => {\n          // this.storage.get('loginCount').then((res)=>{\n          //   console.log(\"plan login count after login page \"+res);\n            if (datasyncstatus == \"novice\") {\n              console.log(\"Plan A\");          \n              // EXECUTE PLAN B put jobslist from API\n              if (networkStatus.connected) {\n                this.getJobsfromApi();\n              } else {\n                this.auth.showToast(\"Internet not connected. There was a problem with your network connection.\",'danger');\n              }\n            }else{\n              console.log(\"Plan B\");        \n              this.getJobListFromLocal();\n            }\n            // } else if ((datasyncstatus == \"mature\" && res > 1)||(datasyncstatus == \"novice\" && res > 1)) {\n            //   console.log(\"Plan B\");\n            //   //Execute Plan A\n            //   // sync data to server\n            //   // empty tables\n            //   // then execute Plan B\n            //   //this.syncDataToServer();\n            //   this.getJobListFromLocal();\n            // } else{\n            //   console.log(\"Plan C\");\n            //   if (networkStatus.connected) {\n            //     this.syncDataToServer();\n            //   } else {\n            //     this.auth.showToast(\"Internet not connected. There was a problem with your network connection.\",'danger');\n            //   }\n            // }\n            \n          // }).catch((e) => {\n          //   this.auth.showToast(\"LoginCount Error Somthing went wrong! unable to access ionic storage\" + e,'danger');\n          // });\n        }).catch((e) => {\n          this.auth.showToast(\"data Sync status Error Somthing went wrong! unable to access ionic storage\" + e,'danger');\n        });\n  }\n\n  segmentChanged(event: any) {}\n\n  gotoDetails(CLAIMGUID: any) {\n    this.auth.database\n      .executeSql(\"select * from jobslist where CLAIMGUID=?\", [CLAIMGUID])\n      .then((res) => {\n        console.log(\"dddd \"+JSON.stringify(res.rows.item(0)));\n        \n        let dat = {\n          CLAIMGUID: res.rows.item(0)[\"CLAIMGUID\"],\n          CLAIMRef: res.rows.item(0)[\"CLAIMRef\"],\n          CLAIMJOBID: res.rows.item(0)[\"CLAIMJOBID\"],\n          JOBGUID: res.rows.item(0)[\"JOBGUID\"],\n          RiskPostCode: res.rows.item(0)[\"RiskPostCode\"],\n          ProductName: res.rows.item(0)[\"ProductName\"],\n          ContactName: res.rows.item(0)[\"ContactName\"],\n          BookingDate: res.rows.item(0)[\"BookingDate\"],\n          AppointmentStartTime: res.rows.item(0)[\"AppointmentStartTime\"],\n          AppointmentEndTime: res.rows.item(0)[\"AppointmentEndTime\"],\n          BookingTimeType: res.rows.item(0)[\"BookingTimeType\"],\n          RiskAddress: res.rows.item(0)[\"RiskAddress\"],\n          phone: res.rows.item(0)[\"phone\"],\n          HomePhone: res.rows.item(0)[\"HomePhone\"],\n          ProductTypeId: res.rows.item(0)[\"ProductTypeId\"],\n          IsClaim: res.rows.item(0)[\"IsClaim\"],\n          BackgroundColour: res.rows.item(0)[\"BackgroundColour\"],\n          CLIENTNAME: res.rows.item(0)[\"CLIENTNAME\"],\n          ProductTypeName: res.rows.item(0)[\"ProductTypeName\"],\n          EngName : res.rows.item(0)[\"EngName\"]\n        };\n\n        const navigationExtras: NavigationExtras = {\n          state: {\n            data: dat,\n          },\n        };\n        //querychk\n        this.router.navigate([\"details\"], navigationExtras).then(res=>\n          console.log(res)\n          \n        ).catch(e=>console.log(e)\n        );\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  public getLocation() {\n    this.geolocation\n      .getCurrentPosition()\n      .then((resp) => {\n        let options: NativeGeocoderOptions = {\n          useLocale: true,\n          maxResults: 5,\n        };\n        this.nativeGeocoder\n          .reverseGeocode(resp.coords.latitude, resp.coords.longitude, options)\n          .then((result: NativeGeocoderResult[]) => {\n            const responseAddress = [];\n            for (const [key, value] of Object.entries(result[0])) {\n              if (value.length > 0) {\n                responseAddress.push(value);\n              }\n            }\n            responseAddress.reverse();\n            for (const value of responseAddress) {\n              this.address += value + \", \";\n            }\n            this.address = this.address.slice();\n            //  this.addressConfiramtion(this.address, lattitude, longitude);\n          })\n          .catch();\n      })\n      .catch((error) => {});\n  }\n\n  getJobListFromLocal(){\n    console.log(\"calling get job from local\");\n    this.auth.database\n    .executeSql(\"select * from jobslist ORDER BY RouteOrder ASC\", [])\n    .then((res) => {\n      for (\n        let i = 0;\n        i < parseInt(JSON.stringify(res.rows.length));\n        i++\n      ) {\n        this.model.push(res.rows.item(i));\n      }\n    })\n    .catch((e) => {\n      this.auth.showToast(\n        \"Error Fetching local jobs table \" + JSON.stringify(e),'danger'\n      );\n    });\n  }\n\n  // TODO\n  // getJobListFromAPI() {\n  //   this.auth.firmwareUpdateCheck().then(res=>{\n  //     console.log(\"Danish \"+res);      \n  //     this.auth.presentCustomLoader(this.jobfetchmsg);\n  //     this.storage\n  //       .get(\"enggid\")\n  //       .then((res) => {\n  //         this.auth.speedCheck().then((resp : string|number)=>{     \n  //           if (resp == \"TimeOut\") {           \n  //             this.auth.dismissLoading();\n  //             this.retryAlert(\"Need a Good internet connection. Please try again later after some time\",\"Connection TimeOut\");\n  //           } else {\n  //             if (resp > 1) {\n  //               let params = new HttpParams()\n  //               .set(\"EngineerID\", res)\n  //               .set(\"AppVersion\", \"2.1.8\");\n  //               console.log(\"DanishDev\");\n  //               this.auth\n  //               .httpSend(\"Service_GetJobsForAEngineer2\", params, \"post\")\n  //               .subscribe(\n  //                 (res) => {\n  //                   this.model = [];\n  //                   this.model = res;\n  //                   this.model = this.model.sort((a,b)=> {\n  //                     return a.RouteOrder - b.RouteOrder ;\n  //                   });\n  //                   if (this.model.length == 0) {\n  //                     this.auth.alert(\"No Jobs Found or You are not assigned to any job. Please Try again after some time.\");\n  //                     this.auth.dismissLoading();\n  //                   } else {\n  //                     this.insertJobsInDB();\n  //                   }\n  //                 },\n  //                 (err) => {\n  //                   this.retryAlert(\"Cannot get Jobs. There might be some web service issue. Please try again after some time.\",\"Web Service Issue\");\n  //                   setTimeout(() => {\n  //                     this.auth.dismissLoading();\n  //                   }, 300);              \n  //                 }\n  //               );\n  //             } else {              \n  //               this.auth.dismissLoading();\n  //               this.retryAlert(\"Unable to Sync/Get Jobs! There might be some issue in your Internet connection, either it is too slow or it is not connected. Please Try again later.\",\"Internet Connection Failed\")\n  //             }\n  //           }\n  //         }).catch(e=>{\n  //           this.auth.dismissLoading();           \n  //           this.retryAlert(\"There might be some issue please try again.\",\"Unknown Error\");\n  //         });\n  //       })\n  //       .catch((e) => {\n  //         this.auth.dismissLoading();\n  //         this.auth.showToast(\"Erro Cannot get Engg. Info, Please Logout and Login again\",'danger');\n  //       });\n  //   });\n  // }\n\n  getJobsfromApi() {   \n    this.auth.getLocation();\n      this.auth.presentCustomLoader(this.jobfetchmsg)\n      .then(res=>{\n        setTimeout(() => {\n          if(!this.isJobsfetched){\n            this.auth.dismissLoading();\n            console.log(\"### after 30 sec calling this\");\n            if(!this.model.length)\n            this.retryAlert('Somthing went wrong, Please re-sync.',\"Unable to Get Jobs\",`${3-this.retryCount} attempts Left`);\n          }\n        }, 30000);\n      })\n      this.storage\n        .get(\"enggid\")\n        .then((res) => {\n                let params = new HttpParams()\n                .set(\"EngineerID\", res)\n                .set(\"AppVersion\", \"2.2\");\n                console.log(\"DanishDev\");\n                this.auth\n                .httpSend(\"Service_GetJobsForAEngineer2\", params, \"post\")\n                .subscribe(\n                  (res) => {\n                    this.isJobsfetched = true;\n                    this.model = [];\n                    this.model = res;\n                    console.log(\"dddd \"+JSON.stringify(this.model));\n                    this.model = this.model.sort((a,b)=> {\n                      return a.RouteOrder - b.RouteOrder ;\n                    });\n                    console.log(\"### after soring in model and sorting\");\n                    \n                    if (this.model.length == 0) {\n                      this.auth.alert(\"No Jobs Found or You are not assigned to any job. Please Try again after some time.\");\n                      this.auth.dismissLoading();\n                      console.log(\"### no jobs found\");\n                    } else {\n                      console.log(\"### insert jobs in db calling\");\n                      this.insertJobsInDB();\n                    }\n                  },\n                  (err) => {\n                    this.retryAlert(\"Cannot get Jobs. There might be some web service issue. Please try again after some time.\",\"Web Service Issue\",`${3-this.retryCount} attempts Left`);\n                    setTimeout(() => {\n                      this.auth.dismissLoading();\n                    }, 300);              \n                  }\n                );\n              }).catch((e) => {\n                        this.auth.dismissLoading();\n                        this.retryAlert(\"Cannot get Engg Info, Please Logout and Login again\",\"Database Error\",`${3-this.retryCount} attempts Left`);\n                      });\n\n  }\n\n\n  async insertJobsInDB() {\n    let i = 1;\n    for (const el of this.model) {\n      console.log(`### updating ${i} of ${this.model.length} jobs`);\n      this.auth.setLoadingText(`Please wait whilst the jobs are loading up. Updating ${i} of ${this.model.length} jobs`);\n      await new Promise(resolve => {\n        this.auth.database.executeSql(\n          \"insert into jobslist (CLAIMJOBID,CLAIMGUID,JOBGUID,RiskPostCode,ProductName,ContactName,BookingDate,AppointmentStartTime,AppointmentEndTime,BookingTimeType,RiskAddress,phone,HomePhone,ProductTypeId,IsClaim,BackgroundColour,CLIENTNAME,ProductTypeName,ListType,CLAIMRef,RouteOrder,ParentJobGuid,EngName)  values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n          [\n            el.CLAIMJOBID,\n            el.CLAIMGUID,\n            el.JOBGUID,\n            el.RiskPostCode,\n            el.ProductName,\n            el.ContactName,\n            el.BookingDate,\n            el.AppointmentStartTime,\n            el.AppointmentEndTime,\n            el.BookingTimeType,\n            el.RiskAddress,\n            el.phone,\n            el.HomePhone,\n            el.ProductTypeId,\n            el.IsClaim,\n            el.BackgroundColour,\n            el.CLIENTNAME,\n            el.ProductTypeName,\n            el.ListType,\n            el.CLAIMRef,\n            el.RouteOrder,\n            el.ParentJobGuid,\n            el.EngName\n          ]\n        ).then(()=>{\n          resolve(\"\");\n          console.log(\"### jobslist inserted\");\n          }).catch(()=>{\n            resolve(\"\");\n          console.log(\"### jobslist not inserted\");\n          });\n      });\n      await new Promise(resolve => {\n        this.auth.database.executeSql(\"insert into jobsstatus (JOBGUID) values(?)\", [\n          el.JOBGUID\n        ]).then(()=>{\n          resolve(\"\");\n          console.log(\"### jobsstatus inserted\");\n          }).catch(()=>{\n            resolve(\"\");\n          console.log(\"### jobsstatus not inserted\");\n          });\n      });\n      await new Promise(resolve => {\n        this.auth.database.executeSql(\"insert into onroute (JOBGUID) values(?)\", [\n          el.JOBGUID\n        ]).then(()=>{\n          resolve(\"\");\n          console.log(\"### onroute inserted\");\n          }).catch(()=>{\n            resolve(\"\");\n          console.log(\"### onroute not inserted\");\n          });\n      });\n      await new Promise(resolve => {\n        this.auth.database.executeSql(\"insert into arrived (JOBGUID) values(?)\", [\n          el.JOBGUID\n        ]).then(()=>{\n          resolve(\"\");\n          console.log(\"### arrived inserted\");\n          }).catch(()=>{\n            resolve(\"\");\n          console.log(\"### arrived not inserted\");\n          });\n      });\n      await new Promise(resolve => {\n        this.auth.database.executeSql(\"insert into completeservice (JOBGUID, ParentJobGuid) values(?,?)\", [\n          el.JOBGUID,el.ParentJobGuid\n        ]).then(()=>{\n          resolve(\"\");\n          console.log(\"### completeservice inserted\");\n          }).catch(()=>{\n            resolve(\"\");\n          console.log(\"### completeservice not inserted\");\n          });\n      });\n      await new Promise(resolve => {\n        this.auth.database.executeSql(\n          \"insert into enggpics (JOBGUID,CLAIMGUID) values(?,?)\",\n          [el.JOBGUID,el.CLAIMGUID]\n        ).then(()=>{\n          resolve(\"\");\n          console.log(\"### enggpics inserted\");\n          }).catch(()=>{\n            resolve(\"\");\n          console.log(\"### enggpics not inserted\");\n          });\n      });\n      ++i;\n    }\n\n    console.log(\"### all the data are inserted if its new\");\n    this.auth.dismissLoading();\n\n    console.log(\"### Plan set satuts mature\");        \n    this.storage.set(\"datasyncstatus\", \"mature\");\n\n    // let counter = 1;\n    // for (let i = 0; i < this.model.length; i++) {\n    //   console.log(`### updating ${i+1} of ${this.model.length} jobs`);\n    //   // this.auth.insertDataIntoJobsListTable(\n    //     // this.model[i][\"CLAIMJOBID\"],\n    //     // this.model[i][\"CLAIMGUID\"],\n    //     // this.model[i][\"JOBGUID\"],\n    //     // this.model[i][\"RiskPostCode\"],\n    //     // this.model[i][\"ProductName\"],\n    //     // this.model[i][\"ContactName\"],\n    //     // this.model[i][\"BookingDate\"],\n    //     // this.model[i][\"AppointmentStartTime\"],\n    //     // this.model[i][\"AppointmentEndTime\"],\n    //     // this.model[i][\"BookingTimeType\"],\n    //     // this.model[i][\"RiskAddress\"],\n    //     // this.model[i][\"phone\"],\n    //     // this.model[i][\"ProductTypeId\"],\n    //     // this.model[i][\"IsClaim\"],\n    //     // this.model[i][\"BackgroundColour\"],\n    //     // this.model[i][\"CLIENTNAME\"],\n    //     // this.model[i][\"ProductTypeName\"],\n    //     // this.model[i][\"ListType\"],\n    //     // this.model[i][\"CLAIMRef\"],\n    //     // this.model[i][\"RouteOrder\"],\n    //     // this.model[i][\"ParentJobGuid\"],\n    //     // this.model[i][\"EngName\"],\n    //     // this.jobfetchmsg+` updating ${counter} of ${this.model.length} jobs`\n    //   // );\n    //   this.auth.database.executeSql(\n    //     \"insert into jobslist (CLAIMJOBID,CLAIMGUID,JOBGUID,RiskPostCode,ProductName,ContactName,BookingDate,AppointmentStartTime,AppointmentEndTime,BookingTimeType,RiskAddress,phone,ProductTypeId,IsClaim,BackgroundColour,CLIENTNAME,ProductTypeName,ListType,CLAIMRef,RouteOrder,ParentJobGuid,EngName)  values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\",\n    //     [\n    //       this.model[i][\"CLAIMJOBID\"],\n    //       this.model[i][\"CLAIMGUID\"],\n    //       this.model[i][\"JOBGUID\"],\n    //       this.model[i][\"RiskPostCode\"],\n    //       this.model[i][\"ProductName\"],\n    //       this.model[i][\"ContactName\"],\n    //       this.model[i][\"BookingDate\"],\n    //       this.model[i][\"AppointmentStartTime\"],\n    //       this.model[i][\"AppointmentEndTime\"],\n    //       this.model[i][\"BookingTimeType\"],\n    //       this.model[i][\"RiskAddress\"],\n    //       this.model[i][\"phone\"],\n    //       this.model[i][\"ProductTypeId\"],\n    //       this.model[i][\"IsClaim\"],\n    //       this.model[i][\"BackgroundColour\"],\n    //       this.model[i][\"CLIENTNAME\"],\n    //       this.model[i][\"ProductTypeName\"],\n    //       this.model[i][\"ListType\"],\n    //       this.model[i][\"CLAIMRef\"],\n    //       this.model[i][\"RouteOrder\"],\n    //       this.model[i][\"ParentJobGuid\"],\n    //       this.model[i][\"EngName\"],\n    //     ]\n    //   );\n    //   this.auth.database.executeSql(\"insert into jobsstatus (JOBGUID) values(?)\", [\n    //     this.model[i][\"JOBGUID\"],\n    //   ]);\n    //   this.auth.database.executeSql(\"insert into onroute (JOBGUID) values(?)\", [\n    //     this.model[i][\"JOBGUID\"],\n    //   ]);\n    //   this.auth.database.executeSql(\"insert into arrived (JOBGUID) values(?)\", [\n    //     this.model[i][\"JOBGUID\"],\n    //   ]);\n    //   this.auth.database.executeSql(\"insert into completeservice (JOBGUID, ParentJobGuid) values(?,?)\", [\n    //     this.model[i][\"JOBGUID\"],this.model[i][\"ParentJobGuid\"],\n    //   ]);\n    //   this.auth.database.executeSql(\n    //     \"insert into enggpics (JOBGUID,CLAIMGUID) values(?,?)\",\n    //     [ this.model[i][\"JOBGUID\"],,  this.model[i][\"CLAIMGUID\"],]\n    //   );\n\n    //   if (i == this.model.length - 1) {\n    //     console.log(\"### Plan set satuts mature\");        \n    //     this.storage.set(\"datasyncstatus\", \"mature\");\n    //     // setTimeout(() => {\n    //     //   this.auth.dismissLoading();\n    //     //   this.auth.dismissLoading();\n    //     // }, 5000);\n    //   }\n    //   // counter++;\n    // }\n  }\n\n  async syncDataToServer() {\n    this.auth.firmwareUpdateCheck().then(res=>{\n      console.log(\"Danish \"+res);      \n      this.auth.presentCustomLoader(\"Syncing Data. It may take some time. Please wait... Thank you\").then(()=>{\n        this.auth.addProgressBar();\n      })\n      this.auth.speedCheck().then((res : string|number)=>{     \n        // this.auth.showToast(res)\n        if (res == \"TimeOut\") {\n          this.auth.setProgressBar(\"100\")\n          this.auth.dismissLoading();\n          this.auth.alert(\"Need a Good internet connection. Please try again later after some time\",\"Connection TimeOut\")\n        } else {\n          if (res > 0.5) {\n            this.syncAllJobs();\n          } else {\n            this.auth.setProgressBar(\"100\")\n            this.auth.dismissLoading();\n            this.auth.alert(\"Unable to Sync/Get Jobs! Your Internet connection is too slow Please Try again later.\",\"Poor Internet Connection\")\n          }\n        }\n      }).catch(e=>{\n        this.auth.dismissLoading();\n        this.auth.alert(JSON.stringify(e));\n      });\n    });\n  }\n\n  syncAllJobs(){\n    this.syncOnRoute()\n      .then((res) => {\n        this.syncArrived()\n          .then((res) => {\n            this.syncAbandon()\n              .then((res) => {\n                this.syncAuthorization()\n                  .then((res) => {\n                    this.syncCertificate()\n                      .then((res) => {\n                        this.syncNewAppliance()\n                          .then((res) => {\n                            this.syncCompleteService1()\n                              .then((res) => {\n                                this.syncboilerInstallation()\n                                  .then((res) => {\n                                    this.syncBoilerInstallationPics()\n                                      .then((res) => {\n                                        this.syncBoilerInstallationSign()\n                                          .then((res) => {\n                                            this.syncCompleteClaim1()\n                                              .then((res) => {\n                                                this.syncEnggPic()\n                                                  .then((res) => {\n                                                    this.syncSiteSurvey()\n                                                      .then((res) => {\n                                                        this.syncSurveyPics()\n                                                          .then((res) => {\n                                                            this.syncSurveySign()\n                                                              .then((res) => {\n                                                                this.completesync();\n\n                                                                // if(this.syncFlag){\n                                                                //   this.resync();\n                                                                // } else {\n                                                                //   this.auth.database.executeSql('select * from errorlog',[]).then(res =>{\n                                                                //     if (res.rows.length > 0) {\n                                                                //       // this.auth.sendErrorLog();\n                                                                //       // this.auth.SendErrorEmail();\n                                                                //       this.completesync();\n                                                                //     } else {\n                                                                //       this.completesync();\n                                                                //     }  \n                                                                //   }); \n                                                                // }                                                                                                                                                                                                                                                                                                  \n                                                              })\n                                                              .catch((e) => {\n                                                                this.auth.showToast(\n                                                                  \"syncSurveySign Error\" +\n                                                                    JSON.stringify(\n                                                                      e\n                                                                    ),'danger'\n                                                                );\n                                                              });\n                                                          })\n                                                          .catch((e) => {\n                                                            this.auth.showToast(\n                                                              \"syncSurveyPics Error\" +\n                                                                JSON.stringify(\n                                                                  e\n                                                                ),'danger'\n                                                            );\n                                                          });\n                                                      })\n                                                      .catch((e) => {\n                                                        this.auth.showToast(\n                                                          \"syncSiteSurvey Error\" +\n                                                            JSON.stringify(e),'danger'\n                                                        );\n                                                      });\n                                                  })\n                                                  .catch((e) => {\n                                                    this.auth.showToast(\n                                                      \"syncEnggPic Sync Error\" +\n                                                        JSON.stringify(e),'danger'\n                                                    );\n                                                  });\n                                              })\n                                              .catch((e) => {\n                                                this.auth.showToast(\n                                                  \"Complete claim Sync Error\" +\n                                                    JSON.stringify(e),'danger'\n                                                );\n                                              });\n                                          })\n                                          .catch((e) => {\n                                            this.auth.showToast(\n                                              \"Boiler installation sign Sync Error\" +\n                                                JSON.stringify(e),'danger'\n                                            );\n                                          });\n                                      })\n                                      .catch((e) => {\n                                        this.auth.showToast(\n                                          \"Boiler installation pics Sync Error\" +\n                                            JSON.stringify(e),'danger'\n                                        );\n                                      });\n                                  })\n                                  .catch((e) => {\n                                    this.auth.showToast(\n                                      \"Boiler Installation Sync Error\" +\n                                        JSON.stringify(e),'danger'\n                                    );\n                                  });\n                                //    }).catch((e) => {   this.auth.showToast('Make Certificate Sync Error' + JSON.stringify(e)) });\n                              })\n                              .catch((e) => {\n                                this.auth.showToast(\n                                  \"Complete Service Sync Error\" +\n                                    JSON.stringify(e),'danger'\n                                );\n                              });\n                          })\n                          .catch((e) => {\n                            this.auth.showToast(\n                              \"New Appliance Sync Error\" + JSON.stringify(e),'danger'\n                            );\n                          });\n                      })\n                      .catch((e) => {\n                        this.auth.showToast(\n                          \"certificate Sync Error\" + JSON.stringify(e),'danger'\n                        );\n                      });\n                  })\n                  .catch((e) => {\n                    this.auth.showToast(\n                      \"Authoraization Sync Error\" + JSON.stringify(e),'danger'\n                    );\n                  });\n              })\n              .catch((e) => {\n                this.auth.showToast(\"Abandon Sync Error\" + JSON.stringify(e),'danger');\n              });\n          })\n          .catch((e) => {\n            this.auth.showToast(\"OnArrived Sync Error\" + JSON.stringify(e),'danger');\n          });\n      })\n      .catch((e) => {\n        this.auth.showToast(\"OnRoute Sync Error\" + JSON.stringify(e),'danger');\n      });\n      // setTimeout(() => {\n      //   this.auth.dismissLoading();\n      //   this.auth.alert(\"Please check you network setting and try again.\",\"Connection Timed out\")\n      // }, 180000);\n  }\n  completesync() {\n    this.auth.setProgressBar(\"100\");\n    this.auth.dismissLoading();\n    this.auth.emptyAllTables();\n    this.getJobsfromApi();\n    // this.syncFlag = true;\n  }\n  resync() {\n    this.syncAllJobs();\n    // this.syncFlag = false;\n  }\n\n  syncOnRoute() {\n    this.auth.setLoadingText(\"Syncing OnRoute. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"6.6\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from onroute where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"CLAIMGUID\", res.rows.item(i)[\"CLAIMGUID\"])\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"Latitude\", res.rows.item(i)[\"Latitude\"])\n                .set(\"Longitude\", res.rows.item(i)[\"Longitude\"])\n                .set(\"OnRouteDT\", res.rows.item(i)[\"OnRouteDT\"])\n                .set(\"Desc\", res.rows.item(i)[\"OnRouteDT\"])\n                .set(\"title\", \"On Route\");\n              this.auth\n                .httpSend(\"Service_SaveOnRoute\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"OnRoute Success\", msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    //deleting syned data from database\n                    this.auth.database.executeSql(\n                      \"delete from onroute where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n\n                    if (array.length == res.rows.length) {\n                      resolve(\"onroute complete\");\n                    }                    \n                  },\n                  (err) => {                    \n                    // Start ErrorLog\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"OnRoute Failed\", err[\"Msg\"]);\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_SaveOnRoute\";\n                    // console.log(res.rows.item(i)[\"CLAIMGUID\"]);\n                    // let Descp = \n                    //   {\n                    //     CLAIMGUID : res.rows.item(i)[\"CLAIMGUID\"],\n                    //     JOBGUID : res.rows.item(i)[\"JOBGUID\"],\n                    //     Latitude : res.rows.item(i)[\"Latitude\"],\n                    //     Longitude : res.rows.item(i)[\"Longitude\"],\n                    //     OnRouteDT : res.rows.item(i)[\"OnRouteDT\"],\n                    //     Desc : res.rows.item(i)[\"OnRouteDT\"],\n                    //     title : \"On Route\"\n                    // }\n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message));\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  }\n                );\n            } // end of for loop\n          } else {\n            resolve(\"onroute complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # on route failed\" + JSON.stringify(e));\n        });\n    });\n  }\n\n  syncArrived() {\n    this.auth.setLoadingText(\"Syncing On Arrived. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"13.3\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from arrived where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"Latitude\", res.rows.item(i)[\"Latitude\"])\n                .set(\"Longitude\", res.rows.item(i)[\"Longitude\"])\n                .set(\"ArrAtJobDT\", res.rows.item(i)[\"OnRouteDT\"])\n                .set(\"Desc\", res.rows.item(i)[\"OnRouteDT\"])\n                .set(\"title\", \"Arrived at job\");\n              this.auth\n                .httpSend(\"Service_SaveArrivedAtJob\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"ArrivedAtJob Success\", msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    //deleting syned data from database\n                    this.auth.database.executeSql(\n                      \"delete from arrived where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n\n                    if (array.length == res.rows.length) {\n                      resolve(\"OnArrive complete\");\n                    }\n                  },\n                  (err) => {\n                    // Start ErrorLog\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"ArrivedAtJob Failed\", err[\"Msg\"]);\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_SaveArrivedAtJob\";\n                    // let Descp = \n                    //   {\n                    //     JOBGUID: res.rows.item(i)[\"JOBGUID\"],\n                    //     Latitude: res.rows.item(i)[\"Latitude\"],\n                    //     Longitude: res.rows.item(i)[\"Longitude\"],\n                    //     ArrAtJobDT: res.rows.item(i)[\"OnRouteDT\"],\n                    //     Desc: res.rows.item(i)[\"OnRouteDT\"],\n                    //     title: \"Arrived at job\"\n                    // }                      \n                    // ;\n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog                  \n                    array.push(err[\"header\"]);\n                    this.auth.showToast(err.message)\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  }\n                );\n            } // end of for loop\n          } else {\n            resolve(\"OnArrive complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # on arrived complete\");\n        });\n    });\n  }\n\n  syncAbandon() {\n    this.auth.setLoadingText(\"Syncing Abandon Call Out. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"20\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from abandon where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"OUTCOME\", res.rows.item(i)[\"OUTCOME\"])\n                .set(\"PARTS\", res.rows.item(i)[\"parts\"])\n                .set(\"LABOUR\", res.rows.item(i)[\"labour\"])\n                .set(\"JOBNOTE\", res.rows.item(i)[\"JOBNOTE\"])\n                .set(\"FILEBASE\", res.rows.item(i)[\"FILEBASE\"])\n                .set(\"FILENAME\", res.rows.item(i)[\"FILENAME\"])\n                .set(\"FORACTION\", \"AbandonCallOut\")\n                .set(\"OnDt\", res.rows.item(i)[\"OnDt\"])\n                .set(\"Latitude\", res.rows.item(i)[\"Latitude\"])\n                .set(\"Longitude\", res.rows.item(i)[\"Longitude\"])\n                .set(\"ComboClaimJobId\", \"\")\n                .set(\"ComboIsCompleted\", \"\")\n                .set(\"CantCompleteReason\", \"\");\n              this.auth\n                .httpSend(\"Service_AllEngineerActionsNew\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"Abandoned Success\", msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    //deleting syned data from database\n                    this.auth.database.executeSql(\n                      \"delete from abandon where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n\n                    if (array.length == res.rows.length) {\n                      resolve(\"Abandon complete\");\n                    }\n                  },\n                  (err) => {\n                    // Start ErrorLog\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"Abandoned Failed\", err[\"Msg\"]);\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_AllEngineerActionsNew\";\n                    // let Descp = \n                    //   {\n                    //     JOBGUID: res.rows.item(i)[\"JOBGUID\"],\n                    //     OUTCOME: res.rows.item(i)[\"OUTCOME\"],                              \n                    //     PARTS: res.rows.item(i)[\"parts\"],\n                    //     LABOUR: res.rows.item(i)[\"labour\"],\n                    //     JOBNOTE: res.rows.item(i)[\"JOBNOTE\"],\n                    //     FILEBASE: res.rows.item(i)[\"FILEBASE\"],\n                    //     FILENAME: res.rows.item(i)[\"FILENAME\"],\n                    //     FORACTION: \"AbandonCallOut\",\n                    //     OnDt: res.rows.item(i)[\"OnDt\"], \n                    //     Latitude: res.rows.item(i)[\"Latitude\"],\n                    //     Longitude: res.rows.item(i)[\"Longitude\"],\n                    //     ComboClaimJobId: \"\",\n                    //     ComboIsCompleted: \"\",\n                    //     CantCompleteReason: \"\"\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog                    \n                    array.push(err[\"header\"]);\n                    this.auth.showToast(JSON.stringify(err.message))\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  }\n                );\n            }\n          } else {\n            resolve(\"Abandon complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # on Abandon failed\");\n        });\n    });\n  }\n\n  syncAuthorization() {\n    this.auth.setLoadingText(\"Syncing Authorization. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"26.6\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from authorization where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"OUTCOME\", res.rows.item(i)[\"OUTCOME\"])\n                .set(\"PARTS\", res.rows.item(i)[\"parts\"])\n                .set(\"LABOUR\", res.rows.item(i)[\"labour\"])\n                .set(\"JOBNOTE\", res.rows.item(i)[\"JOBNOTE\"])\n                .set(\"FILEBASE\", res.rows.item(i)[\"FILEBASE\"])\n                .set(\"FILENAME\", res.rows.item(i)[\"FILENAME\"])\n                .set(\"FORACTION\", \"AuthorisationRequired\")\n                .set(\"OnDt\", res.rows.item(i)[\"OnDt\"])\n                .set(\"Latitude\", res.rows.item(i)[\"Latitude\"])\n                .set(\"Longitude\", res.rows.item(i)[\"Longitude\"])\n                .set(\"ComboClaimJobId\", \"\")\n                .set(\"ComboIsCompleted\", \"\")\n                .set(\"CantCompleteReason\", \"\");\n              this.auth\n                .httpSend(\"Service_AllEngineerActionsNew\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"Authorization Success\", msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    //deleting syned data from database\n                    this.auth.database.executeSql(\n                      \"delete from authorization where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n\n                    if (array.length == res.rows.length) {\n                      resolve(\"authorization complete\");\n                    }\n                  },\n                  (err) => {\n                    // Start ErrorLog\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"Authorization Failed\", err[\"Msg\"]);\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_AllEngineerActionsNew\";\n                    // let Descp = \n                    //   {\n                    //     JOBGUID: res.rows.item(i)[\"JOBGUID\"],\n                    //     OUTCOME: res.rows.item(i)[\"OUTCOME\"],                              \n                    //     PARTS: res.rows.item(i)[\"parts\"],\n                    //     LABOUR: res.rows.item(i)[\"labour\"],\n                    //     JOBNOTE: res.rows.item(i)[\"JOBNOTE\"],\n                    //     FILEBASE: res.rows.item(i)[\"FILEBASE\"],\n                    //     FILENAME: res.rows.item(i)[\"FILENAME\"],\n                    //     FORACTION: \"AuthorisationRequired\",\n                    //     OnDt: res.rows.item(i)[\"OnDt\"], \n                    //     Latitude: res.rows.item(i)[\"Latitude\"],\n                    //     Longitude: res.rows.item(i)[\"Longitude\"],\n                    //     ComboClaimJobId: \"\",\n                    //     ComboIsCompleted: \"\",\n                    //     CantCompleteReason: \"\"\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog       \n                    this.auth.showToast(JSON.stringify(err.message))             \n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  }\n                );\n            }\n          } else {\n            resolve(\"authorization complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # on authorization failed\");\n        });\n    });\n  }\n\n  syncNewAppliance() {\n    this.auth.setLoadingText(\"Syncing Appliances. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"40\");\n    return new Promise((resolve, reject) => {\n      resolve('resolved')\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from newappliance where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"AppType\", res.rows.item(i)[\"AppType\"])\n                .set(\"Make\", res.rows.item(i)[\"Make\"])\n                .set(\"Model\", res.rows.item(i)[\"Model\"])\n                .set(\"BType\", res.rows.item(i)[\"BType\"])\n                .set(\"Loc\", res.rows.item(i)[\"Loc\"])\n                .set(\"Flue\", res.rows.item(i)[\"Flue\"])\n                .set(\"OwnedBy\", res.rows.item(i)[\"OwnedBy\"])\n                .set(\"Inspected\", res.rows.item(i)[\"Inspected\"])\n                .set(\"ZeroGov\", res.rows.item(i)[\"ZeroGov\"])\n                .set(\"OPU\", res.rows.item(i)[\"OPU\"])\n                .set(\"OptPrs\", res.rows.item(i)[\"OptPrs\"])\n                .set(\"OSD\", res.rows.item(i)[\"OSD\"])\n                .set(\"VS\", res.rows.item(i)[\"VS\"])\n                .set(\"VCF\", res.rows.item(i)[\"VCF\"])\n                .set(\"FOC\", res.rows.item(i)[\"FOC\"])\n                .set(\"ComRead\", res.rows.item(i)[\"ComRead\"])\n                .set(\"HRatio\", res.rows.item(i)[\"HRatio\"])\n                .set(\"HCO2Val\", res.rows.item(i)[\"HCO2Val\"])\n                .set(\"HCOPPM\", res.rows.item(i)[\"HCOPPM\"])\n                .set(\"LRatio\", res.rows.item(i)[\"LRatio\"])\n                .set(\"LCO2Val\", res.rows.item(i)[\"LCO2Val\"])\n                .set(\"LCOPPM\", res.rows.item(i)[\"LCOPPM\"])\n                .set(\"STU\", res.rows.item(i)[\"STU\"])\n                .set(\"DefId\", res.rows.item(i)[\"DefId\"])\n                .set(\"GIUSP\", res.rows.item(i)[\"GIUSP\"])\n                .set(\"WarAdRec\", res.rows.item(i)[\"WarAdRec\"])\n                .set(\"RemAc\", res.rows.item(i)[\"RemAc\"])\n                .set(\"IsDelete\", res.rows.item(i)[\"IsDelete\"]);\n              this.auth\n                .httpSend(\"Service_ApplianceNew\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"ApplianceNew Success\", msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    this.auth.database.executeSql(\n                      \"delete from newappliance where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    if (array.length == res.rows.length) {\n                      resolve(\"newappliance complete\");\n                    }\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"ApplianceNew Failed\", err[\"Msg\"]);\n                    // Start ErrorLog\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_ApplianceNew\";\n                    // let Descp = \n                    //   {\n                    //     JOBGUID: res.rows.item(i)[\"JOBGUID\"],\n                    //     AppType: res.rows.item(i)[\"AppType\"],\n                    //     Make: res.rows.item(i)[\"Make\"],\n                    //     Model: res.rows.item(i)[\"Model\"],\n                    //     BType: res.rows.item(i)[\"BType\"],\n                    //     Loc: res.rows.item(i)[\"Loc\"],\n                    //     Flue: res.rows.item(i)[\"Flue\"],\n                    //     OwnedBy: res.rows.item(i)[\"OwnedBy\"],\n                    //     Inspected: res.rows.item(i)[\"Inspected\"],\n                    //     ZeroGov: res.rows.item(i)[\"ZeroGov\"],\n                    //     OPU: res.rows.item(i)[\"OPU\"],\n                    //     OptPrs: res.rows.item(i)[\"OptPrs\"],\n                    //     OSD: res.rows.item(i)[\"OSD\"],\n                    //     VS: res.rows.item(i)[\"VS\"],\n                    //     VCF: res.rows.item(i)[\"VCF\"],\n                    //     FOC: res.rows.item(i)[\"FOC\"],\n                    //     ComRead: res.rows.item(i)[\"ComRead\"],\n                    //     HRatio: res.rows.item(i)[\"HRatio\"],\n                    //     HCO2Val: res.rows.item(i)[\"HCO2Val\"],\n                    //     HCOPPM: res.rows.item(i)[\"HCOPPM\"],\n                    //     LRatio: res.rows.item(i)[\"LRatio\"],\n                    //     LCO2Val: res.rows.item(i)[\"LCO2Val\"],\n                    //     LCOPPM: res.rows.item(i)[\"LCOPPM\"],\n                    //     STU: res.rows.item(i)[\"STU\"],\n                    //     DefId: res.rows.item(i)[\"DefId\"],\n                    //     GIUSP: res.rows.item(i)[\"GIUSP\"],\n                    //     WarAdRec: res.rows.item(i)[\"WarAdRec\"],\n                    //     RemAc: res.rows.item(i)[\"RemAc\"],\n                    //     IsDelete: res.rows.item(i)[\"IsDelete\"],\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"newappliance complete\");\n                    }\n                  }\n                );\n            } // end of for loop\n          } else {\n            resolve(\"newappliance complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # on newappliance failed\");\n        });\n    });\n  }\n\n  syncCertificate() {\n    this.auth.setLoadingText(\"Syncing Certificates. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"33.2\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from certificate where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          console.log(\"dddd \"+JSON.stringify(res.rows.item(0)));\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"DetailsWork\", res.rows.item(i)[\"DetailsWork\"])\n                .set(\"NoOfAppTested\", res.rows.item(i)[\"NoOfAppTested\"])\n                .set(\"NextDueDt\", res.rows.item(i)[\"NextDueDt\"])\n                .set(\"OGIns\", res.rows.item(i)[\"OGIns\"])\n                .set(\"OGSup\", res.rows.item(i)[\"OGSup\"])\n                .set(\"ECon\", res.rows.item(i)[\"ECon\"])\n                .set(\"OGTight\", res.rows.item(i)[\"OGTight\"])\n                .set(\"COFitted\", res.rows.item(i)[\"COFitted\"])\n                .set(\"COTested\", res.rows.item(i)[\"COTested\"])\n                .set(\"EquiBond\", res.rows.item(i)[\"EquiBond\"])\n                .set(\"SigImage\", res.rows.item(i)[\"SigImage\"])\n                .set(\"SigRec\", res.rows.item(i)[\"SigRec\"])\n                .set(\"FlueChkDt\", res.rows.item(i)[\"FlueChkDt\"])\n                .set(\"ClaimJobId\", res.rows.item(i)[\"CLAIMJOBID\"])\n                .set(\"ParentJobGuid\", res.rows.item(i)[\"ParentJobGuid\"]);\n              this.auth\n                .httpSend(\"Service_Certificate\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    console.log('#### cert succ'+JSON.stringify(msg));                    \n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"certificate Success\", msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    this.auth.database.executeSql(\n                      \"delete from certificate where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    if (array.length == res.rows.length) {\n                      resolve(\"certificate complete\");\n                    }\n                  },\n                  (err) => {\n                    console.log('#### cert err'+JSON.stringify(err));     \n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"certificate Failed\", JSON.stringify(err));\n                    // Start ErrorLog\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_Certificate\";\n                    // let Descp = \n                    //   {\n                    //     JOBGUID: res.rows.item(i)[\"JOBGUID\"],\n                    //     DetailsWork: res.rows.item(i)[\"DetailsWork\"],\n                    //     NoOfAppTested: res.rows.item(i)[\"NoOfAppTested\"],\n                    //     NextDueDt: res.rows.item(i)[\"NextDueDt\"],\n                    //     OGIns: res.rows.item(i)[\"OGIns\"],\n                    //     OGSup: res.rows.item(i)[\"OGSup\"],\n                    //     ECon: res.rows.item(i)[\"ECon\"],\n                    //     OGTight: res.rows.item(i)[\"OGTight\"],\n                    //     COFitted: res.rows.item(i)[\"COFitted\"],\n                    //     COTested: res.rows.item(i)[\"COTested\"],\n                    //     EquiBond: res.rows.item(i)[\"EquiBond\"],\n                    //     SigImage: res.rows.item(i)[\"SigImage\"],\n                    //     SigRec: res.rows.item(i)[\"SigRec\"],\n                    //     FlueChkDt: res.rows.item(i)[\"FlueChkDt\"],\n                    //     ClaimJobId: res.rows.item(i)[\"ClaimJobId\"],\n                    //     ParentJobGuid: \"\"\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"certificate complete\");\n                    }\n                  },()=>{\n\n                  }\n                );\n            } // end of for loop\n          } else {\n            resolve(\"certificate complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # on certificate failed\");\n        });\n      resolve(\"certificate complete\");\n    });\n  }\n\n  syncCompleteClaim1() {\n    this.auth.setLoadingText(\"Syncing Claims Completed It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"73\");\n    let array = [];\n    return new Promise((resolve, reject) => {\n      this.auth.database\n        .executeSql(\"select * from completeclaim where HaveData=?\", [\"yes\"])\n        .then((completeClaimRes) => {\n          if (completeClaimRes.rows.length > 0) {\n            //For Loop Start\n            for (let i = 0; i < completeClaimRes.rows.length; i++) {\n              if (completeClaimRes.rows.item(i)[\"BackgroundColour\"] == \"#20B2AA\") {\n                // check for the combo job\n                console.log(\"combo check for the combo job \");                \n                this.auth.database\n                  .executeSql(\n                    \"select * from completeservice where ParentJobGuid=?\",\n                    [completeClaimRes.rows.item(i)[\"JOBGUID\"]]\n                  )\n                  .then((serviceResG) => {\n                    if (serviceResG.rows.item(0)[\"HaveData\"] == \"combo\") {\n                      // check is  service also completed then sync BOTH claim and service\n                      console.log(\"combo check is  service also completed then sync BOTH claim and service\");  \n                      let params = new HttpParams() //Sync Claim\n                        .set(\"JOBGUID\", completeClaimRes.rows.item(i)[\"JOBGUID\"])\n                        .set(\"OUTCOME\", completeClaimRes.rows.item(i)[\"OUTCOME\"])\n                        .set(\"PARTS\", completeClaimRes.rows.item(i)[\"PARTS\"])\n                        .set(\"LABOUR\", completeClaimRes.rows.item(i)[\"LABOUR\"])\n                        .set(\"JOBNOTE\", completeClaimRes.rows.item(i)[\"JOBNOTE\"])\n                        .set(\"FILEBASE\", completeClaimRes.rows.item(i)[\"FILEBASE\"])\n                        .set(\"FILENAME\", completeClaimRes.rows.item(i)[\"FILENAME\"])\n                        .set(\"FORACTION\", \"Claim\")\n                        .set(\"OnDt\", completeClaimRes.rows.item(i)[\"OnDt\"])\n                        .set(\"Latitude\", completeClaimRes.rows.item(i)[\"Latitude\"])\n                        .set(\"Longitude\", completeClaimRes.rows.item(i)[\"Longitude\"])\n                        .set(\"ComboClaimJobId\", completeClaimRes.rows.item(i)[\"ComboClaimJobId\"])\n                        .set(\"ComboIsCompleted\", \"true\")\n                        .set(\"CantCompleteReason\",serviceResG.rows.item(i)[\"CantCompleteReason\"]);\n                      this.auth.httpSend(\"Service_AllEngineerActionsNew\",params,\"post\")\n                        .subscribe(\n                          (claimSyncResponse) => {                            \n                            console.log(\"combo claim synced\");  \n                            // this.auth.insertIntoSyncLog(completeClaimRes.rows.item(i)['JOBGUID'],  \"Calim Success\", claimSyncResponse[\"Msg\"]);\n                            this.auth.database.executeSql(\n                              \"delete from completeclaim where JOBGUID=?\",\n                              [completeClaimRes.rows.item(i)[\"JOBGUID\"]]\n                            );\n                            // Sync Service\n                            let params = new HttpParams()\n                              .set(\"JOBGUID\",serviceResG.rows.item(i)[\"JOBGUID\"])\n                              .set(\"OUTCOME\",serviceResG.rows.item(i)[\"OUTCOME\"])\n                              .set(\"PARTS\", serviceResG.rows.item(i)[\"PARTS\"])\n                              .set(\"LABOUR\", serviceResG.rows.item(i)[\"LABOUR\"])\n                              .set(\"JOBNOTE\",serviceResG.rows.item(i)[\"JOBNOTE\"])\n                              .set(\"FILEBASE\",serviceResG.rows.item(i)[\"FILEBASE\"])\n                              .set(\"FILENAME\",serviceResG.rows.item(i)[\"FILENAME\"])\n                              .set(\"FORACTION\", \"Service\")\n                              .set(\"OnDt\", serviceResG.rows.item(i)[\"OnDt\"])\n                              .set( \"Latitude\",completeClaimRes.rows.item(i)[\"Latitude\"])\n                              .set(\"Longitude\",completeClaimRes.rows.item(i)[\"Longitude\"])\n                              .set(\"ComboClaimJobId\",completeClaimRes.rows.item(i)[\"ComboClaimJobId\"])\n                              .set(\"ComboIsCompleted\", \"true\")\n                              .set(\"CantCompleteReason\",serviceResG.rows.item(i)[\"CantCompleteReason\"]);\n                              this.auth.httpSend(\"Service_AllEngineerActionsNew\", params,\"post\")\n                              .subscribe(\n                                (serviceSyncResponse) => {\n                                  console.log(\"combo service synced\");  \n                                  // this.auth.insertIntoSyncLog(completeClaimRes.rows.item(i)['JOBGUID'],  \"Combo S Success\", serviceSyncResponse[\"Msg\"]);\n                                  this.auth.database.executeSql(\n                                    \"delete from completeservice where JOBGUID=?\",\n                                    [serviceResG.rows.item(i)[\"JOBGUID\"]]\n                                  );\n                                  array.push(serviceSyncResponse[\"Msg\"]);\n                                  if (\n                                    array.length == completeClaimRes.rows.length\n                                  ) {\n                                    resolve(\"Combo complete\");\n                                  }\n                                  //\n                                },\n                                (serviceSyncError) => {\n                                  // Start ErrorLog\n                                  // this.auth.insertIntoSyncLog(completeClaimRes.rows.item(i)['JOBGUID'],  \"Combo S Failed\", serviceSyncError[\"Msg\"]);\n                                  // let errorMsg = JSON.stringify(serviceSyncError);\n                                  // let actionName =\"Service_AllEngineerActionsNew\";\n                                  // let Descp = \n                                  //   {\n                                  //     JOBGUID: serviceResG.rows.item(i)[\"JOBGUID\"],\n                                  //     OUTCOME: serviceResG.rows.item(i)[\"OUTCOME\"],\n                                  //     PARTS: serviceResG.rows.item(i)[\"PARTS\"],\n                                  //     LABOUR: serviceResG.rows.item(i)[\"LABOUR\"],\n                                  //     JOBNOTE: serviceResG.rows.item(i)[\"JOBNOTE\"],\n                                  //     FILEBASE: serviceResG.rows.item(i)[\"FILEBASE\"],\n                                  //     FILENAME: serviceResG.rows.item(i)[\"FILENAME\"],\n                                  //     FORACTION: \"Service\",\n                                  //     OnDt: serviceResG.rows.item(i)[\"OnDt\"],\n                                  //     Latitude: completeClaimRes.rows.item(i)[\"Latitude\"],\n                                  //     Longitude: completeClaimRes.rows.item(i)[\"Longitude\"],\n                                  //     ComboClaimJobId: completeClaimRes.rows.item(i)[\"ComboClaimJobId\"],\n                                  //     ComboIsCompleted: \"true\",\n                                  //     CantCompleteReason:serviceResG.rows.item(i)[\"CantCompleteReason\"]\n                                  // }                      \n                                  // ; \n                                  // let Desc = JSON.stringify(Descp);\n                                  // this.auth.insertIntoErrorLog(errorMsg, serviceResG.rows.item(i)['JOBGUID'],  actionName, Desc);\n                                  // End of ErrorLog\n                                  this.auth.showToast(JSON.stringify(serviceSyncError.message))\n                                  array.push(serviceSyncError[\"header\"]);\n                                  if (\n                                    array.length == completeClaimRes.rows.length\n                                  ) {\n                                    resolve(\"enggpics complete\");\n                                  }\n                                }\n                              );\n\n                            //\n                          },\n                          (claimSyncError) => {\n                            // this.auth.insertIntoSyncLog(completeClaimRes.rows.item(i)['JOBGUID'],  \"Calim Failed\", claimSyncError[\"Msg\"]);\n                            // Start ErrorLog\n                            // let errorMsg = JSON.stringify(claimSyncError);\n                            // let actionName =\"Service_AllEngineerActionsNew\";\n                            // let Descp = \n                            //   {\n                            //     JOBGUID: completeClaimRes.rows.item(i)[\"JOBGUID\"],\n                            //     OUTCOME: completeClaimRes.rows.item(i)[\"OUTCOME\"],\n                            //     PARTS: completeClaimRes.rows.item(i)[\"PARTS\"],\n                            //     LABOUR: completeClaimRes.rows.item(i)[\"LABOUR\"],\n                            //     JOBNOTE: completeClaimRes.rows.item(i)[\"JOBNOTE\"],\n                            //     FILEBASE: completeClaimRes.rows.item(i)[\"FILEBASE\"],\n                            //     FILENAME: completeClaimRes.rows.item(i)[\"FILENAME\"],\n                            //     FORACTION: \"Claim\",\n                            //     OnDt: completeClaimRes.rows.item(i)[\"OnDt\"],\n                            //     Latitude: completeClaimRes.rows.item(i)[\"Latitude\"],\n                            //     Longitude: completeClaimRes.rows.item(i)[\"Longitude\"],\n                            //     ComboClaimJobId: completeClaimRes.rows.item(i)[\"ComboClaimJobId\"],\n                            //     ComboIsCompleted: \"true\",\n                            //     CantCompleteReason:serviceResG.rows.item(i)[\"CantCompleteReason\"]\n                            // }                      \n                            // ; \n                            // let Desc = JSON.stringify(Descp);\n                            // this.auth.insertIntoErrorLog(errorMsg, completeClaimRes.rows.item(i)['JOBGUID'],  actionName, Desc);\n                            // End of ErrorLog\n                            this.auth.showToast(JSON.stringify(claimSyncError.message))\n                            array.push(claimSyncError[\"header\"]);\n                            if (array.length == completeClaimRes.rows.length) {\n                              resolve(\"enggpics complete\");\n                            }\n                          }\n                        );\n                    } else {\n                      console.log(\"combo service of combo job not completed\");  \n                      console.log(\"combo Sync Only Claim not service\");  \n                      // service of combo job not completed\n                      // Sync Only Claim not service\n                      let params = new HttpParams()\n                        .set(\n                          \"JOBGUID\",\n                          completeClaimRes.rows.item(i)[\"JOBGUID\"]\n                        )\n                        .set(\n                          \"OUTCOME\",\n                          completeClaimRes.rows.item(i)[\"OUTCOME\"]\n                        )\n                        .set(\"PARTS\", completeClaimRes.rows.item(i)[\"PARTS\"])\n                        .set(\"LABOUR\", completeClaimRes.rows.item(i)[\"LABOUR\"])\n                        .set(\n                          \"JOBNOTE\",\n                          completeClaimRes.rows.item(i)[\"JOBNOTE\"]\n                        )\n                        .set(\n                          \"FILEBASE\",\n                          completeClaimRes.rows.item(i)[\"FILEBASE\"]\n                        )\n                        .set(\n                          \"FILENAME\",\n                          completeClaimRes.rows.item(i)[\"FILENAME\"]\n                        )\n                        .set(\"FORACTION\", \"Claim\")\n                        .set(\"OnDt\", completeClaimRes.rows.item(i)[\"OnDt\"])\n                        .set(\n                          \"Latitude\",\n                          completeClaimRes.rows.item(i)[\"Latitude\"]\n                        )\n                        .set(\n                          \"Longitude\",\n                          completeClaimRes.rows.item(i)[\"Longitude\"]\n                        )\n                        .set(\n                          \"ComboClaimJobId\",\n                          completeClaimRes.rows.item(i)[\"ComboClaimJobId\"]\n                        )\n                        .set(\"ComboIsCompleted\", \"false\")\n                        .set(\n                          \"CantCompleteReason\",\n                          serviceResG.rows.item(i)[\"CantCompleteReason\"]\n                        );\n                      this.auth\n                        .httpSend(\n                          \"Service_AllEngineerActionsNew\",\n                          params,\n                          \"post\"\n                        )\n                        .subscribe(\n                          (claimSyncResponse) => {\n                            // this.auth.insertIntoSyncLog(serviceResG.rows.item(i)['JOBGUID'],  \"CC Suceess\", claimSyncResponse[\"Msg\"]);\n                            this.auth.database.executeSql(\n                              \"delete from completeclaim where JOBGUID=?\",\n                              [completeClaimRes.rows.item(i)[\"JOBGUID\"]]\n                            );\n                            array.push(completeClaimRes[\"Msg\"]);\n                            if (array.length == completeClaimRes.rows.length) {\n                              resolve(\"Claim complete but Service Pending\");\n                            }\n                          },\n                          (claimSyncError) => {\n                            // Start ErrorLog\n                            // this.auth.insertIntoSyncLog(serviceResG.rows.item(i)['JOBGUID'],  \"CC Failed\", claimSyncError[\"Msg\"]);\n                            // let errorMsg = JSON.stringify(claimSyncError);\n                            // let actionName =\"Service_AllEngineerActionsNew\";\n                            // let Descp = \n                            //   {\n                            //     JOBGUID: completeClaimRes.rows.item(i)[\"JOBGUID\"],\n                            //     OUTCOME: completeClaimRes.rows.item(i)[\"OUTCOME\"],\n                            //     PARTS: completeClaimRes.rows.item(i)[\"PARTS\"],\n                            //     LABOUR: completeClaimRes.rows.item(i)[\"LABOUR\"],\n                            //     JOBNOTE: completeClaimRes.rows.item(i)[\"JOBNOTE\"],\n                            //     FILEBASE: completeClaimRes.rows.item(i)[\"FILEBASE\"],\n                            //     FILENAME: completeClaimRes.rows.item(i)[\"FILENAME\"],\n                            //     FORACTION: \"Claim\",\n                            //     OnDt: completeClaimRes.rows.item(i)[\"OnDt\"],\n                            //     Latitude: completeClaimRes.rows.item(i)[\"Latitude\"],\n                            //     Longitude: completeClaimRes.rows.item(i)[\"Longitude\"],\n                            //     ComboClaimJobId: completeClaimRes.rows.item(i)[\"ComboClaimJobId\"],\n                            //     ComboIsCompleted: \"true\",\n                            //     CantCompleteReason:serviceResG.rows.item(i)[\"CantCompleteReason\"]\n                            // }                      \n                            // ; \n                            // let Desc = JSON.stringify(Descp);\n                            // this.auth.insertIntoErrorLog(errorMsg, completeClaimRes.rows.item(i)['JOBGUID'],  actionName, Desc);\n                            // End of ErrorLog\n                            this.auth.showToast(JSON.stringify(claimSyncError.message))\n                            array.push(claimSyncError[\"header\"]);\n                            if (array.length == completeClaimRes.rows.length) {\n                              resolve(\"enggpics complete\");\n                            }\n                          }\n                        );\n                    }\n                  })\n                  .catch();\n              } else {\n                // if job is not combo then sync claim\n\n                let params = new HttpParams()\n                  .set(\"JOBGUID\", completeClaimRes.rows.item(i)[\"JOBGUID\"])\n                  .set(\"OUTCOME\", completeClaimRes.rows.item(i)[\"OUTCOME\"])\n                  .set(\"PARTS\", completeClaimRes.rows.item(i)[\"PARTS\"])\n                  .set(\"LABOUR\", completeClaimRes.rows.item(i)[\"LABOUR\"])\n                  .set(\"JOBNOTE\", completeClaimRes.rows.item(i)[\"JOBNOTE\"])\n                  .set(\"FILEBASE\", completeClaimRes.rows.item(i)[\"FILEBASE\"])\n                  .set(\"FILENAME\", completeClaimRes.rows.item(i)[\"FILENAME\"])\n                  .set(\"FORACTION\", \"Claim\")\n                  .set(\"OnDt\", completeClaimRes.rows.item(i)[\"OnDt\"])\n                  .set(\"Latitude\", completeClaimRes.rows.item(i)[\"Latitude\"])\n                  .set(\"Longitude\", completeClaimRes.rows.item(i)[\"Longitude\"])\n                  .set(\"ComboClaimJobId\", \"\")\n                  .set(\"ComboIsCompleted\", \"\")\n                  .set(\"CantCompleteReason\", \"\");\n                this.auth\n                  .httpSend(\"Service_AllEngineerActionsNew\", params, \"post\")\n                  .subscribe(\n                    (msg) => {\n                      // this.auth.insertIntoSyncLog(completeClaimRes.rows.item(i)['JOBGUID'],  \"Calim Success\", msg[\"Msg\"]);\n                      this.auth.database.executeSql(\n                        \"delete from completeclaim where JOBGUID=?\",\n                        [completeClaimRes.rows.item(i)[\"JOBGUID\"]]\n                      );\n                      array.push(msg[\"Msg\"]);\n                      if (array.length == completeClaimRes.rows.length) {\n                        resolve(\"claim complete\");\n                      }\n                      //\n                    },\n                    (claimSyncError) => {\n                      // this.auth.insertIntoSyncLog(completeClaimRes.rows.item(i)['JOBGUID'],  \"Claim Failed\", claimSyncError[\"Msg\"]);\n                      // Start ErrorLog\n                      // let errorMsg = JSON.stringify(claimSyncError);\n                      // let actionName =\"Service_AllEngineerActionsNew\";\n                      // let Descp = \n                      //   {\n                      //     JOBGUID: completeClaimRes.rows.item(i)[\"JOBGUID\"],\n                      //     OUTCOME: completeClaimRes.rows.item(i)[\"OUTCOME\"],\n                      //     PARTS: completeClaimRes.rows.item(i)[\"PARTS\"],\n                      //     LABOUR: completeClaimRes.rows.item(i)[\"LABOUR\"],\n                      //     JOBNOTE: completeClaimRes.rows.item(i)[\"JOBNOTE\"],\n                      //     FILEBASE: completeClaimRes.rows.item(i)[\"FILEBASE\"],\n                      //     FILENAME: completeClaimRes.rows.item(i)[\"FILENAME\"],\n                      //     FORACTION: \"Claim\",\n                      //     OnDt: completeClaimRes.rows.item(i)[\"OnDt\"],\n                      //     Latitude: completeClaimRes.rows.item(i)[\"Latitude\"],\n                      //     Longitude: completeClaimRes.rows.item(i)[\"Longitude\"],\n                      //     ComboClaimJobId: \"\",\n                      //     ComboIsCompleted: \"\",\n                      //     CantCompleteReason:\"\"\n                      // }                      \n                      // ; \n                      // let Desc = JSON.stringify(Descp);\n                      // this.auth.insertIntoErrorLog(errorMsg, completeClaimRes.rows.item(i)['JOBGUID'],  actionName, Desc);\n                      // End of ErrorLog\n                      this.auth.showToast(JSON.stringify(claimSyncError.message))\n                      array.push(claimSyncError[\"header\"]);\n                      if (array.length == completeClaimRes.rows.length) {\n                        resolve(\"enggpics complete\");\n                      }\n                    }\n                  );\n              }\n            }\n            //For Loop End\n          } else {\n            resolve(\"success No Data in Claim\");\n          }\n        })\n        .catch((completeClaimError) => {\n          reject(\" error complete claim\" + JSON.stringify(completeClaimError));\n        });\n    });\n  }\n\n  syncCompleteService1() {\n    this.auth.setLoadingText(\"Syncing Completed Services. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"46.6\");\n    let array = [];\n    return new Promise((resolve, reject) => {\n      this.auth.database\n        .executeSql(\"select * from completeservice where HaveData=?\", [\"yes\"])\n        .then((completeServiceRes) => {\n          if (completeServiceRes.rows.length > 0) {\n            for (let i = 0; i < completeServiceRes.rows.length; i++) {\n              console.log(\"Danish inside sync service\");\n              let params = new HttpParams()                \n                .set(\"JOBGUID\", completeServiceRes.rows.item(i)[\"JOBGUID\"])\n                .set(\"OUTCOME\", completeServiceRes.rows.item(i)[\"OUTCOME\"])\n                .set(\"PARTS\", completeServiceRes.rows.item(i)[\"PARTS\"])\n                .set(\"LABOUR\", completeServiceRes.rows.item(i)[\"LABOUR\"])\n                .set(\"JOBNOTE\", completeServiceRes.rows.item(i)[\"JOBNOTE\"])\n                .set(\"FILEBASE\", completeServiceRes.rows.item(i)[\"FILEBASE\"])\n                .set(\"FILENAME\", completeServiceRes.rows.item(i)[\"FILENAME\"])\n                .set(\"FORACTION\", \"Service\")\n                .set(\"OnDt\", completeServiceRes.rows.item(i)[\"OnDt\"])\n                .set(\"Latitude\", completeServiceRes.rows.item(i)[\"Latitude\"])\n                .set(\"Longitude\", completeServiceRes.rows.item(i)[\"Longitude\"])\n                .set(\"ComboClaimJobId\", \"\")\n                .set(\"ComboIsCompleted\", \"\")\n                .set(\"CantCompleteReason\", \"\");\n              this.auth\n                .httpSend(\"Service_AllEngineerActionsNew\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(completeServiceRes.rows.item(i)['JOBGUID'],  \"Service Success\", msg[\"Msg\"]);\n                    this.auth.database.executeSql(\n                      \"delete from completeservice where JOBGUID=?\",\n                      [completeServiceRes.rows.item(i)[\"JOBGUID\"]]\n                    );\n\n                    array.push(msg[\"Msg\"]);\n                    if (array.length == completeServiceRes.rows.length) {\n                      resolve(\"complete SERVICE complete\");\n                    }\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(completeServiceRes.rows.item(i)['JOBGUID'],  \"Serive Failed\", err[\"Msg\"]);\n                      // Start ErrorLog\n                      // let errorMsg = JSON.stringify(err);\n                      // let actionName =\"Service_AllEngineerActionsNew\";\n                      // let Descp = \n                      //   {\n                      //     JOBGUID: completeServiceRes.rows.item(i)[\"JOBGUID\"],\n                      //     OUTCOME: completeServiceRes.rows.item(i)[\"OUTCOME\"],\n                      //     PARTS: completeServiceRes.rows.item(i)[\"PARTS\"],\n                      //     LABOUR: completeServiceRes.rows.item(i)[\"LABOUR\"],\n                      //     JOBNOTE: completeServiceRes.rows.item(i)[\"JOBNOTE\"],\n                      //     FILEBASE: completeServiceRes.rows.item(i)[\"FILEBASE\"],\n                      //     FILENAME: completeServiceRes.rows.item(i)[\"FILENAME\"],\n                      //     FORACTION: \"Service\",\n                      //     OnDt: completeServiceRes.rows.item(i)[\"OnDt\"],\n                      //     Latitude: completeServiceRes.rows.item(i)[\"Latitude\"],\n                      //     Longitude: completeServiceRes.rows.item(i)[\"Longitude\"],\n                      //     ComboClaimJobId: \"\",\n                      //     ComboIsCompleted: \"\",\n                      //     CantCompleteReason:\"\"\n                      // }                      \n                      // ; \n                      // let Desc = JSON.stringify(Descp);\n                      // this.auth.insertIntoErrorLog(errorMsg, completeServiceRes.rows.item(i)['JOBGUID'],  actionName, Desc);\n                      // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == completeServiceRes.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  }\n                );\n            } //for loop\n          } else {\n            resolve(\"complete SERVICE complete\");\n          }\n        })\n        .catch((completeServiceError) => {});\n    });\n  }\n\n  syncboilerInstallation() {\n    this.auth.setLoadingText(\"Syncing Boiler Installation Report. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"53\");\n    let array = [];\n    return new Promise((resolve, reject) => {\n      this.auth.database\n        .executeSql(\"select * from boilerinstallation where HaveData=?\", [\n          \"yes\",\n        ])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"BLocation\", res.rows.item(i)[\"BLocation\"])\n                .set(\"BLocation_Desc\", res.rows.item(i)[\"BLocation_Desc\"])\n                .set(\"BFlue\", res.rows.item(i)[\"BFlue\"])\n                .set(\"FlueExtension\", res.rows.item(i)[\"FlueExtension\"])\n                .set(\"StandOffKit\", res.rows.item(i)[\"StandOffKit\"])\n                .set(\"D45Elbow\", res.rows.item(i)[\"D45Elbow\"])\n                .set(\"D90Elbow\", res.rows.item(i)[\"D90Elbow\"])\n                .set(\"GasRun\", res.rows.item(i)[\"GasRun\"])\n                .set(\"CGasRun_Desc\", res.rows.item(i)[\"CGasRun_Desc\"])\n                .set(\"CGasRun\", res.rows.item(i)[\"CGasRun\"])\n                .set(\"GasRun_Desc\", res.rows.item(i)[\"GasRun_Desc\"])\n                .set(\"ActionDt\", res.rows.item(i)[\"ActionDt\"])\n                .set(\"Latitude\", res.rows.item(i)[\"Latitude\"])\n                .set(\"Longitude\", res.rows.item(i)[\"Longitude\"]);\n              this.auth\n                .httpSend(\"Service_BInsReport\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"BoilerInsRep Success\", msg[\"Msg\"]);\n                    this.auth.database.executeSql(\n                      \"update boilerinstallationpics set SSID = ? where JOBGUID=?\",\n                      [msg[\"Msg\"], res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    this.auth.database.executeSql(\n                      \"update boilerinstallationsign set SSID = ? where JOBGUID=?\",\n                      [msg[\"Msg\"], res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    array.push(msg[\"Msg\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"boilerinstallation complete\");\n                    }\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"BoilerInsRep Failed\", err[\"Msg\"]);\n                      // Start ErrorLog\n                    //   let errorMsg = JSON.stringify(err);\n                    //   let actionName =\"Service_BInsReport\";\n                    //   let Descp = \n                    //     {\n                    //       JOBGUID: res.rows.item(i)[\"JOBGUID\"],\n                    //       BLocation: res.rows.item(i)[\"BLocation\"],\n                    //       BLocation_Desc: res.rows.item(i)[\"BLocation_Desc\"],\n                    //       BFlue: res.rows.item(i)[\"BFlue\"],\n                    //       FlueExtension: res.rows.item(i)[\"FlueExtension\"],\n                    //       StandOffKit: res.rows.item(i)[\"StandOffKit\"],\n                    //       D45Elbow: res.rows.item(i)[\"D45Elbow\"],\n                    //       D90Elbow: res.rows.item(i)[\"D90Elbow\"],\n                    //       GasRun: res.rows.item(i)[\"GasRun\"],\n                    //       CGasRun_Desc: res.rows.item(i)[\"CGasRun_Desc\"],\n                    //       CGasRun: res.rows.item(i)[\"CGasRun\"],\n                    //       GasRun_Desc: res.rows.item(i)[\"GasRun_Desc\"],\n                    //       ActionDt: res.rows.item(i)[\"ActionDt\"],\n                    //       Latitude: res.rows.item(i)[\"Latitude\"],\n                    //       Longitude: res.rows.item(i)[\"Longitude\"],\n                    //   }                      \n                    //   ; \n                    //   let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                      // End of ErrorLog\n                      this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  }\n                );\n            }\n          } else {\n            resolve(\"boilerinstallation complete\");\n          }\n        })\n        .catch((e) => {});\n    });\n  }\n\n  syncBoilerInstallationPics() {\n    this.auth.setLoadingText(\"Syncing Boiler Installation Images. It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"59\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from boilerinstallationpics where HaveData=?\", [\n          \"yes\",\n        ])\n        .then((res) => {\n          if (res.rows.length) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"SSID\", res.rows.item(i)[\"SSID\"])\n                .set(\"BImage\", res.rows.item(i)[\"BImage\"])\n                .set(\"BPWImage\", res.rows.item(i)[\"BPWImage\"])\n                .set(\"CTImage\", res.rows.item(i)[\"CTImage\"])\n                .set(\"FSImage\", res.rows.item(i)[\"FSImage\"])\n                .set(\"IFImage\", res.rows.item(i)[\"IFImage\"])\n                .set(\"FILImage\",res.rows.item(i)[\"FILImage\"])\n                .set(\"EFTImage\", res.rows.item(i)[\"EFTImage\"])\n                .set(\"ACCImage\", res.rows.item(i)[\"ACCImage\"])\n                .set(\"TImage\", res.rows.item(i)[\"TImage\"])\n                .set(\"BMCImage\", res.rows.item(i)[\"BMCImage\"])\n                .set(\"A1Image\", res.rows.item(i)[\"A1Image\"])\n                .set(\"A2Image\", res.rows.item(i)[\"A2Image\"])\n                .set(\"A3Image\", res.rows.item(i)[\"A3Image\"])\n                .set(\"A4Image\", res.rows.item(i)[\"A4Image\"])\n                .set(\"A5Image\", res.rows.item(i)[\"A5Image\"]);\n              this.auth.httpSend(\"Service_BInsImags\", params, \"post\").subscribe(\n                (msg) => {\n                  // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"BoilerInsPic Success\", msg[\"Msg\"]);\n                  array.push(msg[\"Msg\"]);\n                  if (array.length == res.rows.length) {\n                    resolve(\"boilerinstallationpics complete\");\n                  }\n                },\n                (err) => {\n                  // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"BoilerInsPic Failed\", err[\"Msg\"]);\n                  // Start ErrorLog\n                  // let errorMsg = JSON.stringify(err);\n                  // let actionName =\"Service_BInsImags\";\n                  // let Descp = \n                  //   {\n                  //     SSID: res.rows.item(i)[\"SSID\"],\n                  //     BImage: res.rows.item(i)[\"BImage\"],\n                  //     BPWImage: res.rows.item(i)[\"BPWImage\"],\n                  //     CTImage: res.rows.item(i)[\"CTImage\"],\n                  //     FSImage: res.rows.item(i)[\"FSImage\"],\n                  //     IFImage: res.rows.item(i)[\"IFImage\"],\n                  //     FILImage:res.rows.item(i)[\"FILImage\"],\n                  //     EFTImage: res.rows.item(i)[\"EFTImage\"],\n                  //     ACCImage: res.rows.item(i)[\"ACCImage\"],\n                  //     TImage: res.rows.item(i)[\"TImage\"],\n                  //     BMCImage: res.rows.item(i)[\"BMCImage\"],\n                  //     A1Image: res.rows.item(i)[\"A1Image\"],\n                  //     A2Image: res.rows.item(i)[\"A2Image\"],\n                  //     A3Image: res.rows.item(i)[\"A3Image\"],\n                  //     A4Image: res.rows.item(i)[\"A4Image\"],\n                  //     A5Image: res.rows.item(i)[\"A5Image\"]\n                  // }                      \n                  // ; \n                  // let Desc = JSON.stringify(Descp);\n                  //   this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                  // End of ErrorLog\n                  this.auth.showToast(JSON.stringify(err.message))\n                  array.push(err[\"header\"]);\n                  if (array.length == res.rows.length) {\n                    resolve(\"enggpics complete\");\n                  }\n                }\n              );\n            } // end of for loop\n          } else {\n            resolve(\"boilerinstallationpics complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # sync Boiler Installation Pics failed\");\n        });\n    });\n  }\n\n  syncBoilerInstallationSign() {\n    this.auth.setLoadingText(\"Syncing Boiler Installation Signatures It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"66.3\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select * from boilerinstallationsign where HaveData=?\", [\n          \"yes\",\n        ])\n        .then((res) => {\n          if (res.rows.length) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"SSID\", res.rows.item(i)[\"SSID\"])\n                .set(\"BInsComplete\", res.rows.item(i)[\"BInsComplete\"])\n                .set(\"BInsComplete_Reason\",res.rows.item(i)[\"BInsComplete_Reason\"])\n                .set(\"BInsDefects\", res.rows.item(i)[\"BInsDefects\"])\n                .set(\"BInsDefects_Reason\",res.rows.item(i)[\"BInsDefects_Reason\"])\n                .set(\"BInsDamage\", res.rows.item(i)[\"BInsDamage\"])\n                .set(\"BInsDamage_Reason\", res.rows.item(i)[\"BInsDamage_Reason\"])\n                .set(\"BInsAddNotes\", res.rows.item(i)[\"BInsAddNotes\"])\n                .set(\"InstallerSig\", res.rows.item(i)[\"InstallerSig\"])               \n                .set(\"CustomerSig\", res.rows.item(i)[\"CustomerSig\"])               \n                .set(\"InstallerName\", res.rows.item(i)[\"InstallerName\"])\n                .set(\"CustomerName\", res.rows.item(i)[\"CustomerName\"]);\n              this.auth\n                .httpSend(\"Service_BInsSignature\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"BoilerInsSig Success\", msg[\"Msg\"]);\n                    this.auth.database.executeSql(\n                      \"delete from boilerinstallation where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    this.auth.database.executeSql(\n                      \"delete from boilerinstallationpics where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    this.auth.database.executeSql(\n                      \"delete from boilerinstallationsign where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n\n                    array.push(msg[\"Msg\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"boilerinstallationsign complete\");\n                    }\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"BoilerInsSig Success\", err[\"Msg\"]);\n                    // Start ErrorLog\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_BInsSignature\";\n                    // let Descp = \n                    //   {\n                    //     SSID: res.rows.item(i)[\"SSID\"],\n                    //     BInsComplete: res.rows.item(i)[\"BInsComplete\"],\n                    //     BInsComplete_Reason:res.rows.item(i)[\"BInsComplete_Reason\"],\n                    //     BInsDefects: res.rows.item(i)[\"BInsDefects\"],\n                    //     BInsDefects_Reason:res.rows.item(i)[\"BInsDefects_Reason\"],\n                    //     BInsDamage: res.rows.item(i)[\"BInsDamage\"],\n                    //     BInsDamage_Reason: res.rows.item(i)[\"BInsDamage_Reason\"],\n                    //     BInsAddNotes: res.rows.item(i)[\"BInsAddNotes\"],\n                    //     InstallerSig: res.rows.item(i)[\"InstallerSig\"],               \n                    //     CustomerSig: res.rows.item(i)[\"CustomerSig\"],               \n                    //     InstallerName: res.rows.item(i)[\"InstallerName\"],\n                    //     CustomerName: res.rows.item(i)[\"CustomerName\"]\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    //   this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  }\n                ); //subscribe end\n            } // end of for loop\n          } else {\n            resolve(\"boilerinstallationsign complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\"# # on boilerinstallationsign failed\");\n        });\n    });\n  }\n\n  // donloadNative(urlpdf: string, JOBGUID: string) {\n  //   return new Promise((resolve, reject) => {\n  //     this.http\n  //       .downloadFile(\n  //         urlpdf, //https://file-examples-com.github.io/uploads/2017/10/file-sample_150kB.pdf\n  //         { id: \"12\", message: \"test\" },\n  //         { Authorization: \"OAuth2: token\" },\n  //         this.file.externalRootDirectory +\n  //           \"download/\" +\n  //           JOBGUID +\n  //           \"certificate.pdf\"\n  //       )\n  //       .then((response) => {\n  //         // prints 200\n\n  //         resolve(JSON.stringify(response.status));\n  //         this.auth.database\n  //           .executeSql(\n  //             \"update jobsstatus set CertificateLocalURI=? where JOBGUID=?\",\n  //             [\n  //               this.file.externalRootDirectory +\n  //                 \"download/\" +\n  //                 JOBGUID +\n  //                 \"certificate.pdf\",\n  //               JOBGUID,\n  //             ]\n  //           )\n  //           .then((res) => {})\n  //           .catch((e) => {});\n  //       })\n  //       .catch((response) => {\n  //         reject(JSON.stringify(response.error));\n  //       });\n  //   });\n  // }\n\n  syncEnggPic() {\n    this.auth.setLoadingText(\"Syncing Engineers Pictures  It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"80\");\n    return new Promise((resolve, reject) => {\n      let array = [];\n      this.auth.database\n        .executeSql(\"select *  from enggpics where HaveData=?\", [\"yes\"])\n        .then((resp) => {\n          if (resp.rows.length > 0) {\n            for (let i = 0; i < resp.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", resp.rows.item(i)[\"JOBGUID\"])\n                .set(\"JOBNOTE\", resp.rows.item(i)[\"JOBNOTE\"])\n                .set(\"OUTCOME\", resp.rows.item(i)[\"OUTCOME\"])\n                .set(\"PARTS\", resp.rows.item(i)[\"PARTS\"])\n                .set(\"LABOUR\", resp.rows.item(i)[\"LABOUR\"])\n                .set(\"FILEBASE\", resp.rows.item(i)[\"pic\"])\n                .set(\"FILENAME\", \"Take Image\")\n                .set(\"FORACTION\", \"Take Image\")\n                .set(\"OnDt\", resp.rows.item(i)[\"onDt\"])\n                .set(\"Latitude\", resp.rows.item(i)[\"latitude\"])\n                .set(\"Longitude\", resp.rows.item(i)[\"longitude\"])\n                .set(\"ComboClaimJobId\", \"\")\n                .set(\"ComboIsCompleted\", \"\")\n                .set(\"CantCompleteReason\", \"\");\n              this.auth\n                .httpSend(\"Service_AllEngineerActionsNew\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(resp.rows.item(i)['JOBGUID'],  \"EngSig Success\", msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    if (array.length == resp.rows.length) {\n                      resolve(\"enggpics complete\");\n                    }\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(resp.rows.item(i)['JOBGUID'],  \"EngSig Failed\", err[\"Msg\"]);\n                    // Start ErrorLog\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_AllEngineerActionsNew\";\n                    // let Descp = \n                    //   {\n                    //     JOBGUID: resp.rows.item(i)[\"JOBGUID\"],\n                    //     OUTCOME: resp.rows.item(i)[\"OUTCOME\"],\n                    //     PARTS: resp.rows.item(i)[\"PARTS\"],\n                    //     LABOUR: resp.rows.item(i)[\"LABOUR\"],\n                    //     JOBNOTE: resp.rows.item(i)[\"JOBNOTE\"],\n                    //     FILEBASE: resp.rows.item(i)[\"FILEBASE\"],\n                    //     FILENAME: \"Take Image\",\n                    //     FORACTION: \"Take Image\",\n                    //     OnDt: resp.rows.item(i)[\"OnDt\"],\n                    //     Latitude: resp.rows.item(i)[\"Latitude\"],\n                    //     Longitude: resp.rows.item(i)[\"Longitude\"],\n                    //     ComboClaimJobId: \"\",\n                    //     ComboIsCompleted: \"\",\n                    //     CantCompleteReason:\"\"\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, resp.rows.item(i)[\"JOBGUID\"],  actionName, Desc);\n                    // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == resp.rows.length) {\n                      resolve(\"enggpics incomplete\" + JSON.stringify(err));\n                    }\n                  }\n                );\n            } // end of for loop\n          } else {\n            resolve(\"enggpics complete\");\n          }\n        })\n        .catch((e) => {\n          reject(JSON.stringify(e));\n        });\n    });\n  }\n\n  // sync site survey\n\n  syncSiteSurvey() {\n    this.auth.setLoadingText(\"Syncing Site Survey Report It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"85.5\");\n    let array = [];\n    return new Promise((resolve, reject) => {\n      this.auth.database\n        .executeSql(\"select * from sitesurvey where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"JOBGUID\", res.rows.item(i)[\"JOBGUID\"])\n                .set(\"NB\", res.rows.item(i)[\"siteSurveyboiler\"])\n                .set(\"BReq\", res.rows.item(i)[\"siteSurveyboilerdescription\"])\n                .set(\"BLocation\", res.rows.item(i)[\"locationboiler\"])\n                .set(\"NBLocation\", res.rows.item(i)[\"NewBoilerLocationSelect\"])\n                .set(\"BLocation_Desc\",res.rows.item(i)[\"NewBoilerLocationDesc\"])\n                .set(\"BFlue\", res.rows.item(i)[\"FlueSelect\"])\n                .set(\"FlueExtension\", res.rows.item(i)[\"FlueextensionsSelect\"])\n                .set(\"StandOffKit\", res.rows.item(i)[\"StandOffKitSelect\"])\n                .set(\"D45Elbow\",res.rows.item(i)[\"FourtyfivedegreeelbowSelect\"])\n                .set(\"D90Elbow\", res.rows.item(i)[\"NinetydegreeelbowSelect\"])\n                .set(\"StandingInletPressure\",res.rows.item(i)[\"StandingInletPressue\"])\n                .set(\"SSReason\", res.rows.item(i)[\"SiteSurveyReason\"])\n                .set(\"SPrdctType\", res.rows.item(i)[\"SiteSurveyProductType\"])\n                .set(\"GasRun\", res.rows.item(i)[\"GasRunSelect\"])\n                .set(\"GasRun_Desc\", res.rows.item(i)[\"GasRunNewDetails\"])\n                .set(\"CGasRun\", res.rows.item(i)[\"CondensateGasSelect\"])\n                .set(\"CGasRun_Desc\",res.rows.item(i)[\"CondensateGasNewDetails\"])\n                .set(\"WorkingInletPressure\",res.rows.item(i)[\"WorkingInletPressue\"])\n                .set(\"ActionDt\", this.auth.getdateformatV2())\n                .set(\"Latitude\", this.auth.lat)\n                .set(\"Longitude\", this.auth.long)\n                .set(\"TRVs\", res.rows.item(i)[\"trvs\"]);\n\n              this.auth\n                .httpSend(\"Service_BInsReport_SS\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveyRep Success\", msg[\"Msg\"]);\n                    console.log(\"Danish SS Report\"+msg[\"Msg\"]);\n                    this.auth.database.executeSql(\n                      \"update sitesurveypics set SSID = ? where JOBGUID=?\",\n                      [msg[\"Msg\"], res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    this.auth.database.executeSql(\n                      \"update sitesurveysign set SSID = ? where JOBGUID=?\",\n                      [msg[\"Msg\"], res.rows.item(i)[\"JOBGUID\"]]\n                    );\n\n                    array.push(msg[\"Msg\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"sitesurvey complete\");\n                    }\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveyRep Failed\", err[\"Msg\"]);\n                    // Start ErrorLog\n                    // console.log(\"Danish BInsReport error \"+JSON.stringify(err));\n                    \n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_BInsReport_SS\";\n                    // let Descp = \n                    //   {\n                    //     JOBGUID: res.rows.item(i)[\"JOBGUID\"],\n                    //     NB: res.rows.item(i)[\"siteSurveyboiler\"],\n                    //     BReq: res.rows.item(i)[\"siteSurveyboilerdescription\"],\n                    //     BLocation: res.rows.item(i)[\"locationboiler\"],\n                    //     NBLocation: res.rows.item(i)[\"NewBoilerLocationSelect\"],\n                    //     BLocation_Desc:res.rows.item(i)[\"NewBoilerLocationDesc\"],\n                    //     BFlue: res.rows.item(i)[\"FlueSelect\"],\n                    //     FlueExtension: res.rows.item(i)[\"FlueextensionsSelect\"],\n                    //     StandOffKit: res.rows.item(i)[\"StandOffKitSelect\"],\n                    //     D45Elbow:res.rows.item(i)[\"FourtyfivedegreeelbowSelect\"],\n                    //     D90Elbow: res.rows.item(i)[\"NinetydegreeelbowSelect\"],\n                    //     StandingInletPressure:res.rows.item(i)[\"StandingInletPressue\"],\n                    //     SSReason: res.rows.item(i)[\"SiteSurveyReason\"],\n                    //     SPrdctType: res.rows.item(i)[\"SiteSurveyProductType\"],\n                    //     GasRun: res.rows.item(i)[\"GasRunSelect\"],\n                    //     GasRun_Desc: res.rows.item(i)[\"GasRunNewDetails\"],\n                    //     CGasRun: res.rows.item(i)[\"CondensateGasSelect\"],\n                    //     CGasRun_Desc:res.rows.item(i)[\"CondensateGasNewDetails\"],\n                    //     WorkingInletPressure:res.rows.item(i)[\"WorkingInletPressue\"],                \n                    //     ActionDt: this.auth.getdateformatV2(),\n                    //     Latitude: this.auth.locationCoords.coords.latitude,\n                    //     Longitude: this.auth.locationCoords.coords.longitude,\n                    //     TRVs : res.rows.item(i)[\"trvs\"]\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics incomplete\");\n                    }\n                  }\n                );\n            }\n          } else {\n            resolve(\"sitesuvery complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\" sync survey error\");\n        });\n    });\n  }\n\n  syncSurveyPics() {\n    this.auth.setLoadingText(\"Syncing Site Survey Images It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"92\");\n    let array = [];\n    return new Promise((resolve, reject) => {\n      this.auth.database\n        .executeSql(\"select * from sitesurveypics where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"SSID\", res.rows.item(i)[\"SSID\"])\n                .set(\"BImage\", res.rows.item(i)[\"BoilerImage\"])\n                .set(\"BPWImage\", res.rows.item(i)[\"Boilerpipework\"])\n                .set(\"CTImage\", res.rows.item(i)[\"CondensateterminationImage\"])\n                .set(\"FSImage\", res.rows.item(i)[\"FusespurImage\"])\n                .set(\"IFImage\", res.rows.item(i)[\"InternalflueImage\"])\n                .set(\"FILImage\", res.rows.item(i)[\"FlueInLoftImage\"])\n                .set(\"EFTImage\", res.rows.item(i)[\"ExternalflueterminalImage\"])\n                .set(\"ACCImage\",res.rows.item(i)[\"AiringCupboardCylinderImage\"])\n                .set(\"TImage\", '')\n                .set('BMCImage', '')\n                .set(\"STLImage\", res.rows.item(i)[\"STLImage\"])\n                .set(\"DOLImage\", res.rows.item(i)[\"DrainOffLocationFlagImage\"])\n                .set(\"GMImage\", res.rows.item(i)[\"GasMeterImage\"])\n                .set(\"A1Image\", res.rows.item(i)[\"AdditionalOne\"])\n                .set(\"A2Image\", res.rows.item(i)[\"AdditionalTwo\"])\n                .set(\"A3Image\", res.rows.item(i)[\"AdditionalThree\"])\n                .set(\"A4Image\", res.rows.item(i)[\"AdditionalFour\"]);\n\n              this.auth\n                .httpSend(\"Service_BInsImags_SS\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveyPic Success\", msg[\"Msg\"]);\n                    console.log(\"Danish pic succ\"+msg[\"Msg\"]);\n                    array.push(msg[\"Msg\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"sitesurveypic complete\");\n                    }\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveyPic Failed\", err[\"Msg\"]);\n                    // Start ErrorLog\n                    // console.log(\"Danish BInsImags error \"+JSON.stringify(err));\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_BInsImags_SS\";\n                    // let Descp = \n                    //   {\n                    //     SSID: res.rows.item(i)[\"SSID\"],\n                    //     BImage: res.rows.item(i)[\"BoilerImage\"],\n                    //     BPWImage: res.rows.item(i)[\"Boilerpipework\"],\n                    //     CTImage: res.rows.item(i)[\"CondensateterminationImage\"],\n                    //     FSImage: res.rows.item(i)[\"FusespurImage\"],\n                    //     IFImage: res.rows.item(i)[\"InternalflueImage\"],\n                    //     FILImage: res.rows.item(i)[\"FlueInLoftImage\"],\n                    //     EFTImage: res.rows.item(i)[\"ExternalflueterminalImage\"],\n                    //     ACCImage:res.rows.item(i)[\"AiringCupboardCylinderImage\"],\n                    //     TImage: '',\n                    //     BMCImage: '',\n                    //     STLImage: res.rows.item(i)[\"STLImage\"],\n                    //     DOLImage: res.rows.item(i)[\"DrainOffLocationFlagImage\"],\n                    //     GMImage: res.rows.item(i)[\"GasMeterImage\"],\n                    //     A1Image: res.rows.item(i)[\"AdditionalOne\"],\n                    //     A2Image: res.rows.item(i)[\"AdditionalTwo\"],\n                    //     A3Image: res.rows.item(i)[\"AdditionalThree\"],\n                    //     A4Image: res.rows.item(i)[\"AdditionalFour\"]\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"enggpics incomplete\");\n                    }\n                  }\n                );\n            }\n          } else {\n            resolve(\" sync  sitesuvery Pics complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\" sync survey error\");\n        });\n    });\n  }\n\n  syncSurveySign() {\n    this.auth.setLoadingText(\"Syncing Site Survey Signatures It may take some time. Please wait... Thank you\");\n    this.auth.setProgressBar(\"96\");\n    let array = [];\n    return new Promise((resolve, reject) => {\n      this.auth.database\n        .executeSql(\"select * from sitesurveysign  where HaveData=?\", [\"yes\"])\n        .then((res) => {\n          if (res.rows.length > 0) {\n            for (let i = 0; i < res.rows.length; i++) {\n              let params = new HttpParams()\n                .set(\"SSID\", res.rows.item(i)[\"SSID\"])\n                .set(\"BInsAddNotes\", res.rows.item(i)[\"describeIssue\"])\n                .set(\"InstallerSig\", res.rows.item(i)[\"surveyorsign\"])\n                .set(\"CustomerSig\", res.rows.item(i)[\"customersign\"])\n                .set(\"InstallerName\", res.rows.item(i)[\"surveyorname\"])\n                .set(\"CustomerName\", res.rows.item(i)[\"customername\"]);\n\n              this.auth\n                .httpSend(\"Service_BInsSignature_SS\", params, \"post\")\n                .subscribe(\n                  (msg) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveySig Success\", msg[\"Msg\"]);\n                    console.log(\"Danish sig\"+JSON.stringify(msg));\n                    \n                    this.auth.database.executeSql(\n                      \"delete from sitesurvey where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    this.auth.database.executeSql(\n                      \"delete from sitesurveypics where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    this.auth.database.executeSql(\n                      \"delete from sitesurveysign where JOBGUID=?\",\n                      [res.rows.item(i)[\"JOBGUID\"]]\n                    );\n                    array.push(msg[\"Msg\"]);\n                    //sync SS button Clicked\n                    console.log(\"Danish caim ref, ssid , buton \"+res.rows.item(i)[\"CLAIMRef\"],res.rows.item(i)[\"SSID\"],res.rows.item(i)[\"ButtonClicked\"]);\n                    \n                    let params = new HttpParams()\n                      .set(\"Ref247\", res.rows.item(i)[\"CLAIMRef\"])\n                      .set(\"SiteSurveyNewsId\", res.rows.item(i)[\"SSID\"])\n                      .set(\"BtnClick\", res.rows.item(i)[\"ButtonClicked\"]);\n                    this.auth\n                      .httpSend(\n                        \"SwChannelApi_SiteSurveyButtonsClicked\",\n                        params,\n                        \"post\"\n                      )\n                      .subscribe(\n                        (btn_msg) => {\n                          // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveyButton Success\", btn_msg[\"Msg\"]);\n                          if (array.length == res.rows.length) {\n                            resolve(\"sitesuvery sign complete\");\n                          }\n                        },\n                        (btn_err) => {\n                          // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveyButton Failed\", btn_err[\"Msg\"]);\n                          // console.log(\"Danish error button err\"+JSON.stringify(btn_err));\n                          // // Start ErrorLog\n                          // let errorMsg = JSON.stringify(btn_err);\n                          // let actionName =\"SwChannelApi_SiteSurveyButtonsClicked\";\n                          // let Descp = \n                          //   {\n                          //     Ref247: res.rows.item(i)[\"CLAIMRef\"],\n                          //     SiteSurveyNewsId: res.rows.item(i)[\"SSID\"],\n                          //     BtnClick: res.rows.item(i)[\"ButtonClicked\"],\n                          // }                      \n                          // ; \n                          // let Desc = JSON.stringify(Descp);\n                          // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                          // // End of ErrorLog\n                          this.auth.showToast(JSON.stringify(btn_err.message))\n                          if (array.length == res.rows.length) {\n                            resolve(\"sitesuvery sign incomplete\");\n                          }\n                        }\n                      );\n                  },\n                  (err) => {\n                    // this.auth.insertIntoSyncLog(res.rows.item(i)['JOBGUID'],  \"SiteSurveySig Failed\", err[\"Msg\"]);\n                    // console.log(\"Danish BInsSignature error \"+JSON.stringify(err));\n                    // // Start ErrorLog\n                    // let errorMsg = JSON.stringify(err);\n                    // let actionName =\"Service_BInsSignature_SS\";\n                    // let Descp = \n                    //   {\n                    //     SSID: res.rows.item(i)[\"SSID\"],\n                    //     BInsAddNotes: res.rows.item(i)[\"describeIssue\"],\n                    //     InstallerSig: res.rows.item(i)[\"surveyorsign\"],\n                    //     CustomerSig: res.rows.item(i)[\"customersign\"],\n                    //     InstallerName: res.rows.item(i)[\"surveyorname\"],\n                    //     CustomerName: res.rows.item(i)[\"customername\"]\n                    // }                      \n                    // ; \n                    // let Desc = JSON.stringify(Descp);\n                    // this.auth.insertIntoErrorLog(errorMsg, res.rows.item(i)['JOBGUID'],  actionName, Desc);\n                    // // End of ErrorLog\n                    this.auth.showToast(JSON.stringify(err.message))\n                    array.push(err[\"header\"]);\n                    if (array.length == res.rows.length) {\n                      resolve(\"sitesurvay complete\");\n                    }\n                  }\n                );\n            }\n          } else {\n            resolve(\" sync survey Installation Pics complete\");\n          }\n        })\n        .catch((e) => {\n          reject(\" sync survey error\");\n        });\n    });\n  }\n\n  retryAlert(msg: string, hdr?: string, subHeader?:string) {\n    console.log(\"ddddd \"+this.retryCount);\n    ++this.retryCount;\n    console.log(\"ddddd \"+this.retryCount);\n    if (this.retryCount<=3) {\n      this.alertCtrl\n      .create({\n        header: hdr || \"Alert Message\",\n        subHeader : subHeader,\n        cssClass: \"custom-class\",\n        message: msg,\n        backdropDismiss: false,\n        buttons: [\n          {\n            text: \"Re-Try\",\n            handler: () => {\n              this.getJobsfromApi();\n            },\n          },\n        ],\n      })\n      .then((res) => {\n        res.present();\n      });\n    } else {\n      this.auth.alert(\"Unexpected Error Occured Please Contact IT Support Team\");\n    }\n}\n\n}\n","export default \"<ion-header>\\n  <ion-toolbar class=\\\"bgcolour\\\">\\n    <ion-row>\\n      <ion-col size=\\\"10\\\" >\\n          <div>\\n            <img src=\\\"../../assets/images/name.png\\\">\\n          </div>\\n      </ion-col>\\n      <ion-col size=\\\"2\\\">\\n        <div>\\n          <ion-icon class=\\\"syncbutton\\\" size=\\\"large\\\" name=\\\"sync\\\" (click)=\\\"syncClick()\\\"></ion-icon>\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n  </ion-toolbar>\\n  \\n  <div id=\\\"address\\\" class=\\\"whitebg\\\">\\n    <marquee behavior=\\\"\\\" direction=\\\"\\\">\\n      <span>{{address}}</span>\\n    </marquee>    \\n  </div>\\n\\n  <ion-segment class=\\\"whitebg\\\" color=\\\"favorite\\\" value=\\\"today\\\"  [(ngModel)]=\\\"segment\\\">  \\n    <ion-segment-button value=\\\"today\\\">\\n      <ion-label>Today</ion-label>\\n    </ion-segment-button>\\n    <ion-segment-button value=\\\"past\\\">\\n      <ion-label>Past</ion-label>\\n    </ion-segment-button>\\n    <ion-segment-button value=\\\"future\\\">\\n      <ion-label>Future</ion-label>\\n    </ion-segment-button>\\n  </ion-segment>\\n\\n\\n\\n\\n</ion-header>\\n\\n\\n<ion-content >\\n   <div [ngSwitch]=\\\"segment\\\">\\n    <div *ngSwitchCase=\\\"'today'\\\">\\n      <div *ngFor='let engineerJob of model; let i = index' (click)= 'gotoDetails(engineerJob.CLAIMGUID)'>\\n        <div *ngIf=\\\"engineerJob.ListType == 'Today'\\\" >\\n          <ion-card [hidden]=\\\"engineerJob.ParentJobGuid != ''\\\"> \\n            <ion-list>\\n              <ion-item lines='none' style=\\\"--background:{{engineerJob.BackgroundColour}};\\\" >\\n                <ion-thumbnail slot=\\\"start\\\">\\n                  <ion-label>\\n                    <p>{{engineerJob.BookingDate}}</p>\\n                    <p>{{engineerJob.BookingTimeType}}</p>\\n                  </ion-label>\\n                </ion-thumbnail>\\n                <ion-label>\\n                  <h4>{{engineerJob.CLAIMJOBID}} {{engineerJob.RiskPostCode}}</h4>\\n                  <h2>{{engineerJob.ProductName}}</h2>\\n                  <p>{{engineerJob.ContactName}}</p>\\n                  <p>{{engineerJob.RiskAddress}}</p>\\n                </ion-label>\\n                <ion-icon slot='end' name=\\\"chevron-forward\\\"></ion-icon>\\n              </ion-item>\\n            </ion-list>\\n          </ion-card>\\n        </div>\\n      </div>\\n    </div>\\n    \\n  \\n    <div *ngSwitchCase=\\\"'past'\\\">\\n      <div *ngFor='let engineerJob of model; let i = index' (click)= 'gotoDetails(engineerJob.CLAIMGUID)'>\\n        <div *ngIf=\\\"engineerJob.ListType == 'Past'\\\" >\\n          <ion-card [hidden]=\\\"engineerJob.ParentJobGuid != ''\\\"> \\n            <ion-list>\\n              <ion-item lines=\\\"none\\\" [hidden]=\\\"engineerJob.ParentJobGuid!=''\\\" style=\\\"--background:{{engineerJob.BackgroundColour}};\\\" >\\n                <ion-thumbnail slot=\\\"start\\\">\\n                  <ion-label>\\n                    <p>{{engineerJob.BookingDate}}</p>\\n                    <p>{{engineerJob.BookingTimeType}}</p>\\n                  </ion-label>\\n                </ion-thumbnail>\\n                <ion-label>\\n                  <h4>{{engineerJob.CLAIMJOBID}} {{engineerJob.RiskPostCode}}</h4>\\n                  <h2>{{engineerJob.ProductName}}</h2>\\n                  <p>{{engineerJob.ContactName}}</p>\\n                  <p>{{engineerJob.RiskAddress}}</p>\\n                </ion-label>\\n                <ion-icon slot='end' name=\\\"chevron-forward\\\"></ion-icon>\\n              </ion-item>\\n            </ion-list>\\n          </ion-card>\\n        </div>\\n      </div>\\n    </div>\\n    \\n\\n    <div *ngSwitchCase=\\\"'future'\\\">\\n      <div *ngFor='let engineerJob of model; let i = index' (click)= 'gotoDetails(engineerJob.CLAIMGUID)'>\\n        <div *ngIf=\\\"engineerJob.ListType == 'Future'\\\" >\\n          <ion-card [hidden]=\\\"engineerJob.ParentJobGuid != ''\\\"> \\n            <ion-list>\\n              <ion-item lines='none' style=\\\"--background:{{engineerJob.BackgroundColour}};\\\" >\\n                <ion-thumbnail slot=\\\"start\\\">\\n                  <ion-label>\\n                    <p>{{engineerJob.BookingDate}}</p>\\n                    <p>{{engineerJob.BookingTimeType}}</p>\\n                  </ion-label>\\n                </ion-thumbnail>\\n                <ion-label>\\n                  <h4>{{engineerJob.CLAIMJOBID}} {{engineerJob.RiskPostCode}}</h4>\\n                  <h2>{{engineerJob.ProductName}}</h2>\\n                  <p>{{engineerJob.ContactName}}</p>\\n                  <p>{{engineerJob.RiskAddress}}</p>\\n                </ion-label>\\n                <ion-icon slot='end' name=\\\"chevron-forward\\\"></ion-icon>\\n              </ion-item>\\n            </ion-list>\\n          </ion-card>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</ion-content>\";"],"names":[],"sourceRoot":"webpack:///"}