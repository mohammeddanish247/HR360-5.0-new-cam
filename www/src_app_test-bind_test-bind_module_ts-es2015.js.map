{"version":3,"file":"src_app_test-bind_test-bind_module_ts-es2015.js","mappings":"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","sources":["./src/app/test-bind/test-bind-routing.module.ts","./src/app/test-bind/test-bind.module.ts","./src/app/test-bind/test-bind.page.ts","./src/app/test-bind/test-bind.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TestBindPage } from './test-bind.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TestBindPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TestBindPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TestBindPageRoutingModule } from './test-bind-routing.module';\n\nimport { TestBindPage } from './test-bind.page';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TestBindPageRoutingModule,\n    MatFormFieldModule,\n    ReactiveFormsModule\n    \n      ],\n  declarations: [TestBindPage]\n})\nexport class TestBindPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n \n@Component({\n  selector: 'app-test-bind',\n  templateUrl: './test-bind.page.html',\n  styleUrls: ['./test-bind.page.scss'],\n})\nexport class TestBindPage implements OnInit {\n  dynamicForm: FormGroup;\n  submitted = false;\n\n  ngOnInit(){\n    this.dynamicForm = this.formBuilder.group({\n      numberOfTickets: ['', Validators.required],\n      tickets: new FormArray([])\n  });\n  }\n\n  constructor(private formBuilder: FormBuilder, private router: Router) {}\n\n  // convenience getters for easy access to form fields\n  get f() { return this.dynamicForm.controls; }\n  get t() { return this.f.tickets as FormArray; }\n  get ticketFormGroups() { return this.t.controls as FormGroup[]; }\n\n\n  \n  onChangeTickets(e) {\n    const numberOfTickets = e.target.value || 0;\n\n    if (this.t.length < numberOfTickets) {\n\n        for (let i = this.t.length; i < numberOfTickets; i++) {\n            this.t.push(this.formBuilder.group({\n                name: ['', Validators.required],\n                email: ['', [Validators.required, Validators.email]]\n            }));\n        }\n\n    } else {\n\n        for (let i = this.t.length; i >= numberOfTickets; i--) {\n            this.t.removeAt(i);\n        }\n\n    }\n\n}\n\n\n\n\nonReset() {\n  // reset whole form back to initial state\n  this.submitted = false;\n  this.dynamicForm.reset();\n  this.t.clear();\n}\n\nonClear() {\n  // clear errors and reset ticket fields\n  this.submitted = false;\n  this.t.reset();\n}\n\nonBuy(){\n  this.router.navigate(['dynamicform']);\n}\n\n\n \n \n}\n\n\n","export default \"<ion-content>\\n\\n    <ion-grid class=\\\"grid1\\\">\\n    \\n        <ion-row class=\\\"row1\\\">\\n            <ion-col>\\n    \\n            </ion-col>\\n        </ion-row>\\n    \\n        <ion-row class=\\\"row2\\\">\\n            <ion-col>\\n    \\n            </ion-col>\\n        </ion-row>\\n    \\n    </ion-grid>\\n    \\n    <ion-slide>\\n        <div class=\\\"contaier-login\\\">\\n            <ion-grid>\\n                <ion-row>\\n                    <ion-col>\\n                        <h1>Iniciar Sesión</h1>\\n                    </ion-col>\\n                </ion-row>\\n                <ion-row>\\n                    <ion-col>\\n                        <ion-list>\\n    \\n                            <ion-item>\\n                                <ion-icon name=\\\"person\\\" class=\\\"icon-login\\\"></ion-icon>\\n                                <ion-input name=\\\"user\\\" type=\\\"text\\\" required placeholder=\\\"Usuario\\\"></ion-input>\\n                            </ion-item>\\n                            <br />\\n                            <ion-item>\\n                                <ion-icon name=\\\"lock\\\" class=\\\"icon-login\\\"></ion-icon>\\n                                <ion-input name=\\\"password\\\" type=\\\"password\\\" required placeholder=\\\"Contraseña\\\"></ion-input>\\n                            </ion-item>\\n    \\n                        </ion-list>\\n                    </ion-col>\\n                </ion-row>\\n                <ion-row>\\n                    <ion-col>\\n                        <ion-button type=\\\"submit\\\" fill=\\\"solid\\\" expand=\\\"full\\\">\\n                            Entrar\\n                        </ion-button>\\n                    </ion-col>\\n                </ion-row>\\n                <ion-row>\\n                    <ion-col>\\n                        <ion-label>\\n                            <h3>¿Olvido la contraseña?</h3>\\n                        </ion-label>\\n                    </ion-col>\\n                </ion-row>\\n            </ion-grid>\\n        </div>\\n    </ion-slide>\\n\\n<!-- <form [formGroup]=\\\"dynamicForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"card m-3\\\">\\n        <h5 class=\\\"card-header\\\">Angular 10 Dynamic Reactive Forms Example</h5>\\n\\n\\n        <div class=\\\"card-body border-bottom\\\">\\n            <div class=\\\"form-row\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label>Number of Tickets</label>\\n                    <select formControlName=\\\"numberOfTickets\\\" class=\\\"form-control\\\" (change)=\\\"onChangeTickets($event)\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.numberOfTickets.errors }\\\">\\n                        <option value=\\\"\\\"></option>\\n                        <option *ngFor=\\\"let i of [1,2,3,4,5,6,7,8,9,10]\\\">{{i}}</option>\\n                    </select>\\n                    <div *ngIf=\\\"submitted && f.numberOfTickets.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.numberOfTickets.errors.required\\\">Number of tickets is required</div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        \\n        <div *ngFor=\\\"let ticket of ticketFormGroups; let i = index\\\" class=\\\"list-group list-group-flush\\\">\\n            <div class=\\\"list-group-item\\\">\\n                <h5 class=\\\"card-title\\\">Ticket {{i + 1}}</h5>\\n                <div [formGroup]=\\\"ticket\\\" class=\\\"form-row\\\">\\n                    <div class=\\\"form-group col-6\\\">\\n                        <label>Name</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && ticket.controls.name.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && ticket.controls.name.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"ticket.controls.name.errors.required\\\">Name is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-6\\\">\\n                        <label>Email</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && ticket.controls.email.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && ticket.controls.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"ticket.controls.email.errors.required\\\">Email is required</div>\\n                            <div *ngIf=\\\"ticket.controls.email.errors.email\\\">Email must be a valid email address</div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"card-footer text-center border-top-0\\\">\\n            <button class=\\\"btn btn-primary mr-1\\\" (click)=\\\"onBuy()\\\">Buy Tickets</button>\\n            <button class=\\\"btn btn-secondary mr-1\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\">Reset</button>\\n            <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"onClear()\\\">Clear</button>\\n        </div>\\n    </div>\\n</form>\\n\\n\\n  \\n    <ion-button (click)=\\\"onBuy()\\\">NXT</ion-button>\\n\\n  -->\\n\";"],"names":[],"sourceRoot":"webpack:///"}