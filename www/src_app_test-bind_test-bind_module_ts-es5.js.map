{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAEC;AAFb,OADqB,CAAvB;;UAWaC,0BAAyB;AAAA;AAAA;;AAAzBA,gCAAyB,uDAJrC,yDAAS;AACRC,eAAO,EAAE,CAACC,mEAAsBN,MAAtB,CAAD,CADD;AAERO,eAAO,EAAE,CAACD,yDAAD;AAFD,OAAT,CAIqC,GAAzBF,0BAAyB,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCOAI,mBAAkB;AAAA;AAAA;;AAAlBA,yBAAkB,uDAZ9B,yDAAS;AACRH,eAAO,EAAE,CACPI,yDADO,EAEPC,uDAFO,EAGPC,uDAHO,EAIPC,gFAJO,EAKPC,4EALO,EAMPH,+DANO,CADD;AAURI,oBAAY,EAAE,CAACC,yDAAD;AAVN,OAAT,CAY8B,GAAlBP,mBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCbAQ,aAAY;AAWvB,8BAAoBC,WAApB,EAAsDC,MAAtD,EAAoE;AAAA;;AAAhD;AAAkC;AATtD,2BAAY,KAAZ;AASwE;;AAXjD;AAAA;AAAA,iBAIvB,oBAAQ;AACN,iBAAKC,WAAL,GAAmB,KAAKF,WAAL,CAAiBG,KAAjB,CAAuB;AACxCC,6BAAe,EAAE,CAAC,EAAD,EAAKC,+DAAL,CADuB;AAExCC,qBAAO,EAAE,IAAID,qDAAJ,CAAc,EAAd;AAF+B,aAAvB,CAAnB;AAID,WATsB,CAavB;;AAbuB;AAAA;AAAA,eAcvB,eAAK;AAAK,mBAAO,KAAKH,WAAL,CAAiBK,QAAxB;AAAmC;AAdtB;AAAA;AAAA,eAevB,eAAK;AAAK,mBAAO,KAAKC,CAAL,CAAOF,OAAd;AAAqC;AAfxB;AAAA;AAAA,eAgBvB,eAAoB;AAAK,mBAAO,KAAKG,CAAL,CAAOF,QAAd;AAAwC;AAhB1C;AAAA;AAAA,iBAoBvB,yBAAgBG,CAAhB,EAAiB;AACf,gBAAMN,eAAe,GAAGM,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkB,CAA1C;;AAEA,gBAAI,KAAKH,CAAL,CAAOI,MAAP,GAAgBT,eAApB,EAAqC;AAEjC,mBAAK,IAAIU,CAAC,GAAG,KAAKL,CAAL,CAAOI,MAApB,EAA4BC,CAAC,GAAGV,eAAhC,EAAiDU,CAAC,EAAlD,EAAsD;AAClD,qBAAKL,CAAL,CAAOM,IAAP,CAAY,KAAKf,WAAL,CAAiBG,KAAjB,CAAuB;AAC/Ba,sBAAI,EAAE,CAAC,EAAD,EAAKX,+DAAL,CADyB;AAE/BY,uBAAK,EAAE,CAAC,EAAD,EAAK,CAACZ,+DAAD,EAAsBA,4DAAtB,CAAL;AAFwB,iBAAvB,CAAZ;AAIH;AAEJ,aATD,MASO;AAEH,mBAAK,IAAIS,EAAC,GAAG,KAAKL,CAAL,CAAOI,MAApB,EAA4BC,EAAC,IAAIV,eAAjC,EAAkDU,EAAC,EAAnD,EAAuD;AACnD,qBAAKL,CAAL,CAAOS,QAAP,CAAgBJ,EAAhB;AACH;AAEJ;AAEJ;AAxCwB;AAAA;AAAA,iBA6CzB,mBAAO;AACL;AACA,iBAAKK,SAAL,GAAiB,KAAjB;AACA,iBAAKjB,WAAL,CAAiBkB,KAAjB;AACA,iBAAKX,CAAL,CAAOY,KAAP;AACD;AAlDwB;AAAA;AAAA,iBAoDzB,mBAAO;AACL;AACA,iBAAKF,SAAL,GAAiB,KAAjB;AACA,iBAAKV,CAAL,CAAOW,KAAP;AACD;AAxDwB;AAAA;AAAA,iBA0DzB,iBAAK;AACH,iBAAKnB,MAAL,CAAYqB,QAAZ,CAAqB,CAAC,aAAD,CAArB;AACD;AA5DwB;;AAAA;AAAA;;;;gBAThBjB;;gBACAhB;;;;AAQIU,mBAAY,uDALxB,0DAAU;AACTwB,gBAAQ,EAAE,eADD;AAETC,gLAFS;;AAAA,OAAV,CAKwB,GAAZzB,aAAY,CAAZ;;;;;;;;;;;;;ACVb;;;AAAA0B,uCAAe,+7JAAf;;;;;;;;;;;;;;;","names":["routes","path","component","_test_bind_page__WEBPACK_IMPORTED_MODULE_0__","TestBindPageRoutingModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_3__","exports","TestBindPageModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_5__","_ionic_angular__WEBPACK_IMPORTED_MODULE_6__","_test_bind_routing_module__WEBPACK_IMPORTED_MODULE_0__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__","declarations","_test_bind_page__WEBPACK_IMPORTED_MODULE_1__","TestBindPage","formBuilder","router","dynamicForm","group","numberOfTickets","_angular_forms__WEBPACK_IMPORTED_MODULE_2__","tickets","controls","f","t","e","target","value","length","i","push","name","email","removeAt","submitted","reset","clear","navigate","selector","template","__webpack_exports__"],"sources":["webpack:///src/app/test-bind/test-bind-routing.module.ts","webpack:///src/app/test-bind/test-bind.module.ts","webpack:///src/app/test-bind/test-bind.page.ts","webpack:///src/app/test-bind/test-bind.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TestBindPage } from './test-bind.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TestBindPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TestBindPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TestBindPageRoutingModule } from './test-bind-routing.module';\n\nimport { TestBindPage } from './test-bind.page';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TestBindPageRoutingModule,\n    MatFormFieldModule,\n    ReactiveFormsModule\n    \n      ],\n  declarations: [TestBindPage]\n})\nexport class TestBindPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n \n@Component({\n  selector: 'app-test-bind',\n  templateUrl: './test-bind.page.html',\n  styleUrls: ['./test-bind.page.scss'],\n})\nexport class TestBindPage implements OnInit {\n  dynamicForm: FormGroup;\n  submitted = false;\n\n  ngOnInit(){\n    this.dynamicForm = this.formBuilder.group({\n      numberOfTickets: ['', Validators.required],\n      tickets: new FormArray([])\n  });\n  }\n\n  constructor(private formBuilder: FormBuilder, private router: Router) {}\n\n  // convenience getters for easy access to form fields\n  get f() { return this.dynamicForm.controls; }\n  get t() { return this.f.tickets as FormArray; }\n  get ticketFormGroups() { return this.t.controls as FormGroup[]; }\n\n\n  \n  onChangeTickets(e) {\n    const numberOfTickets = e.target.value || 0;\n\n    if (this.t.length < numberOfTickets) {\n\n        for (let i = this.t.length; i < numberOfTickets; i++) {\n            this.t.push(this.formBuilder.group({\n                name: ['', Validators.required],\n                email: ['', [Validators.required, Validators.email]]\n            }));\n        }\n\n    } else {\n\n        for (let i = this.t.length; i >= numberOfTickets; i--) {\n            this.t.removeAt(i);\n        }\n\n    }\n\n}\n\n\n\n\nonReset() {\n  // reset whole form back to initial state\n  this.submitted = false;\n  this.dynamicForm.reset();\n  this.t.clear();\n}\n\nonClear() {\n  // clear errors and reset ticket fields\n  this.submitted = false;\n  this.t.reset();\n}\n\nonBuy(){\n  this.router.navigate(['dynamicform']);\n}\n\n\n \n \n}\n\n\n","export default \"<ion-content>\\n\\n    <ion-grid class=\\\"grid1\\\">\\n    \\n        <ion-row class=\\\"row1\\\">\\n            <ion-col>\\n    \\n            </ion-col>\\n        </ion-row>\\n    \\n        <ion-row class=\\\"row2\\\">\\n            <ion-col>\\n    \\n            </ion-col>\\n        </ion-row>\\n    \\n    </ion-grid>\\n    \\n    <ion-slide>\\n        <div class=\\\"contaier-login\\\">\\n            <ion-grid>\\n                <ion-row>\\n                    <ion-col>\\n                        <h1>Iniciar Sesión</h1>\\n                    </ion-col>\\n                </ion-row>\\n                <ion-row>\\n                    <ion-col>\\n                        <ion-list>\\n    \\n                            <ion-item>\\n                                <ion-icon name=\\\"person\\\" class=\\\"icon-login\\\"></ion-icon>\\n                                <ion-input name=\\\"user\\\" type=\\\"text\\\" required placeholder=\\\"Usuario\\\"></ion-input>\\n                            </ion-item>\\n                            <br />\\n                            <ion-item>\\n                                <ion-icon name=\\\"lock\\\" class=\\\"icon-login\\\"></ion-icon>\\n                                <ion-input name=\\\"password\\\" type=\\\"password\\\" required placeholder=\\\"Contraseña\\\"></ion-input>\\n                            </ion-item>\\n    \\n                        </ion-list>\\n                    </ion-col>\\n                </ion-row>\\n                <ion-row>\\n                    <ion-col>\\n                        <ion-button type=\\\"submit\\\" fill=\\\"solid\\\" expand=\\\"full\\\">\\n                            Entrar\\n                        </ion-button>\\n                    </ion-col>\\n                </ion-row>\\n                <ion-row>\\n                    <ion-col>\\n                        <ion-label>\\n                            <h3>¿Olvido la contraseña?</h3>\\n                        </ion-label>\\n                    </ion-col>\\n                </ion-row>\\n            </ion-grid>\\n        </div>\\n    </ion-slide>\\n\\n<!-- <form [formGroup]=\\\"dynamicForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"card m-3\\\">\\n        <h5 class=\\\"card-header\\\">Angular 10 Dynamic Reactive Forms Example</h5>\\n\\n\\n        <div class=\\\"card-body border-bottom\\\">\\n            <div class=\\\"form-row\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label>Number of Tickets</label>\\n                    <select formControlName=\\\"numberOfTickets\\\" class=\\\"form-control\\\" (change)=\\\"onChangeTickets($event)\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.numberOfTickets.errors }\\\">\\n                        <option value=\\\"\\\"></option>\\n                        <option *ngFor=\\\"let i of [1,2,3,4,5,6,7,8,9,10]\\\">{{i}}</option>\\n                    </select>\\n                    <div *ngIf=\\\"submitted && f.numberOfTickets.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.numberOfTickets.errors.required\\\">Number of tickets is required</div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        \\n        <div *ngFor=\\\"let ticket of ticketFormGroups; let i = index\\\" class=\\\"list-group list-group-flush\\\">\\n            <div class=\\\"list-group-item\\\">\\n                <h5 class=\\\"card-title\\\">Ticket {{i + 1}}</h5>\\n                <div [formGroup]=\\\"ticket\\\" class=\\\"form-row\\\">\\n                    <div class=\\\"form-group col-6\\\">\\n                        <label>Name</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && ticket.controls.name.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && ticket.controls.name.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"ticket.controls.name.errors.required\\\">Name is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-6\\\">\\n                        <label>Email</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && ticket.controls.email.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && ticket.controls.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"ticket.controls.email.errors.required\\\">Email is required</div>\\n                            <div *ngIf=\\\"ticket.controls.email.errors.email\\\">Email must be a valid email address</div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"card-footer text-center border-top-0\\\">\\n            <button class=\\\"btn btn-primary mr-1\\\" (click)=\\\"onBuy()\\\">Buy Tickets</button>\\n            <button class=\\\"btn btn-secondary mr-1\\\" type=\\\"reset\\\" (click)=\\\"onReset()\\\">Reset</button>\\n            <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"onClear()\\\">Clear</button>\\n        </div>\\n    </div>\\n</form>\\n\\n\\n  \\n    <ion-button (click)=\\\"onBuy()\\\">NXT</ion-button>\\n\\n  -->\\n\";"]}